
/*!
 ███╗   ███╗███████╗████████╗██████╗  ██████╗     ██╗   ██╗██╗
 ████╗ ████║██╔════╝╚══██╔══╝██╔══██╗██╔═══██╗    ██║   ██║██║
 ██╔████╔██║█████╗     ██║   ██████╔╝██║   ██║    ██║   ██║██║
 ██║╚██╔╝██║██╔══╝     ██║   ██╔══██╗██║   ██║    ██║   ██║██║
 ██║ ╚═╝ ██║███████╗   ██║   ██║  ██║╚██████╔╝    ╚██████╔╝██║
 ╚═╝     ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝      ╚═════╝ ╚═╝                                                             

 * Metro UI v5.1.0 Components Library  (https://metroui.org.ua)
 * Copyright 2012-2025 by Serhii Pimenov
 * Licensed under MIT
 */

(() => {
  var __defProp = Object.defineProperty;
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };

  // node_modules/@olton/datetime/dist/datetime.js
  var isNum = (v2) => !isNaN(v2);
  var DEFAULT_FORMAT = "YYYY-MM-DDTHH:mm:ss.sss";
  var INVALID_DATE = "Invalid date";
  var REGEX_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|m{1,2}|s{1,3}/g;
  var REGEX_FORMAT_STRFTIME = /(%[a-z])/gi;
  var DEFAULT_FORMAT_STRFTIME = "%Y-%m-%dT%H:%M:%S.%Q%t";
  var DEFAULT_LOCALE = {
    months: "January February March April May June July August September October November December".split(" "),
    monthsShort: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
    weekdays: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
    weekdaysShort: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
    weekdaysMin: "Su Mo Tu We Th Fr Sa".split(" "),
    weekStart: 0
  };
  var M = {
    ms: "Milliseconds",
    s: "Seconds",
    m: "Minutes",
    h: "Hours",
    D: "Date",
    d: "Day",
    M: "Month",
    Y: "FullYear",
    y: "Year",
    t: "Time"
  };
  var C = {
    ms: "ms",
    s: "second",
    m: "minute",
    h: "hour",
    D: "day",
    W: "week",
    d: "weekDay",
    M: "month",
    Y: "year",
    Y2: "year2",
    t: "time",
    c: "century",
    q: "quarter"
  };
  var required = (m2 = "") => {
    throw new Error("This argument is required!");
  };
  var isset = (v2, nullable = true) => {
    try {
      return nullable ? typeof v2 !== "undefined" : typeof v2 !== "undefined" && v2 !== null;
    } catch (e) {
      return false;
    }
  };
  var not = (v2) => typeof v2 === "undefined" || v2 === null;
  var lpad = function(str3, pad2, length) {
    let _str = "" + str3;
    if (length && _str.length >= length) {
      return _str;
    }
    return Array(length + 1 - _str.length).join(pad2) + _str;
  };
  var ua_default = {
    months: "\u0421\u0456\u0447\u0435\u043D\u044C_\u041B\u044E\u0442\u0438\u0439_\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044C_\u041A\u0432\u0456\u0442\u0435\u043D\u044C_\u0422\u0440\u0430\u0432\u0435\u043D\u044C_\u0427\u0435\u0440\u0432\u0435\u043D\u044C_\u041B\u0438\u043F\u0435\u043D\u044C_\u0421\u0435\u0440\u043F\u0435\u043D\u044C_\u0412\u0435\u0440\u0435\u0441\u0435\u043D\u044C_\u0416\u043E\u0432\u0442\u0435\u043D\u044C_\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434_\u0413\u0440\u0443\u0434\u0435\u043D\u044C".split("_"),
    monthsParental: "\u0421\u0456\u0447\u043D\u044F_\u041B\u044E\u0442\u043E\u0433\u043E_\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044F_\u041A\u0432\u0456\u0442\u043D\u044F_\u0422\u0440\u0430\u0432\u043D\u044F_\u0427\u0435\u0440\u0432\u043D\u044F_\u041B\u0438\u043F\u043D\u044F_\u0421\u0435\u0440\u043F\u043D\u044F_\u0412\u0435\u0440\u0435\u0441\u043D\u044F_\u0416\u043E\u0432\u0442\u043D\u044F_\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430_\u0413\u0440\u0443\u0434\u043D\u044F".split("_"),
    monthsShort: "\u0421\u0456\u0447_\u041B\u044E\u0442_\u0411\u0435\u0440_\u041A\u0432\u0456_\u0422\u0440\u0430_\u0427\u0435\u0440_\u041B\u0438\u043F_\u0421\u0435\u0440_\u0412\u0435\u0440_\u0416\u043E\u0432_\u041B\u0438\u0441_\u0413\u0440\u0443".split("_"),
    weekdays: "\u041D\u0435\u0434\u0456\u043B\u044F_\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0412\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0421\u0435\u0440\u0435\u0434\u0430_\u0427\u0435\u0442\u0432\u0435\u0440_\u041F'\u044F\u0442\u043D\u0438\u0446\u044F_\u0421\u0443\u0431\u043E\u0442\u0430".split("_"),
    weekdaysShort: "\u041D\u0435\u0434_\u041F\u043E\u043D_\u0412\u0456\u0432_\u0421\u0435\u0440_\u0427\u0435\u0442_\u041F\u0442\u043D_\u0421\u0443\u0431".split("_"),
    weekdaysMin: "\u041D\u0434_\u041F\u043D_\u0412\u0442_\u0421\u0440_\u0427\u0442_\u041F\u0442_\u0421\u0431".split("_"),
    weekStart: 1
  };
  var de_default = {
    months: "Januar_Februar_M\xE4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
    monthsShort: "Jan_Feb_M\xE4r_Apr_Mai_Jun_Jul_Aug_Sep_Okt_Nov_Dez".split("_"),
    weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
    weekdaysShort: "Son_Mon_Die_Mit_Don_Fre_Sam".split("_"),
    weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
    weekStart: 1
  };
  var Datetime2 = class _Datetime {
    constructor() {
      const args = [].slice.call(arguments);
      this.value = new (Function.prototype.bind.apply(Date, [this].concat(args)))();
      this.locale = "en";
      this.weekStart = _Datetime.locales["en"].weekStart;
      this.utcMode = false;
      this.mutable = true;
      if (!isNum(this.value.getTime())) {
        throw new Error(INVALID_DATE);
      }
    }
    static locales = {
      en: DEFAULT_LOCALE,
      ua: ua_default,
      de: de_default
    };
    static isDatetime(val) {
      return val instanceof _Datetime;
    }
    static now(asDate = false) {
      return datetime2()[asDate ? "val" : "time"]();
    }
    static parse(str3 = required()) {
      return datetime2(Date.parse(str3));
    }
    static setLocale(name2 = required(), locale = required()) {
      _Datetime.locales[name2] = locale;
    }
    static getLocale(name2 = "en") {
      return isset(_Datetime.locales[name2], false) ? _Datetime.locales[name2] : _Datetime.locales["en"];
    }
    static align(date, align) {
      let _date = datetime2(date), result, temp;
      switch (align) {
        case C.s:
          result = _date.ms(0);
          break;
        //second
        case C.m:
          result = _Datetime.align(_date, C.s)[C.s](0);
          break;
        //minute
        case C.h:
          result = _Datetime.align(_date, C.m)[C.m](0);
          break;
        //hour
        case C.D:
          result = _Datetime.align(_date, C.h)[C.h](0);
          break;
        //day
        case C.M:
          result = _Datetime.align(_date, C.D)[C.D](1);
          break;
        //month
        case C.Y:
          result = _Datetime.align(_date, C.M)[C.M](0);
          break;
        //year
        case C.W: {
          temp = _date.weekDay();
          result = _Datetime.align(date, C.D).addDay(-temp);
          break;
        }
        default:
          result = _date;
      }
      return result;
    }
    static alignEnd(date, align) {
      let _date = datetime2(date), result, temp;
      switch (align) {
        case C.ms:
          result = _date.ms(999);
          break;
        //second
        case C.s:
          result = _Datetime.alignEnd(_date, C.ms);
          break;
        //second
        case C.m:
          result = _Datetime.alignEnd(_date, C.s)[C.s](59);
          break;
        //minute
        case C.h:
          result = _Datetime.alignEnd(_date, C.m)[C.m](59);
          break;
        //hour
        case C.D:
          result = _Datetime.alignEnd(_date, C.h)[C.h](23);
          break;
        //day
        case C.M:
          result = _Datetime.alignEnd(_date, C.D)[C.D](1).add(1, C.M).add(-1, C.D);
          break;
        //month
        case C.Y:
          result = _Datetime.alignEnd(_date, C.D)[C.M](11)[C.D](31);
          break;
        //year
        case C.W: {
          temp = _date.weekDay();
          result = _Datetime.alignEnd(_date, "day").addDay(6 - temp);
          break;
        }
        default:
          result = date;
      }
      return result;
    }
    immutable(v2) {
      this.mutable = !(not(v2) ? true : v2);
      return this;
    }
    utc() {
      this.utcMode = true;
      return this;
    }
    local() {
      this.utcMode = false;
      return this;
    }
    useLocale(val, override) {
      this.locale = override ? val : !isset(_Datetime.locales[val], false) ? "en" : val;
      this.weekStart = _Datetime.getLocale(this.locale).weekStart;
      return this;
    }
    clone() {
      const c = datetime2(this.value);
      c.locale = this.locale;
      c.weekStart = this.weekStart;
      c.mutable = this.mutable;
      return c;
    }
    align(to) {
      if (this.mutable) {
        this.value = _Datetime.align(this, to).val();
        return this;
      }
      return this.clone().immutable(false).align(to).immutable(!this.mutable);
    }
    alignEnd(to) {
      if (this.mutable) {
        this.value = _Datetime.alignEnd(this, to).val();
        return this;
      }
      return this.clone().immutable(false).alignEnd(to).immutable(!this.mutable);
    }
    val(val) {
      if (!(val instanceof Date))
        return this.value;
      if (this.mutable) {
        this.value = val;
        return this;
      }
      return datetime2(val);
    }
    year2() {
      return +("" + this.year()).substr(-2);
    }
    /* Get + Set */
    _set(m2, v2) {
      const fn = "set" + (this.utcMode && m2 !== "t" ? "UTC" : "") + M[m2];
      if (this.mutable) {
        this.value[fn](v2);
        return this;
      }
      const clone = this.clone();
      clone.value[fn](v2);
      return clone;
    }
    _get(m2) {
      const fn = "get" + (this.utcMode && m2 !== "t" ? "UTC" : "") + M[m2];
      return this.value[fn]();
    }
    _work(part, val) {
      if (!arguments.length || (typeof val === "undefined" || val === null)) {
        return this._get(part);
      }
      return this._set(part, val);
    }
    ms(val) {
      return this._work("ms", val);
    }
    second(val) {
      return this._work("s", val);
    }
    minute(val) {
      return this._work("m", val);
    }
    hour(val) {
      return this._work("h", val);
    }
    day(val) {
      return this._work("D", val);
    }
    month(val) {
      return this._work("M", val);
    }
    year(val) {
      return this._work("Y", val);
    }
    time(val) {
      return this._work("t", val);
    }
    weekDay(val) {
      if (!arguments.length || not(val)) {
        return this.utcMode ? this.value.getUTCDay() : this.value.getDay();
      }
      const curr = this.weekDay();
      const diff = val - curr;
      this.day(this.day() + diff);
      return this;
    }
    get(unit) {
      return typeof this[unit] !== "function" ? this : this[unit]();
    }
    set(unit, val) {
      return typeof this[unit] !== "function" ? this : this[unit](val);
    }
    add(val, to) {
      switch (to) {
        case C.h:
          return this.time(this.time() + val * 60 * 60 * 1e3);
        case C.m:
          return this.time(this.time() + val * 60 * 1e3);
        case C.s:
          return this.time(this.time() + val * 1e3);
        case C.ms:
          return this.time(this.time() + val);
        case C.D:
          return this.day(this.day() + val);
        case C.W:
          return this.day(this.day() + val * 7);
        case C.M:
          return this.month(this.month() + val);
        case C.Y:
          return this.year(this.year() + val);
      }
    }
    addHour(v2) {
      return this.add(v2, C.h);
    }
    addMinute(v2) {
      return this.add(v2, C.m);
    }
    addSecond(v2) {
      return this.add(v2, C.s);
    }
    addMs(v2) {
      return this.add(v2, C.ms);
    }
    addDay(v2) {
      return this.add(v2, C.D);
    }
    addWeek(v2) {
      return this.add(v2, C.W);
    }
    addMonth(v2) {
      return this.add(v2, C.M);
    }
    addYear(v2) {
      return this.add(v2, C.Y);
    }
    format(fmt, locale) {
      const format = fmt || DEFAULT_FORMAT;
      const names = _Datetime.getLocale(locale || this.locale);
      const year = this.year(), year2 = this.year2(), month = this.month(), day = this.day(), weekDay = this.weekDay();
      const hour = this.hour(), minute = this.minute(), second = this.second(), ms = this.ms();
      const matches3 = {
        YY: year2,
        YYYY: year,
        M: month + 1,
        MM: lpad(month + 1, 0, 2),
        MMM: names.monthsShort[month],
        MMMM: names.months[month],
        D: day,
        DD: lpad(day, 0, 2),
        d: weekDay,
        dd: names.weekdaysMin[weekDay],
        ddd: names.weekdaysShort[weekDay],
        dddd: names.weekdays[weekDay],
        H: hour,
        HH: lpad(hour, 0, 2),
        m: minute,
        mm: lpad(minute, 0, 2),
        s: second,
        ss: lpad(second, 0, 2),
        sss: lpad(ms, 0, 3)
      };
      return format.replace(REGEX_FORMAT, (match, $1) => $1 || matches3[match]);
    }
    valueOf() {
      return this.value.valueOf();
    }
    toString() {
      return this.value.toString();
    }
  };
  var datetime2 = (...args) => args && args[0] instanceof Datetime2 ? args[0] : new Datetime2(...args);
  var fnFormat = Datetime2.prototype.format;
  var buddhistMixin = {
    buddhist() {
      return this.year() + 543;
    },
    format(format, locale) {
      format = format || DEFAULT_FORMAT;
      const matches3 = {
        BB: (this.buddhist() + "").slice(-2),
        BBBB: this.buddhist()
      };
      let result = format.replace(/(\[[^\]]+])|B{4}|B{2}/g, (match, $1) => $1 || matches3[match]);
      return fnFormat.bind(this)(result, locale);
    }
  };
  Object.assign(Datetime2.prototype, buddhistMixin);
  var createCalendar = (date, iso) => {
    let _date = date instanceof Datetime2 ? date.clone().align("month") : datetime2(date);
    let ws = iso === 0 || iso ? iso : date.weekStart;
    let wd = ws ? _date.isoWeekDay() : _date.weekDay();
    let names = Datetime2.getLocale(_date.locale);
    let now = datetime2(), i3;
    const getWeekDays = (wd2, ws2) => {
      if (ws2 === 0) {
        return wd2;
      }
      let su = wd2[0];
      return wd2.slice(1).concat([su]);
    };
    const result = {
      month: names.months[_date.month()],
      days: [],
      weekstart: iso ? 1 : 0,
      weekdays: getWeekDays(names.weekdaysMin, ws),
      today: now.format("YYYY-MM-DD"),
      weekends: [],
      week: []
    };
    _date.addDay(ws ? -wd + 1 : -wd);
    for (i3 = 0; i3 < 42; i3++) {
      result.days.push(_date.format("YYYY-MM-DD"));
      _date.add(1, "day");
    }
    result.weekends = result.days.filter(function(v2, i22) {
      const def = [0, 6, 7, 13, 14, 20, 21, 27, 28, 34, 35, 41];
      const iso2 = [5, 6, 12, 13, 19, 20, 26, 27, 33, 34, 40, 41];
      return ws === 0 ? def.includes(i22) : iso2.includes(i22);
    });
    _date = now.clone();
    wd = ws ? _date.isoWeekDay() : _date.weekDay();
    _date.addDay(ws ? -wd + 1 : -wd);
    for (i3 = 0; i3 < 7; i3++) {
      result.week.push(_date.format("YYYY-MM-DD"));
      _date.add(1, "day");
    }
    return result;
  };
  Object.assign(Datetime2.prototype, {
    // 1 - Monday, 0 - Sunday
    calendar(weekStart) {
      return createCalendar(this, weekStart);
    }
  });
  var fnFormat2 = Datetime2.prototype.format;
  Object.assign(Datetime2.prototype, {
    century() {
      return Math.ceil(this.year() / 100);
    },
    format(format, locale) {
      format = format || DEFAULT_FORMAT;
      const matches3 = {
        C: this.century()
      };
      let fmt = format.replace(/(\[[^\]]+])|C/g, (match, $1) => $1 || matches3[match]);
      return fnFormat2.bind(this)(fmt, locale);
    }
  });
  Object.assign(Datetime2.prototype, {
    same(d2) {
      return this.time() === datetime2(d2).time();
    },
    /*
    * align: year, month, day, hour, minute, second, ms = default
    * */
    compare(d2, align, operator = "=") {
      const date = datetime2(d2);
      const curr = datetime2(this.value);
      let t1, t2;
      operator = operator || "=";
      if (["<", ">", ">=", "<=", "=", "!="].includes(operator) === false) {
        operator = "=";
      }
      align = (align || "ms").toLowerCase();
      t1 = curr.align(align).time();
      t2 = date.align(align).time();
      switch (operator) {
        case "<":
          return t1 < t2;
        case ">":
          return t1 > t2;
        case "<=":
          return t1 <= t2;
        case ">=":
          return t1 >= t2;
        case "=":
          return t1 === t2;
        case "!=":
          return t1 !== t2;
      }
    },
    between(d1, d2) {
      return this.younger(d1) && this.older(d2);
    },
    older(date, align) {
      return this.compare(date, align, "<");
    },
    olderOrEqual(date, align) {
      return this.compare(date, align, "<=");
    },
    younger(date, align) {
      return this.compare(date, align, ">");
    },
    youngerOrEqual(date, align) {
      return this.compare(date, align, ">=");
    },
    equal(date, align) {
      return this.compare(date, align, "=");
    },
    notEqual(date, align) {
      return this.compare(date, align, "!=");
    },
    diff(d2) {
      const date = datetime2(d2);
      const diff = Math.abs(this.time() - date.time());
      const diffMonth = Math.abs(this.month() - date.month() + 12 * (this.year() - date.year()));
      return {
        "ms": diff,
        "second": Math.ceil(diff / 1e3),
        "minute": Math.ceil(diff / (1e3 * 60)),
        "hour": Math.ceil(diff / (1e3 * 60 * 60)),
        "day": Math.ceil(diff / (1e3 * 60 * 60 * 24)),
        "month": diffMonth,
        "year": Math.floor(diffMonth / 12)
      };
    },
    distance(d2, align) {
      return this.diff(d2)[align];
    }
  });
  Object.assign(Datetime2.prototype, {
    isLeapYear() {
      const year = this.year();
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
  });
  Object.assign(Datetime2.prototype, {
    dayOfYear() {
      const dayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
      const month = this.month();
      const day = this.day();
      return dayCount[month] + day + (month > 1 && this.isLeapYear() ? 1 : 0);
    }
  });
  Object.assign(Datetime2.prototype, {
    daysInMonth() {
      const curr = datetime2(this.value);
      return curr.add(1, "month").day(1).add(-1, "day").day();
    },
    daysInYear() {
      return this.isLeapYear() ? 366 : 365;
    },
    daysInYearMap() {
      const result = [];
      const curr = datetime2(this.value);
      curr.month(0).day(1);
      for (let i3 = 0; i3 < 12; i3++) {
        curr.add(1, "month").add(-1, "day");
        result.push(curr.day());
        curr.day(1).add(1, "month");
      }
      return result;
    },
    daysInYearObj(locale, shortName) {
      const map2 = this.daysInYearMap();
      const result = {};
      const names = Datetime2.getLocale(locale || this.locale);
      map2.forEach((v2, i3) => result[names[shortName ? "monthsShort" : "months"][i3]] = v2);
      return result;
    }
  });
  Object.assign(Datetime2.prototype, {
    decade() {
      return Math.floor(this.year() / 10) * 10;
    },
    decadeStart() {
      const decade = this.decade();
      const result = this.mutable ? this : this.clone();
      return result.year(decade).month(0).day(1);
    },
    decadeEnd() {
      const decade = this.decade() + 9;
      const result = this.mutable ? this : this.clone();
      return result.year(decade).month(11).day(31);
    },
    decadeOfMonth() {
      const part = this.clone().add(1, "month").day(1).add(-1, "day").day() / 3;
      const day = this.day();
      if (day <= part) return 1;
      if (day <= part * 2) return 2;
      return 3;
    }
  });
  Object.assign(Datetime2, {
    from(str3, format, locale) {
      let norm, normFormat, fItems, dItems;
      let iMonth, iDay, iYear, iHour, iMinute, iSecond, iMs;
      let year, month, day, hour, minute, second, ms;
      let parsedMonth;
      const getIndex = function(where, what) {
        return where.map(function(el) {
          return el.toLowerCase();
        }).indexOf(what.toLowerCase());
      };
      const monthNameToNumber = function(month2) {
        let i3 = -1;
        const names = Datetime2.getLocale(locale || "en");
        if (not(month2)) return -1;
        i3 = getIndex(names.months, month2);
        if (i3 === -1 && typeof names["monthsParental"] !== "undefined") {
          i3 = getIndex(names["monthsParental"], month2);
        }
        if (i3 === -1) {
          month2 = month2.substr(0, 3);
          i3 = getIndex(names.monthsShort, month2);
        }
        return i3 === -1 ? -1 : i3 + 1;
      };
      const getPartIndex = function(part) {
        const parts = {
          "month": ["M", "mm", "%m"],
          "day": ["D", "dd", "%d"],
          "year": ["YY", "YYYY", "yy", "yyyy", "%y"],
          "hour": ["h", "hh", "%h"],
          "minute": ["m", "mi", "i", "ii", "%i"],
          "second": ["s", "ss", "%s"],
          "ms": ["sss"]
        };
        let result = -1, key, index;
        for (let i3 = 0; i3 < parts[part].length; i3++) {
          key = parts[part][i3];
          index = fItems.indexOf(key);
          if (index !== -1) {
            result = index;
            break;
          }
        }
        return result;
      };
      if (!format) {
        return datetime2();
      }
      norm = str3.replace(/[\/,.:\s]/g, "-");
      normFormat = format.toLowerCase().replace(/[^a-zA-Z0-9%]/g, "-");
      fItems = normFormat.split("-");
      dItems = norm.split("-");
      if (norm.replace(/-/g, "").trim() === "") {
        throw new Error(INVALID_DATE);
      }
      iMonth = getPartIndex("month");
      iDay = getPartIndex("day");
      iYear = getPartIndex("year");
      iHour = getPartIndex("hour");
      iMinute = getPartIndex("minute");
      iSecond = getPartIndex("second");
      iMs = getPartIndex("ms");
      if (iMonth > -1 && dItems[iMonth]) {
        if (isNaN(parseInt(dItems[iMonth]))) {
          dItems[iMonth] = monthNameToNumber(dItems[iMonth]);
          if (dItems[iMonth] === -1) {
            iMonth = -1;
          }
        } else {
          parsedMonth = parseInt(dItems[iMonth]);
          if (parsedMonth < 1 || parsedMonth > 12) {
            iMonth = -1;
          }
        }
      } else {
        iMonth = -1;
      }
      year = iYear > -1 && dItems[iYear] ? dItems[iYear] : 0;
      month = iMonth > -1 && dItems[iMonth] ? dItems[iMonth] : 1;
      day = iDay > -1 && dItems[iDay] ? dItems[iDay] : 1;
      hour = iHour > -1 && dItems[iHour] ? dItems[iHour] : 0;
      minute = iMinute > -1 && dItems[iMinute] ? dItems[iMinute] : 0;
      second = iSecond > -1 && dItems[iSecond] ? dItems[iSecond] : 0;
      ms = iMs > -1 && dItems[iMs] ? dItems[iMs] : 0;
      return datetime2(year, month - 1, day, hour, minute, second, ms);
    }
  });
  var fnFormat3 = Datetime2.prototype.format;
  Object.assign(Datetime2.prototype, {
    ampm(isLowerCase) {
      let val = this.hour() < 12 ? "AM" : "PM";
      return isLowerCase ? val.toLowerCase() : val;
    },
    hour12: function(h7, p3) {
      let hour = h7;
      if (arguments.length === 0) {
        return this.hour() % 12;
      }
      p3 = p3 || "am";
      if (p3.toLowerCase() === "pm") {
        hour += 12;
      }
      return this.hour(hour);
    },
    format: function(format, locale) {
      let matches3, result, h12 = this.hour12();
      format = format || DEFAULT_FORMAT;
      matches3 = {
        a: "[" + this.ampm(true) + "]",
        A: "[" + this.ampm(false) + "]",
        h: h12,
        hh: lpad(h12, 0, 2)
      };
      result = format.replace(/(\[[^\]]+])|a|A|h{1,2}/g, (match, $1) => $1 || matches3[match]);
      return fnFormat3.bind(this)(result, locale);
    }
  });
  var fnFormat4 = Datetime2.prototype.format;
  var fnAlign = Datetime2.align;
  var fnAlignEnd = Datetime2.alignEnd;
  Object.assign(Datetime2, {
    align(d2, align) {
      let date = datetime2(d2), result, temp;
      switch (align) {
        case "isoWeek":
          temp = date.isoWeekDay();
          result = fnAlign(date, "day").addDay(-temp + 1);
          break;
        // isoWeek
        default:
          result = fnAlign.apply(void 0, [date, align]);
      }
      return result;
    },
    alignEnd(d2, align) {
      let date = datetime2(d2), result, temp;
      switch (align) {
        case "isoWeek":
          temp = date.isoWeekDay();
          result = fnAlignEnd(date, "day").addDay(7 - temp);
          break;
        // isoWeek
        default:
          result = fnAlignEnd.apply(void 0, [date, align]);
      }
      return result;
    }
  });
  Object.assign(Datetime2.prototype, {
    isoWeekDay(val) {
      let wd = (this.weekDay() + 6) % 7 + 1;
      if (!arguments.length || not(val)) {
        return wd;
      }
      return this.addDay(val - wd);
    },
    format(format, locale) {
      format = format || DEFAULT_FORMAT;
      const matches3 = {
        I: this.isoWeekDay()
      };
      let result = format.replace(/(\[[^\]]+])|I{1,2}/g, (match, $1) => $1 || matches3[match]);
      return fnFormat4.bind(this)(result, locale);
    }
  });
  Object.assign(Datetime2, {
    max() {
      let arr = [].slice.call(arguments);
      return arr.map((el) => datetime2(el)).sort((a2, b2) => b2.time() - a2.time())[0];
    }
  });
  Object.assign(Datetime2.prototype, {
    max() {
      return Datetime2.max.apply(this, [this].concat([].slice.call(arguments)));
    }
  });
  Object.assign(Datetime2, {
    min() {
      let arr = [].slice.call(arguments);
      return arr.map((el) => datetime2(el)).sort((a2, b2) => a2.time() - b2.time())[0];
    }
  });
  Object.assign(Datetime2.prototype, {
    min() {
      return Datetime2.min.apply(this, [this].concat([].slice.call(arguments)));
    }
  });
  var fnAlign2 = Datetime2.align;
  var fnAlignEnd2 = Datetime2.alignEnd;
  var fnAdd = Datetime2.prototype.add;
  Object.assign(Datetime2, {
    align(d2, align) {
      let date = datetime2(d2), result;
      switch (align) {
        case "quarter":
          result = Datetime2.align(date, "day").day(1).month(date.quarter() * 3 - 3);
          break;
        //quarter
        default:
          result = fnAlign2.apply(this, [date, align]);
      }
      return result;
    },
    alignEnd(d2, align) {
      let date = datetime2(d2), result;
      switch (align) {
        case "quarter":
          result = Datetime2.align(date, "quarter").add(3, "month").add(-1, "ms");
          break;
        //quarter
        default:
          result = fnAlignEnd2.apply(this, [date, align]);
      }
      return result;
    }
  });
  Object.assign(Datetime2.prototype, {
    quarter() {
      const month = this.month();
      if (month <= 2) return 1;
      if (month <= 5) return 2;
      if (month <= 8) return 3;
      return 4;
    },
    add(val, to) {
      if (to === "quarter") {
        return this.month(this.month() + val * 3);
      }
      return fnAdd.bind(this)(val, to);
    },
    addQuarter(v2) {
      return this.add(v2, "quarter");
    }
  });
  Object.assign(Datetime2, {
    sort(arr, opt2) {
      let result, _arr;
      const o2 = {};
      if (typeof opt2 === "string" || typeof opt2 !== "object" || not(opt2)) {
        o2.format = DEFAULT_FORMAT;
        o2.dir = opt2 && opt2.toUpperCase() === "DESC" ? "DESC" : "ASC";
        o2.returnAs = "datetime";
      } else {
        o2.format = opt2.format || DEFAULT_FORMAT;
        o2.dir = (opt2.dir || "ASC").toUpperCase();
        o2.returnAs = opt2.format ? "string" : opt2.returnAs || "datetime";
      }
      _arr = arr.map((el) => datetime2(el)).sort((a2, b2) => a2.valueOf() - b2.valueOf());
      if (o2.dir === "DESC") {
        _arr.reverse();
      }
      switch (o2.returnAs) {
        case "string":
          result = _arr.map((el) => el.format(o2.format));
          break;
        case "date":
          result = _arr.map((el) => el.val());
          break;
        default:
          result = _arr;
      }
      return result;
    }
  });
  var fnFormat5 = Datetime2.prototype.format;
  Object.assign(Datetime2.prototype, {
    utcOffset() {
      return this.value.getTimezoneOffset();
    },
    timezone() {
      return this.toTimeString().replace(/.+GMT([+-])(\d{2})(\d{2}).+/, "$1$2:$3");
    },
    timezoneName() {
      return this.toTimeString().replace(/.+\((.+?)\)$/, "$1");
    },
    format(format, locale) {
      format = format || DEFAULT_FORMAT;
      const matches3 = {
        Z: this.utcMode ? "Z" : this.timezone(),
        ZZ: this.timezone().replace(":", ""),
        ZZZ: "[GMT]" + this.timezone(),
        z: this.timezoneName()
      };
      let result = format.replace(/(\[[^\]]+])|Z{1,3}|z/g, (match, $1) => $1 || matches3[match]);
      return fnFormat5.bind(this)(result, locale);
    }
  });
  var fnFormat6 = Datetime2.prototype.format;
  Object.assign(Datetime2.prototype, {
    // TODO Need optimisation
    weekNumber(weekStart) {
      let nYear, nday, newYear, day, daynum, weeknum;
      weekStart = +weekStart || 0;
      newYear = datetime2(this.year(), 0, 1);
      day = newYear.weekDay() - weekStart;
      day = day >= 0 ? day : day + 7;
      daynum = Math.floor(
        (this.time() - newYear.time() - (this.utcOffset() - newYear.utcOffset()) * 6e4) / 864e5
      ) + 1;
      if (day < 4) {
        weeknum = Math.floor((daynum + day - 1) / 7) + 1;
        if (weeknum > 52) {
          nYear = datetime2(this.year() + 1, 0, 1);
          nday = nYear.weekDay() - weekStart;
          nday = nday >= 0 ? nday : nday + 7;
          weeknum = nday < 4 ? 1 : 53;
        }
      } else {
        weeknum = Math.floor((daynum + day - 1) / 7);
      }
      return weeknum;
    },
    isoWeekNumber() {
      return this.weekNumber(1);
    },
    weeksInYear(weekStart) {
      const curr = datetime2(this.value);
      return curr.month(11).day(31).weekNumber(weekStart);
    },
    format: function(format, locale) {
      let matches3, result, wn = this.weekNumber(), wni = this.isoWeekNumber();
      format = format || DEFAULT_FORMAT;
      matches3 = {
        W: wn,
        WW: lpad(wn, 0, 2),
        WWW: wni,
        WWWW: lpad(wni, 0, 2)
      };
      result = format.replace(/(\[[^\]]+])|W{1,4}/g, (match, $1) => $1 || matches3[match]);
      return fnFormat6.bind(this)(result, locale);
    }
  });
  Object.assign(Datetime2.prototype, {
    strftime(fmt, locale) {
      const format = fmt || DEFAULT_FORMAT_STRFTIME;
      const names = Datetime2.getLocale(locale || this.locale);
      const year = this.year(), year2 = this.year2(), month = this.month(), day = this.day(), weekDay = this.weekDay();
      const hour = this.hour(), hour12 = this.hour12(), minute = this.minute(), second = this.second(), ms = this.ms(), time2 = this.time();
      const aDay = lpad(day, 0, 2), aMonth = lpad(month + 1, 0, 2), aHour = lpad(hour, 0, 2), aHour12 = lpad(hour12, 0, 2), aMinute = lpad(minute, 0, 2), aSecond = lpad(second, 0, 2), aMs = lpad(ms, 0, 3);
      const that = this;
      const thursday = function() {
        return datetime2(that.value).day(that.day() - (that.weekDay() + 6) % 7 + 3);
      };
      const matches3 = {
        "%a": names.weekdaysShort[weekDay],
        "%A": names.weekdays[weekDay],
        "%b": names.monthsShort[month],
        "%h": names.monthsShort[month],
        "%B": names.months[month],
        "%c": this.toString().substring(0, this.toString().indexOf(" (")),
        "%C": this.century(),
        "%d": aDay,
        "%D": [aDay, aMonth, year].join("/"),
        "%e": day,
        "%F": [year, aMonth, aDay].join("-"),
        "%G": thursday().year(),
        "%g": ("" + thursday().year()).slice(2),
        "%H": aHour,
        "%I": aHour12,
        "%j": lpad(this.dayOfYear(), 0, 3),
        "%k": aHour,
        "%l": aHour12,
        "%m": aMonth,
        "%n": month + 1,
        "%M": aMinute,
        "%p": this.ampm(),
        "%P": this.ampm(true),
        "%s": Math.round(time2 / 1e3),
        "%S": aSecond,
        "%u": this.isoWeekDay(),
        "%V": this.isoWeekNumber(),
        "%w": weekDay,
        "%x": this.toLocaleDateString(),
        "%X": this.toLocaleTimeString(),
        "%y": year2,
        "%Y": year,
        "%z": this.timezone().replace(":", ""),
        "%Z": this.timezoneName(),
        "%r": [aHour12, aMinute, aSecond].join(":") + " " + this.ampm(),
        "%R": [aHour, aMinute].join(":"),
        "%T": [aHour, aMinute, aSecond].join(":"),
        "%Q": aMs,
        "%q": ms,
        "%t": this.timezone()
      };
      return format.replace(
        REGEX_FORMAT_STRFTIME,
        (match) => matches3[match] === 0 || matches3[match] ? matches3[match] : match
      );
    }
  });
  Object.assign(Datetime2, {
    isToday(date) {
      const d2 = datetime2(date).align("day");
      const c = datetime2().align("day");
      return d2.time() === c.time();
    }
  });
  Object.assign(Datetime2.prototype, {
    isToday() {
      return Datetime2.isToday(this);
    },
    today() {
      const now = datetime2();
      if (!this.mutable) {
        return now;
      }
      return this.val(now.val());
    }
  });
  Object.assign(Datetime2, {
    isTomorrow(date) {
      const d2 = datetime2(date).align("day");
      const c = datetime2().align("day").add(1, "day");
      return d2.time() === c.time();
    }
  });
  Object.assign(Datetime2.prototype, {
    isTomorrow() {
      return Datetime2.isTomorrow(this);
    },
    tomorrow() {
      if (!this.mutable) {
        return this.clone().immutable(false).add(1, "day").immutable(!this.mutable);
      }
      return this.add(1, "day");
    }
  });
  Object.assign(Datetime2.prototype, {
    toDateString() {
      return this.value.toDateString();
    },
    toISOString() {
      return this.value.toISOString();
    },
    toJSON() {
      return this.value.toJSON();
    },
    toGMTString() {
      return this.value.toGMTString();
    },
    toLocaleDateString() {
      return this.value.toLocaleDateString();
    },
    toLocaleString() {
      return this.value.toLocaleString();
    },
    toLocaleTimeString() {
      return this.value.toLocaleTimeString();
    },
    toTimeString() {
      return this.value.toTimeString();
    },
    toUTCString() {
      return this.value.toUTCString();
    },
    toDate() {
      return new Date(this.value);
    }
  });
  Object.assign(Datetime2, {
    timestamp() {
      return (/* @__PURE__ */ new Date()).getTime() / 1e3;
    }
  });
  Object.assign(Datetime2.prototype, {
    unix(val) {
      let _val;
      if (!arguments.length || not(val)) {
        return Math.floor(this.valueOf() / 1e3);
      }
      _val = val * 1e3;
      if (this.mutable) {
        return this.time(_val);
      }
      return datetime2(this.value).time(_val);
    },
    timestamp() {
      return this.unix();
    }
  });
  Object.assign(Datetime2, {
    isYesterday(date) {
      const d2 = datetime2(date).align("day");
      const c = datetime2().align("day").add(-1, "day");
      return d2.time() === c.time();
    }
  });
  Object.assign(Datetime2.prototype, {
    isYesterday() {
      return Datetime2.isYesterday(this);
    },
    yesterday() {
      if (!this.mutable) {
        return this.clone().immutable(false).add(-1, "day").immutable(!this.mutable);
      }
      return this.add(-1, "day");
    }
  });
  var getResult = (val) => {
    let res;
    let seconds = Math.floor(val / 1e3), minutes = Math.floor(seconds / 60), hours = Math.floor(minutes / 60), days = Math.floor(hours / 24), months = Math.floor(days / 30), years = Math.floor(months / 12);
    if (years >= 1) res = `${years} year`;
    if (months >= 1 && years < 1) res = `${months} mon`;
    if (days >= 1 && days <= 30) res = `${days} days`;
    if (hours && hours < 24) res = `${hours} hour`;
    if (minutes && (minutes >= 40 && minutes < 60)) res = "less a hour";
    if (minutes && minutes < 40) res = `${minutes} min`;
    if (seconds && seconds >= 30 && seconds < 60) res = `${seconds} sec`;
    if (seconds < 30) res = `few sec`;
    return res;
  };
  Object.assign(Datetime2, {
    timeLapse(d2) {
      let old = datetime2(d2), now = datetime2(), val = now - old;
      return getResult(val);
    }
  });
  Object.assign(Datetime2.prototype, {
    timeLapse() {
      let val = datetime2() - +this;
      return getResult(val);
    }
  });
  var ParseTimeMixin = {
    parseTime(t) {
      if (!isNaN(t)) return Math.abs(+t);
      const pattern = /([0-9]+d)|([0-9]{1,2}h)|([0-9]{1,2}m)|([0-9]{1,2}s)/gm;
      const match = t.match(pattern);
      return match.reduce((acc, val) => {
        let res;
        if (val.includes("d")) {
          res = 1e3 * 60 * 60 * 24 * parseInt(val);
        } else if (val.includes("h")) {
          res = 1e3 * 60 * 60 * parseInt(val);
        } else if (val.includes("m")) {
          res = 1e3 * 60 * parseInt(val);
        } else if (val.includes("s")) {
          res = 1e3 * parseInt(val);
        }
        return acc + res;
      }, 0);
    }
  };
  Object.assign(Datetime2, ParseTimeMixin);
  Object.assign(Datetime2.prototype, {
    moon() {
      const phases = [
        "new-moon",
        "waxing-crescent",
        "first-quarter",
        "waxing-gibbous",
        "full-moon",
        "waning-gibbous",
        "last-quarter",
        "waning-crescent"
      ];
      const phase = () => {
        let year = this.year(), month = this.month(), day = this.day();
        let e;
        let jd;
        let b2;
        let c = e = jd = b2 = 0;
        if (month < 3) {
          year--;
          month += 12;
        }
        ++month;
        c = 365.25 * year;
        e = 30.6 * month;
        jd = c + e + day - 694039.09;
        jd /= 29.5305882;
        b2 = parseInt(jd);
        jd -= b2;
        b2 = Math.round(jd * 8);
        if (b2 >= 8) b2 = 0;
        return { phase: b2, name: phases[b2] };
      };
      return phase();
    }
  });
  var version = "3.0.6";
  var build_time = "25.10.2024, 15:09:35";
  var info = () => {
    console.info(`%c Datetime Library %c v${version} %c ${build_time} `, "color: #ffffff; font-weight: bold; background: #003152", "color: white; background: darkgreen", "color: white; background: #0080fe;");
  };

  // source/datetime/index.js
  Datetime2.info = info;
  globalThis.Datetime = Datetime2;
  globalThis.datetime = datetime2;
  (function() {
    "use strict";
    const MONTHS = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
    const DAYS = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
    var getLocale = Datetime2.getLocale;
    Datetime2.getLocale = function(locale) {
      var data2;
      if (!Metro) {
        locale = "en";
        return getLocale.call(this, locale);
      }
      if (!Metro.locales[locale]) {
        locale = "en";
      }
      data2 = Metro.locales[locale];
      const months = MONTHS.map(function(el, i3) {
        return data2[el];
      });
      const monthsShort = MONTHS.map(function(el, i3) {
        return data2[`${el}_short`];
      });
      const weekdays = DAYS.map(function(el, i3) {
        return data2[el];
      });
      const weekdaysShort = DAYS.map(function(el, i3) {
        return data2[`${el}_short`];
      });
      const weekdaysMin = DAYS.map(function(el, i3) {
        return data2[`${el}_short_2`];
      });
      return {
        months,
        monthsShort,
        weekdays,
        weekdaysShort,
        weekdaysMin,
        weekStart: data2.weekStart
      };
    };
  })();

  // node_modules/@olton/string/dist/string.es.js
  var digit = "\\d";
  var whitespace = "\\s\\uFEFF\\xA0";
  var diacriticalMark = "\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F";
  var generalPunctuationBlock = "\\u2000-\\u206F";
  var nonCharacter = "\\x00-\\x2F\\x3A-\\x40\\x5B-\\x60\\x7b-\\xBF\\xD7\\xF7";
  var dingbatBlock = "\\u2700-\\u27BF";
  var lowerCaseLetter = "a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F";
  var upperCaseLetter = "\\x41-\\x5a\\xc0-\\xd6\\xd8-\\xde\\u0100\\u0102\\u0104\\u0106\\u0108\\u010a\\u010c\\u010e\\u0110\\u0112\\u0114\\u0116\\u0118\\u011a\\u011c\\u011e\\u0120\\u0122\\u0124\\u0126\\u0128\\u012a\\u012c\\u012e\\u0130\\u0132\\u0134\\u0136\\u0139\\u013b\\u013d\\u013f\\u0141\\u0143\\u0145\\u0147\\u014a\\u014c\\u014e\\u0150\\u0152\\u0154\\u0156\\u0158\\u015a\\u015c\\u015e\\u0160\\u0162\\u0164\\u0166\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017b\\u017d\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018b\\u018e-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019c\\u019d\\u019f\\u01a0\\u01a2\\u01a4\\u01a6\\u01a7\\u01a9\\u01ac\\u01ae\\u01af\\u01b1-\\u01b3\\u01b5\\u01b7\\u01b8\\u01bc\\u01c4\\u01c5\\u01c7\\u01c8\\u01ca\\u01cb\\u01cd\\u01cf\\u01d1\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u01de\\u01e0\\u01e2\\u01e4\\u01e6\\u01e8\\u01ea\\u01ec\\u01ee\\u01f1\\u01f2\\u01f4\\u01f6-\\u01f8\\u01fa\\u01fc\\u01fe\\u0200\\u0202\\u0204\\u0206\\u0208\\u020a\\u020c\\u020e\\u0210\\u0212\\u0214\\u0216\\u0218\\u021a\\u021c\\u021e\\u0220\\u0222\\u0224\\u0226\\u0228\\u022a\\u022c\\u022e\\u0230\\u0232\\u023a\\u023b\\u023d\\u023e\\u0241\\u0243-\\u0246\\u0248\\u024a\\u024c\\u024e";
  var REGEXP_TRIM_LEFT = new RegExp("^[" + whitespace + "]+");
  var REGEXP_TRIM_RIGHT = new RegExp("[" + whitespace + "]+$");
  var REGEXP_DIGIT = new RegExp("^" + digit + "+$");
  var REGEXP_HTML_SPECIAL_CHARACTERS = /[<>&"'`]/g;
  var REGEXP_TAGS = /(<([^>]+)>)/ig;
  var REGEXP_WORD = new RegExp(
    "(?:[" + upperCaseLetter + "][" + diacriticalMark + "]*)?(?:[" + lowerCaseLetter + "][" + diacriticalMark + "]*)+|(?:[" + upperCaseLetter + "][" + diacriticalMark + "]*)+(?![" + lowerCaseLetter + "])|[" + digit + "]+|[" + dingbatBlock + "]|[^" + nonCharacter + generalPunctuationBlock + whitespace + "]+",
    "g"
  );
  var REGEXP_LATIN_WORD = /[A-Z\xC0-\xD6\xD8-\xDE]?[a-z\xDF-\xF6\xF8-\xFF]+|[A-Z\xC0-\xD6\xD8-\xDE]+(?![a-z\xDF-\xF6\xF8-\xFF])|\d+/g;
  var REGEXP_ALPHA = new RegExp("^(?:[" + lowerCaseLetter + upperCaseLetter + "][" + diacriticalMark + "]*)+$");
  var REGEXP_ALPHA_DIGIT = new RegExp(
    "^((?:[" + lowerCaseLetter + upperCaseLetter + "][" + diacriticalMark + "]*)|[" + digit + "])+$"
  );
  var REGEXP_EXTENDED_ASCII = /^[\x01-\xFF]*$/;
  var toStr = (val, def = "") => {
    if (!val) return def;
    if (typeof val === "string") return val;
    if (Array.isArray(val)) return val.join("");
    return JSON.stringify(val);
  };
  var nvl = (a2, b2) => {
    return typeof a2 === "undefined" || a2 === null ? b2 : a2;
  };
  var words = (s2, pattern, flags) => {
    let regexp;
    if (!pattern) {
      regexp = REGEXP_EXTENDED_ASCII.test(s2) ? REGEXP_LATIN_WORD : REGEXP_WORD;
    } else if (pattern instanceof RegExp) {
      regexp = pattern;
    } else {
      regexp = new RegExp(pattern, nvl(flags, ""));
    }
    return nvl(toStr(s2).match(regexp), []);
  };
  var capitalize = (s2, strong2 = false) => {
    let _s = toStr(s2);
    let last2 = _s.substr(1);
    return _s.substr(0, 1).toUpperCase() + (strong2 ? last2.toLowerCase() : last2);
  };
  var camelCase = (s2) => {
    return words(toStr(s2)).map((el, i3) => {
      return i3 === 0 ? el.toLowerCase() : capitalize(el);
    }).join("");
  };
  var dashedName = (s2) => words(toStr(s2)).map((el) => el.toLowerCase()).join("-");
  var decapitalize = (s2) => {
    let _s = toStr(s2);
    return _s.substr(0, 1).toLowerCase() + _s.substr(1);
  };
  var kebab = (s2, joinWith = "-") => words(toStr(s2)).map((el) => el.toLowerCase()).join(joinWith);
  var lower = (s2) => toStr(s2).toLowerCase();
  var chars$1 = (s2, ignore = []) => toStr(s2).split("").filter((el) => !ignore.includes(el));
  var reverse = (s2, ignore) => chars$1(toStr(s2), ignore).reverse().join("");
  var shuffleArray = (a2 = []) => {
    let _a = [...a2];
    let i3 = _a.length, t, r;
    while (0 !== i3) {
      r = Math.floor(Math.random() * i3);
      i3 -= 1;
      t = _a[i3];
      _a[i3] = _a[r];
      _a[r] = t;
    }
    return _a;
  };
  var shuffle = (s2) => shuffleArray(toStr(s2).split("")).join("");
  var snake = (s2) => words(toStr(s2)).map((el) => el.toLowerCase()).join("_");
  var _swap = (swapped, char) => {
    const lc = char.toLowerCase();
    const uc = char.toUpperCase();
    return swapped + (char === lc ? uc : lc);
  };
  var swap = (s2) => toStr(s2).split("").reduce(_swap, "");
  var title = (s2, noSplit, sep = "") => {
    let _s = toStr(s2);
    const regexp = REGEXP_EXTENDED_ASCII.test(_s) ? REGEXP_LATIN_WORD : REGEXP_WORD;
    const noSplitArray = Array.isArray(noSplit) ? noSplit : typeof noSplit !== "string" ? [] : noSplit.split(sep);
    return s2.replace(regexp, (w2, i3) => {
      const isNoSplit = i3 && noSplitArray.includes(_s[i3 - 1]);
      return isNoSplit ? lower(w2) : capitalize(w2);
    });
  };
  var upper = (s2) => toStr(s2).toUpperCase();
  var count = (s2) => toStr(s2).length;
  var uniqueArray = (a2 = []) => {
    let _a = [...a2];
    for (let i3 = 0; i3 < _a.length; ++i3) {
      for (let j2 = i3 + 1; j2 < _a.length; ++j2) {
        if (_a[i3] === _a[j2])
          _a.splice(j2--, 1);
      }
    }
    return _a;
  };
  var countChars = (s2, ignore) => chars$1(s2, ignore).length;
  var countUniqueChars = (s2, ignore) => uniqueArray(chars$1(s2, ignore)).length;
  var countSubstr = (s2, sub2 = "") => {
    let _s = toStr(s2);
    let _sub = toStr(sub2);
    return _s === "" || _sub === "" ? 0 : _s.split(_sub).length - 1;
  };
  var countWords = (s2, pattern, flags) => words(s2, pattern, flags).length;
  var countUniqueWords = (s2, pattern, flags) => uniqueArray(words(s2, pattern, flags)).length;
  var escapeCharactersMap = {
    "<": "&lt;",
    ">": "&gt;",
    "&": "&amp;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };
  function replaceSpecialCharacter(character) {
    return escapeCharactersMap[character];
  }
  var escapeHtml = (s2) => toStr(s2).replace(REGEXP_HTML_SPECIAL_CHARACTERS, replaceSpecialCharacter);
  var unescapeCharsMap = {
    "<": /(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,
    ">": /(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,
    "&": /(&amp;)|(&#x0*26;)|(&#0*38;)/gi,
    '"': /(&quot;)|(&#x0*22;)|(&#0*34;)/gi,
    "'": /(&#x0*27;)|(&#0*39;)/gi,
    "`": /(&#x0*60;)|(&#0*96;)/gi
  };
  var chars = Object.keys(unescapeCharsMap);
  function reduceUnescapedString(string, key) {
    return string.replace(unescapeCharsMap[key], key);
  }
  var unescapeHtml = (s2) => chars.reduce(reduceUnescapedString, toStr(s2));
  var unique = (s2, ignore) => uniqueArray(chars$1(s2, ignore)).join("");
  var uniqueWords = (s2, pattern, flags) => uniqueArray(words(s2, pattern, flags)).join("");
  var substring = (s2, start, len) => toStr(s2).substring(start, len);
  var first = (s2, len = 0) => substring(toStr(s2), 0, len);
  var last = (s2, len = 0) => {
    let _s = toStr(s2);
    return _s ? substring(_s, _s.length - len) : "";
  };
  var MAX_SAFE_INTEGER = 9007199254740991;
  var BYTE_ORDER_MARK = "\uFEFF";
  var clip = (val, min, max = MAX_SAFE_INTEGER) => {
    if (val < min) return min;
    if (val > max) return max;
    return val;
  };
  var toInt = (val) => {
    if (val === Infinity) return MAX_SAFE_INTEGER;
    if (val === -Infinity) return -MAX_SAFE_INTEGER;
    return ~~val;
  };
  var truncate = (s2, len = 0, end = "...") => {
    let _s = toStr(s2);
    let _len = !len ? _s.length : clip(toInt(len), 0, MAX_SAFE_INTEGER);
    return substring(_s, 0, _len) + (_s.length === _len ? "" : end);
  };
  var truncateWithAlign = (s2, len = 0, end = "...") => {
    const truncatedText = truncate(s2, len, "");
    return truncatedText.slice(s2, truncatedText.lastIndexOf(" ")) + end;
  };
  var slice = (s2, parts = 1) => {
    let _s = toStr(s2);
    let res = [];
    let len = Math.round(_s.length / parts);
    for (let i3 = 0; i3 < parts; i3++) {
      res.push(
        substring(_s, i3 * len, len)
      );
    }
    return res;
  };
  var prune = (s2, len = 0, end = "") => {
    let _s = toStr(s2);
    let _len = !len ? _s.length : clip(toInt(len), 0, MAX_SAFE_INTEGER);
    let _truncatedLen = 0;
    const pattern = REGEXP_EXTENDED_ASCII.test(_s) ? REGEXP_LATIN_WORD : REGEXP_WORD;
    _s.replace(pattern, (word, offset) => {
      const wordLength = offset + word.length;
      if (wordLength <= _len - end.length) {
        _truncatedLen = wordLength;
      }
    });
    return _s.substring(0, _truncatedLen) + end;
  };
  var repeat = (s2, times = 0) => {
    let _s = toStr(s2);
    let _times = !times ? _s.length : clip(toInt(times), 0, MAX_SAFE_INTEGER);
    const _origin = _s;
    if (times === 0) {
      return "";
    }
    for (let i3 = 0; i3 < _times - 1; i3++) {
      _s += _origin;
    }
    return _s;
  };
  var padBuilder = (pad2, len = 0) => {
    const padLength = pad2.length;
    const length = len - padLength;
    return repeat(pad2, length + 1).substring(0, len);
  };
  var _pad = (s2, pad2 = "", len = 0, left = false) => {
    let _s = toStr(s2);
    let _len = !len ? _s.length : clip(toInt(len), 0, MAX_SAFE_INTEGER);
    let _padLen = pad2.length;
    let _paddingLen = _len - _s.length;
    let _sideLen = _paddingLen;
    if (_paddingLen <= 0 || _padLen === 0) {
      return _s;
    }
    let pads = padBuilder(pad2, _sideLen);
    return left ? pads + _s : _s + pads;
  };
  var lpad2 = (s2, pad2 = " ", len = 0) => {
    return _pad(s2, pad2, len, true);
  };
  var rpad = (s2, pad2 = " ", len = 0) => {
    return _pad(s2, pad2, len, false);
  };
  var pad = (s2, pad2 = "", len = 0) => {
    let _s = toStr(s2);
    let _len = !len ? _s.length : clip(toInt(len), 0, MAX_SAFE_INTEGER);
    let _padLen = pad2.length;
    let _paddingLen = _len - _s.length;
    let _sideLen = toInt(_paddingLen / 2);
    let _remainingLen = _paddingLen % 2;
    if (_paddingLen <= 0 || _padLen === 0) {
      return _s;
    }
    return padBuilder(pad2, _sideLen) + _s + padBuilder(pad2, _sideLen + _remainingLen);
  };
  var insert = (s2, sbj = "", pos = 0) => {
    let _s = toStr(s2);
    return _s.substring(0, pos) + sbj + _s.substring(pos);
  };
  var reduce = Array.prototype.reduce;
  var reduceRight = Array.prototype.reduceRight;
  var trim = (s2, ws) => ltrim(rtrim(s2, ws), ws);
  var ltrim = (s2, ws) => {
    let _s = toStr(s2);
    if (!ws) {
      return _s.replace(REGEXP_TRIM_LEFT, "");
    }
    if (ws === "" || _s === "") {
      return _s;
    }
    if (typeof ws !== "string") {
      ws = "";
    }
    let match = true;
    return reduce.call(
      _s,
      (trimmed, char) => {
        if (match && ws.includes(char)) {
          return trimmed;
        }
        match = false;
        return trimmed + char;
      },
      ""
    );
  };
  var rtrim = (s2, ws) => {
    let _s = toStr(s2);
    if (!ws) {
      return _s.replace(REGEXP_TRIM_RIGHT, "");
    }
    if (ws === "" || _s === "") {
      return _s;
    }
    if (typeof ws !== "string") {
      ws = "";
    }
    let match = true;
    return reduceRight.call(
      _s,
      (trimmed, char) => {
        if (match && ws.includes(char)) {
          return trimmed;
        }
        match = false;
        return char + trimmed;
      },
      ""
    );
  };
  var endsWith = (s2, end, pos) => toStr(s2).endsWith(end, pos);
  var isAlpha = (s2) => REGEXP_ALPHA.test(toStr(s2));
  var isAlphaDigit = (s2) => REGEXP_ALPHA_DIGIT.test(toStr(s2));
  var isDigit = (s2) => REGEXP_DIGIT.test(toStr(s2));
  var isBlank = (s2, strong2 = true) => strong2 ? toStr(s2).length === 0 : trim(s2).length === 0;
  var isEmpty = (s2) => trim(s2).length === 0;
  var isLower = (s2) => lower(s2) === s2;
  var isUpper = (s2) => upper(s2) === s2;
  var startsWith = (s2, start, pos) => toStr(s2).startsWith(start, pos);
  var stripTagsAll = (s2) => toStr(s2).replace(REGEXP_TAGS, "");
  var stripTags = (s2, allowed = []) => {
    let _s = toStr(s2);
    let tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
    return _s.replace(tags, ($0, $1) => {
      return allowed.includes($1) ? $0 : "";
    });
  };
  var re = {
    not_string: /[^s]/,
    not_bool: /[^t]/,
    not_type: /[^T]/,
    not_primitive: /[^v]/,
    number: /[diefg]/,
    numeric_arg: /[bcdiefguxX]/,
    json: /[j]/,
    not_json: /[^j]/,
    text: /^[^\x25]+/,
    modulo: /^\x25{2}/,
    placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
    key: /^([a-z_][a-z_\d]*)/i,
    key_access: /^\.([a-z_][a-z_\d]*)/i,
    index_access: /^\[(\d+)\]/,
    sign: /^[+-]/
  };
  function sprintf_format(parse_tree, argv) {
    let cursor = 1, tree_length = parse_tree.length, arg, output2 = "", ph, pad2, pad_character, pad_length, is_positive, sign;
    for (let i3 = 0; i3 < tree_length; i3++) {
      if (typeof parse_tree[i3] === "string") {
        output2 += parse_tree[i3];
      } else if (typeof parse_tree[i3] === "object") {
        ph = parse_tree[i3];
        if (ph.keys) {
          arg = argv[cursor];
          for (let k2 = 0; k2 < ph.keys.length; k2++) {
            if (typeof arg === "undefined") {
              throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k2], ph.keys[k2 - 1]));
            }
            arg = arg[ph.keys[k2]];
          }
        } else if (ph.param_no) {
          arg = argv[ph.param_no];
        } else {
          arg = argv[cursor++];
        }
        if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
          arg = arg();
        }
        if (re.numeric_arg.test(ph.type) && (typeof arg !== "number" && isNaN(arg))) {
          throw new TypeError(sprintf("[sprintf] expecting number but found %T"));
        }
        if (re.number.test(ph.type)) {
          is_positive = arg >= 0;
        }
        switch (ph.type) {
          case "b":
            arg = parseInt(arg, 10).toString(2);
            break;
          case "c":
            arg = String.fromCharCode(parseInt(arg, 10));
            break;
          case "d":
          case "i":
            arg = parseInt(arg, 10);
            break;
          case "j":
            arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
            break;
          case "e":
            arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
            break;
          case "f":
            arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
            break;
          case "g":
            arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
            break;
          case "o":
            arg = (parseInt(arg, 10) >>> 0).toString(8);
            break;
          case "s":
            arg = String(arg);
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;
          case "t":
            arg = String(!!arg);
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;
          case "T":
            arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;
          case "u":
            arg = parseInt(arg, 10) >>> 0;
            break;
          case "v":
            arg = arg.valueOf();
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;
          case "x":
            arg = (parseInt(arg, 10) >>> 0).toString(16);
            break;
          case "X":
            arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
            break;
        }
        if (re.json.test(ph.type)) {
          output2 += arg;
        } else {
          if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
            sign = is_positive ? "+" : "-";
            arg = arg.toString().replace(re.sign, "");
          } else {
            sign = "";
          }
          pad_character = ph.pad_char ? ph.pad_char === "0" ? "0" : ph.pad_char.charAt(1) : " ";
          pad_length = ph.width - (sign + arg).length;
          pad2 = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : "" : "";
          output2 += ph.align ? sign + arg + pad2 : pad_character === "0" ? sign + pad2 + arg : pad2 + sign + arg;
        }
      }
    }
    return output2;
  }
  var sprintf_cache = /* @__PURE__ */ Object.create(null);
  function sprintf_parse(fmt) {
    if (sprintf_cache[fmt]) {
      return sprintf_cache[fmt];
    }
    let _fmt = fmt, match, parse_tree = [], arg_names = 0;
    while (_fmt) {
      if ((match = re.text.exec(_fmt)) !== null) {
        parse_tree.push(match[0]);
      } else if ((match = re.modulo.exec(_fmt)) !== null) {
        parse_tree.push("%");
      } else if ((match = re.placeholder.exec(_fmt)) !== null) {
        if (match[2]) {
          arg_names |= 1;
          let field_list = [], replacement_field = match[2], field_match = [];
          if ((field_match = re.key.exec(replacement_field)) !== null) {
            field_list.push(field_match[1]);
            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
              if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              } else {
                throw new SyntaxError("[sprintf] failed to parse named argument key");
              }
            }
          } else {
            throw new SyntaxError("[sprintf] failed to parse named argument key");
          }
          match[2] = field_list;
        } else {
          arg_names |= 2;
        }
        if (arg_names === 3) {
          throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
        }
        parse_tree.push(
          {
            placeholder: match[0],
            param_no: match[1],
            keys: match[2],
            sign: match[3],
            pad_char: match[4],
            align: match[5],
            width: match[6],
            precision: match[7],
            type: match[8]
          }
        );
      } else {
        throw new SyntaxError("[sprintf] unexpected placeholder");
      }
      _fmt = _fmt.substring(match[0].length);
    }
    return sprintf_cache[fmt] = parse_tree;
  }
  var sprintf = (key) => sprintf_format(sprintf_parse(key), arguments);
  var vsprintf = (fmt, argv) => sprintf.apply(null, [fmt].concat(argv || []));
  var includes = (s2, sub2, pos) => toStr(s2).includes(sub2, pos);
  var split = (str3, sep = void 0, limit = void 0, trim2 = true) => {
    return toStr(str3).split(sep, limit).map((el) => trim2 ? el.trim() : el).filter((el) => trim2 ? !isEmpty(el) : true);
  };
  var strip = (str3, what = null, replace = "") => {
    let _str = toStr(str3);
    let regexp;
    if (!what) return _str;
    regexp = new RegExp(what, "g");
    return _str.replace(regexp, replace);
  };
  var wrapTag = (s2, tag = "div") => `<${tag}>${toStr(s2)}</${tag}>`;
  var wrap = (s2, before = "", after = "") => before + toStr(s2) + after;
  var isString = (s2) => typeof s2 === "string";
  var matches = (s2, pattern, flags = "") => {
    let _s = toStr(s2);
    let patternStr;
    if (!(pattern instanceof RegExp)) {
      patternStr = pattern ? trim(toStr(pattern)) : "";
      if (!patternStr) {
        return false;
      }
      pattern = new RegExp(patternStr, flags);
    }
    return pattern.test(_s);
  };
  var append = (s2, what = "", times = 1) => toStr(s2) + repeat(what, times);
  var prepend = (s2, what = "", times = 1) => repeat(what, times) + toStr(s2);
  var stripBoom = (s2) => {
    let _s = toStr(s2);
    if (_s === "") return _s;
    return _s[0] === BYTE_ORDER_MARK ? _s.substring(1) : _s;
  };
  var shorten = (v2, l2 = 5, d2 = "...") => !v2 ? v2 : `${v2.substring(0, l2)}${d2}${v2.substring(v2.length - l2)}`;
  var f = {
    camelCase,
    capitalize,
    chars: chars$1,
    count,
    countChars,
    countUniqueChars,
    countSubstr,
    countWords,
    countUniqueWords,
    dashedName,
    decapitalize,
    kebab,
    lower,
    reverse,
    shuffle,
    snake,
    swap,
    title,
    upper,
    words,
    wrap,
    wrapTag,
    escapeHtml,
    unescapeHtml,
    unique,
    uniqueWords,
    substring,
    first,
    last,
    truncate,
    truncateWithAlign,
    slice,
    prune,
    repeat,
    pad,
    lpad: lpad2,
    rpad,
    insert,
    trim,
    ltrim,
    rtrim,
    endsWith,
    isAlpha,
    isAlphaDigit,
    isDigit,
    isBlank,
    isEmpty,
    isLower,
    isUpper,
    startsWith,
    stripTags,
    stripTagsAll,
    sprintf,
    vsprintf,
    includes,
    split,
    strip,
    isString,
    matches,
    append,
    prepend,
    stripBoom,
    shorten
  };
  var Str2 = class {
    constructor(v2 = "", { mutable = true } = {}) {
      this.value = v2.toString();
      this.mutable = mutable;
    }
    [Symbol.toPrimitive](hint) {
      if (hint === "number") {
        return +this.value;
      }
      return this.value;
    }
    get [Symbol.toStringTag]() {
      return "Str";
    }
    val(v2) {
      if (typeof v2 === "undefined" || v2 === null) return this.value;
      this.value = v2.toString();
      return this;
    }
    get length() {
      return this.value.length;
    }
    immutable(state2 = true) {
      this.mutable = !state2;
    }
    toString() {
      return this.value;
    }
    _result(v2) {
      if (!this.mutable) {
        return str2(v2);
      }
      this.value = v2;
      return this;
    }
    camelCase() {
      return this._result(f.camelCase(this.value));
    }
    capitalize(strong2) {
      return this._result(f.capitalize(this.value, strong2));
    }
    chars(ignore) {
      return this._result(f.chars(this.value, ignore));
    }
    count() {
      return f.count(this.value);
    }
    countChars(ignore) {
      return f.countChars(this.value, ignore);
    }
    countUniqueChars(ignore) {
      return f.countUniqueChars(this.value, ignore);
    }
    countSubstr(sub2) {
      return f.countSubstr(this.value, sub2);
    }
    countWords(pattern, flags) {
      return f.countChars(this.value, pattern, flags);
    }
    countUniqueWords(pattern, flags) {
      return f.countUniqueChars(this.value, pattern, flags);
    }
    dashedName() {
      return this._result(f.dashedName(this.value));
    }
    decapitalize() {
      return this._result(f.decapitalize(this.value));
    }
    endsWith(str3, pos) {
      return f.endsWith(this.value, str3, pos);
    }
    escapeHtml() {
      return this._result(f.escapeHtml(this.value));
    }
    first() {
      return this._result(f.first(this.value));
    }
    includes(sub2, pos) {
      return f.includes(this.value, sub2, pos);
    }
    insert(str3, pos) {
      return this._result(f.insert(this.value, str3, pos));
    }
    isAlpha() {
      return f.isAlpha(this.value);
    }
    isAlphaDigit() {
      return f.isAlphaDigit(this.value);
    }
    isBlank(strong2) {
      return f.isBlank(this.value, strong2);
    }
    isDigit() {
      return f.isDigit(this.value);
    }
    isEmpty() {
      return f.isEmpty(this.value);
    }
    isLower() {
      return f.isLower(this.value);
    }
    static isString(v2) {
      return f.isString(v2);
    }
    isUpper() {
      return f.isUpper(this.value);
    }
    kebab(joinWith) {
      return this._result(f.kebab(this.value, joinWith));
    }
    last(len) {
      return this._result(f.last(this.value, len));
    }
    lower() {
      return this._result(f.lower(this.value));
    }
    matches(pattern, flags) {
      return f.matches(this.value, pattern, flags);
    }
    pad(pad2, len) {
      return this._result(f.pad(this.value, pad2, len));
    }
    lpad(pad2, len) {
      return this._result(f.lpad(this.value, pad2, len));
    }
    rpad(pad2, len) {
      return this._result(f.rpad(this.value, pad2, len));
    }
    prune(len, end) {
      return this._result(f.prune(this.value, len, end));
    }
    repeat(times) {
      return this._result(f.repeat(this.value, times));
    }
    append(str3, times) {
      return this._result(f.append(this.value, str3, times));
    }
    prepend(str3, times) {
      return this._result(f.prepend(this.value, str3, times));
    }
    reverse(ignore) {
      return this._result(f.reverse(this.value, ignore));
    }
    shuffle() {
      return this._result(f.shuffle(this.value));
    }
    slice(parts) {
      return this._result(f.slice(this.value, parts));
    }
    snake() {
      return this._result(f.snake(this.value));
    }
    split(sep, limit, trim2) {
      return this._result(f.split(this.value, sep, limit, trim2));
    }
    sprintf(...args) {
      return this._result(f.sprintf(this.value, ...args));
    }
    vsprintf(...args) {
      return this._result(f.vsprintf(this.value, ...args));
    }
    startsWith(str3, pos) {
      return f.startsWith(this.value, str3, pos);
    }
    stripBoom() {
      return this._result(f.stripBoom(this.value));
    }
    stripTags(allowed) {
      return this._result(f.stripTags(this.value, allowed));
    }
    stripTagsAll() {
      return this._result(f.stripTagsAll(this.value));
    }
    strip(str3, replace) {
      return this._result(f.strip(this.value, str3, replace));
    }
    substring(start, len) {
      return this._result(f.substring(this.value, start, len));
    }
    swap() {
      return this._result(f.swap(this.value));
    }
    title(noSplit, sep) {
      return this._result(f.title(this.value, noSplit, sep));
    }
    trim(ws) {
      return this._result(f.trim(this.value, ws));
    }
    ltrim(ws) {
      return this._result(f.ltrim(this.value, ws));
    }
    rtrim(ws) {
      return this._result(f.rtrim(this.value, ws));
    }
    truncate(len, end) {
      return this._result(f.truncate(this.value, len, end));
    }
    truncateWithAlign(len, end) {
      return this._result(f.truncateWithAlign(this.value, len, end));
    }
    unescapeHtml() {
      return this._result(f.unescapeHtml(this.value));
    }
    unique(ignore) {
      return this._result(f.unique(this.value, ignore));
    }
    uniqueWords(pattern, flags) {
      return this._result(f.uniqueWords(this.value, pattern, flags));
    }
    upper() {
      return this._result(f.upper(this.value));
    }
    words(pattern, flags) {
      return f.words(this.value, pattern, flags);
    }
    wrap(before, after) {
      return this._result(f.wrap(this.value, before, after));
    }
    wrapTag(tag) {
      return this._result(f.wrapTag(this.value, tag));
    }
    shorten(l2, d2) {
      return this._result(f.shorten(this.value, l2, d2));
    }
  };
  Object.assign(Str2, f);
  var str2 = (v2) => new Str2(v2);
  var version2 = "0.5.0";
  var build_time2 = "08.05.2024, 14:20:26";
  var info2 = () => {
    console.info(`%c String %c v${version2} %c ${build_time2} `, "color: #000000; font-weight: bold; background: #fff200", "color: white; background: darkgreen", "color: white; background: #0080fe;");
  };
  Str2.info = info2;

  // source/string/index.js
  globalThis.Str = Str2;
  globalThis.str = str2;

  // node_modules/@olton/dom/dist/dom.js
  var numProps = ["opacity", "zIndex"];
  function nothing() {
    return null;
  }
  function isSimple(v2) {
    return typeof v2 === "string" || typeof v2 === "boolean" || typeof v2 === "number";
  }
  function isVisible(elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  }
  function isHidden(elem) {
    const s2 = getComputedStyle(elem);
    return !isVisible(elem) || +s2.opacity === 0 || elem.hidden || s2.visibility === "hidden";
  }
  function not2(value) {
    return value === void 0 || value === null;
  }
  function camelCase2(string) {
    return string.replace(/-([a-z])/g, function(all, letter) {
      return letter.toUpperCase();
    });
  }
  function isPlainObject(obj) {
    let proto;
    if (!obj || Object.prototype.toString.call(obj) !== "[object Object]") {
      return false;
    }
    proto = obj.prototype !== void 0;
    if (!proto) {
      return true;
    }
    return proto.constructor && typeof proto.constructor === "function";
  }
  function isEmptyObject(obj) {
    for (const name2 in obj) {
      if (hasProp(obj, name2)) return false;
    }
    return true;
  }
  function isArrayLike(o2) {
    return o2 instanceof Object && "length" in o2;
  }
  function str2arr(str3, sep) {
    sep = sep || " ";
    return str3.split(sep).map(function(el) {
      return ("" + el).trim();
    }).filter(function(el) {
      return el !== "";
    });
  }
  function parseUnit(str3, out) {
    if (!out) out = [0, ""];
    str3 = String(str3);
    out[0] = parseFloat(str3);
    out[1] = str3.match(/[\d.\-+]*\s*(.*)/)[1] || "";
    return out;
  }
  function getUnit(val, und) {
    const split2 = /[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn|fr|lh|cqw|cqh|cqi|cqb|cqmin|cqmax|q)?$/.exec(val);
    return typeof split2[1] !== "undefined" ? split2[1] : und;
  }
  function setStyleProp(el, key, val) {
    key = camelCase2(key);
    if (["scrollLeft", "scrollTop"].indexOf(key) > -1) {
      el[key] = parseInt(val);
    } else {
      el.style[key] = isNaN(val) || numProps.indexOf("" + key) > -1 ? val : val + "px";
    }
  }
  function acceptData(owner) {
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  }
  function getData(data2) {
    try {
      return JSON.parse(data2);
    } catch (e) {
      return data2;
    }
  }
  function dataAttr(elem, key, data2) {
    let name2;
    if (not2(data2) && elem.nodeType === 1) {
      name2 = "data-" + key.replace(/[A-Z]/g, "-$&").toLowerCase();
      data2 = elem.getAttribute(name2);
      if (typeof data2 === "string") {
        data2 = getData(data2);
        dataSet.set(elem, key, data2);
      } else {
        data2 = void 0;
      }
    }
    return data2;
  }
  function normName(name2) {
    return typeof name2 !== "string" ? void 0 : name2.replace(/-/g, "").toLowerCase();
  }
  function hasProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  function isLocalhost(host) {
    const hostname = host || globalThis.location.hostname;
    return hostname === "localhost" || hostname === "127.0.0.1" || hostname === "[::1]" || hostname === "" || hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) !== null;
  }
  function isTouch() {
    return "ontouchstart" in window || navigator.maxTouchPoints > 0;
  }
  function isPrivateAddress(host) {
    const hostname = host || globalThis.location.hostname;
    return /(^localhost)|(^127\.)|(^192\.168\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2\d\.)|(^172\.3[0-1]\.)|(^::1$)|(^[fF][cCdD])/.test(hostname);
  }
  var matches2 = Element.prototype.matches;
  var $ = (selector, context) => new $.init(selector, context);
  $.version = "1.0.0";
  $.build_time = "14.01.2025, 11:19:35";
  $.info = () => console.info(`%c M4Q %c v${$.version} %c ${$.build_time} `, "color: white; font-weight: bold; background: #fd6a02", "color: white; background: darkgreen", "color: white; background: #0080fe;");
  $.fn = $.prototype = Object.create(Array.prototype);
  $.prototype.constructor = $;
  $.prototype.uid = "";
  $.extend = $.fn.extend = function() {
    let options, name2, target = arguments[0] || {}, i3 = 1, length = arguments.length;
    if (typeof target !== "object" && typeof target !== "function") {
      target = {};
    }
    if (i3 === length) {
      target = this;
      i3--;
    }
    for (; i3 < length; i3++) {
      if ((options = arguments[i3]) != null) {
        for (name2 in options) {
          if (hasProp(options, name2))
            target[name2] = options[name2];
        }
      }
    }
    return target;
  };
  $.assign = function() {
    let options, name2, target = arguments[0] || {}, i3 = 1, length = arguments.length;
    if (typeof target !== "object" && typeof target !== "function") {
      target = {};
    }
    if (i3 === length) {
      target = this;
      i3--;
    }
    for (; i3 < length; i3++) {
      if ((options = arguments[i3]) != null) {
        for (name2 in options) {
          if (hasProp(options, name2) && options[name2] !== void 0)
            target[name2] = options[name2];
        }
      }
    }
    return target;
  };
  (function(workerScript) {
    try {
      const blob = new Blob([`
            var fakeIdToId = {};
            onmessage = function (event) {
                var data = event.data,
                    name = data.name,
                    fakeId = data.fakeId,
                    time;
                if(data.hasOwnProperty('time')) {
                    time = data.time;
                }
                switch (name) {
                    case 'setInterval':
                        fakeIdToId[fakeId] = setInterval(function () {
                            postMessage({fakeId: fakeId});
                        }, time);
                        break;
                    case 'clearInterval':
                        if (fakeIdToId.hasOwnProperty (fakeId)) {
                            clearInterval(fakeIdToId[fakeId]);
                            delete fakeIdToId[fakeId];
                        }
                        break;
                    case 'setTimeout':
                        fakeIdToId[fakeId] = setTimeout(function () {
                            postMessage({fakeId: fakeId});
                            if (fakeIdToId.hasOwnProperty (fakeId)) {
                                delete fakeIdToId[fakeId];
                            }
                        }, time);
                        break;
                    case 'clearTimeout':
                        if (fakeIdToId.hasOwnProperty (fakeId)) {
                            clearTimeout(fakeIdToId[fakeId]);
                            delete fakeIdToId[fakeId];
                        }
                        break;
                }
            }
        `]);
      workerScript = window.URL.createObjectURL(blob);
    } catch (error) {
    }
    let worker, fakeIdToCallback = {}, lastFakeId = 0, maxFakeId = 2147483647, logPrefix = "";
    function getFakeId() {
      do {
        if (lastFakeId === maxFakeId) {
          lastFakeId = 0;
        } else {
          lastFakeId++;
        }
      } while (fakeIdToCallback.hasOwnProperty(lastFakeId));
      return lastFakeId;
    }
    if (typeof Worker === "undefined") {
      return;
    }
    try {
      worker = new Worker(workerScript);
      window.setInterval = function(callback, time2) {
        const fakeId = getFakeId();
        fakeIdToCallback[fakeId] = {
          callback,
          parameters: Array.prototype.slice.call(arguments, 2)
        };
        worker.postMessage({
          name: "setInterval",
          fakeId,
          time: time2
        });
        return fakeId;
      };
      window.clearInterval = function(fakeId) {
        if (fakeIdToCallback.hasOwnProperty(fakeId)) {
          delete fakeIdToCallback[fakeId];
          worker.postMessage({
            name: "clearInterval",
            fakeId
          });
        }
      };
      window.setTimeout = function(callback, time2) {
        const fakeId = getFakeId();
        fakeIdToCallback[fakeId] = {
          callback,
          parameters: Array.prototype.slice.call(arguments, 2),
          isTimeout: true
        };
        worker.postMessage({
          name: "setTimeout",
          fakeId,
          time: time2
        });
        return fakeId;
      };
      window.clearTimeout = function(fakeId) {
        if (fakeIdToCallback.hasOwnProperty(fakeId)) {
          delete fakeIdToCallback[fakeId];
          worker.postMessage({
            name: "clearTimeout",
            fakeId
          });
        }
      };
      window.setImmediate = function(callback) {
        return setTimeout(callback, 0);
      };
      window.clearImmediate = function(fakeId) {
        clearTimeout(fakeId);
      };
      worker.onmessage = function(event) {
        let data2 = event.data, fakeId = data2.fakeId, request, parameters, callback;
        if (fakeIdToCallback.hasOwnProperty(fakeId)) {
          request = fakeIdToCallback[fakeId];
          callback = request.callback;
          parameters = request.parameters;
          if (request.hasOwnProperty("isTimeout") && request.isTimeout) {
            delete fakeIdToCallback[fakeId];
          }
        }
        if (typeof callback === "string") {
          try {
            callback = new Function(callback);
          } catch (error) {
            console.error(logPrefix + "Error parsing callback code string: ", error);
          }
        }
        if (typeof callback === "function") {
          callback.apply(window, parameters);
        }
      };
      worker.onerror = function(event) {
        console.error(event);
      };
    } catch (error) {
      console.log(`Can't create worker for Intervals, use standard functions.`);
    }
  })();
  $.fn.extend({
    index: function(sel) {
      let el, _index = -1;
      if (this.length === 0) {
        return _index;
      }
      if (not2(sel)) {
        el = this[0];
      } else if (sel instanceof $ && sel.length > 0) {
        el = sel[0];
      } else if (typeof sel === "string") {
        el = $(sel)[0];
      } else {
        el = void 0;
      }
      if (not2(el)) {
        return _index;
      }
      if (el && el.parentNode) $.each(el.parentNode.children, function(i3) {
        if (this === el) {
          _index = i3;
        }
      });
      return _index;
    },
    indexOf: function(sel) {
      let el, _index = -1;
      if (this.length === 0) {
        return _index;
      }
      if (not2(sel)) {
        el = this[0];
      } else if (sel instanceof $ && sel.length > 0) {
        el = sel[0];
      } else if (typeof sel === "string") {
        el = $(sel)[0];
      } else {
        el = void 0;
      }
      if (not2(el)) {
        return _index;
      }
      this.each(function(i3) {
        if (this === el) {
          _index = i3;
        }
      });
      return _index;
    },
    get: function(i3) {
      if (i3 === void 0) {
        return this.items();
      }
      return i3 < 0 ? this[i3 + this.length] : this[i3];
    },
    eq: function(i3) {
      return !not2(i3) && this.length > 0 ? $.extend($(this.get(i3)), { _prevObj: this }) : this;
    },
    is: function(s2) {
      let result = false;
      if (this.length === 0) {
        return false;
      }
      if (s2 instanceof $) {
        return this.same(s2);
      }
      if (s2 === ":selected") {
        this.each(function() {
          if (this.selected) result = true;
        });
      } else if (s2 === ":checked") {
        this.each(function() {
          if (this.checked) result = true;
        });
      } else if (s2 === ":visible") {
        this.each(function() {
          if (isVisible(this)) result = true;
        });
      } else if (s2 === ":hidden") {
        this.each(function() {
          const styles = getComputedStyle(this);
          if (this.getAttribute("type") === "hidden" || this.hidden || styles.display === "none" || styles.visibility === "hidden" || parseInt(styles.opacity) === 0) result = true;
        });
      } else if (typeof s2 === "string" && [":selected"].indexOf(s2) === -1) {
        this.each(function() {
          if (matches2.call(this, s2)) {
            result = true;
          }
        });
      } else if (isArrayLike(s2)) {
        this.each(function() {
          const el = this;
          $.each(s2, function() {
            const sel = this;
            if (el === sel) {
              result = true;
            }
          });
        });
      } else if (typeof s2 === "object" && s2.nodeType === 1) {
        this.each(function() {
          if (this === s2) {
            result = true;
          }
        });
      }
      return result;
    },
    same: function(o2) {
      let result = true;
      if (!(o2 instanceof $)) {
        o2 = $(o2);
      }
      if (this.length !== o2.length) return false;
      this.each(function() {
        if (o2.items().indexOf(this) === -1) {
          result = false;
        }
      });
      return result;
    },
    last: function() {
      return this.eq(this.length - 1);
    },
    first: function() {
      return this.eq(0);
    },
    odd: function() {
      const result = this.filter(function(el, i3) {
        return i3 % 2 === 0;
      });
      return $.extend(result, { _prevObj: this });
    },
    even: function() {
      const result = this.filter(function(el, i3) {
        return i3 % 2 !== 0;
      });
      return $.extend(result, { _prevObj: this });
    },
    filter: function(fn) {
      if (typeof fn === "string") {
        const sel = fn;
        fn = function(el) {
          return matches2.call(el, sel);
        };
      }
      return $.extend($.merge($(), [].filter.call(this, fn)), { _prevObj: this });
    },
    find: function(s2) {
      let res = [], result;
      if (s2 instanceof $) return s2;
      if (this.length === 0) {
        result = this;
      } else {
        this.each(function() {
          const el = this;
          if (typeof el.querySelectorAll === "undefined") {
            return;
          }
          res = res.concat([].slice.call(el.querySelectorAll(s2)));
        });
        result = $.merge($(), res);
      }
      return $.extend(result, { _prevObj: this });
    },
    contains: function(s2) {
      return this.find(s2).length > 0;
    },
    children: function(s2) {
      let i3, res = [];
      if (s2 instanceof $) return s2;
      this.each(function() {
        const el = this;
        for (i3 = 0; i3 < el.children.length; i3++) {
          if (el.children[i3].nodeType === 1)
            res.push(el.children[i3]);
        }
      });
      res = s2 ? res.filter(function(el) {
        return matches2.call(el, s2);
      }) : res;
      return $.extend($.merge($(), res), { _prevObj: this });
    },
    parent: function(s2) {
      let res = [];
      if (this.length === 0) {
        return;
      }
      if (s2 instanceof $) return s2;
      this.each(function() {
        if (this.parentNode) {
          if (res.indexOf(this.parentNode) === -1) res.push(this.parentNode);
        }
      });
      res = s2 ? res.filter(function(el) {
        return matches2.call(el, s2);
      }) : res;
      return $.extend($.merge($(), res), { _prevObj: this });
    },
    parents: function(s2) {
      let res = [];
      if (this.length === 0) {
        return;
      }
      if (s2 instanceof $) return s2;
      this.each(function() {
        let par = this.parentNode;
        while (par) {
          if (par.nodeType === 1 && res.indexOf(par) === -1) {
            if (!not2(s2)) {
              if (matches2.call(par, s2)) {
                res.push(par);
              }
            } else {
              res.push(par);
            }
          }
          par = par.parentNode;
        }
      });
      return $.extend($.merge($(), res), { _prevObj: this });
    },
    siblings: function(s2) {
      let res = [];
      if (this.length === 0) {
        return;
      }
      if (s2 instanceof $) return s2;
      this.each(function() {
        const el = this;
        if (el.parentNode) {
          $.each(el.parentNode.children, function() {
            if (el !== this) res.push(this);
          });
        }
      });
      if (s2) {
        res = res.filter(function(el) {
          return matches2.call(el, s2);
        });
      }
      return $.extend($.merge($(), res), { _prevObj: this });
    },
    _siblingAll: function(dir, s2) {
      let res = [];
      if (this.length === 0) {
        return;
      }
      if (s2 instanceof $) return s2;
      this.each(function() {
        let el = this;
        while (el) {
          el = el[dir];
          if (!el) break;
          res.push(el);
        }
      });
      if (s2) {
        res = res.filter(function(el) {
          return matches2.call(el, s2);
        });
      }
      return $.extend($.merge($(), res), { _prevObj: this });
    },
    _sibling: function(dir, s2) {
      let res = [];
      if (this.length === 0) {
        return;
      }
      if (s2 instanceof $) return s2;
      this.each(function() {
        const el = this[dir];
        if (el && el.nodeType === 1) {
          res.push(el);
        }
      });
      if (s2) {
        res = res.filter(function(el) {
          return matches2.call(el, s2);
        });
      }
      return $.extend($.merge($(), res), { _prevObj: this });
    },
    prev: function(s2) {
      return this._sibling("previousElementSibling", s2);
    },
    next: function(s2) {
      return this._sibling("nextElementSibling", s2);
    },
    prevAll: function(s2) {
      return this._siblingAll("previousElementSibling", s2);
    },
    nextAll: function(s2) {
      return this._siblingAll("nextElementSibling", s2);
    },
    closest: function(s2) {
      let res = [];
      if (this.length === 0) {
        return;
      }
      if (s2 instanceof $) return s2;
      if (!s2) {
        return this.parent(s2);
      }
      this.each(function() {
        let el = this;
        while (el) {
          if (!el) break;
          if (matches2.call(el, s2)) {
            res.push(el);
            return;
          }
          el = el.parentElement;
        }
      });
      return $.extend($.merge($(), res.reverse()), { _prevObj: this });
    },
    has: function(selector) {
      let res = [];
      if (this.length === 0) {
        return;
      }
      this.each(function() {
        const el = $(this);
        const child = el.children(selector);
        if (child.length > 0) {
          res.push(this);
        }
      });
      return $.extend($.merge($(), res), { _prevObj: this });
    },
    back: function(to_start) {
      let ret;
      if (to_start === true) {
        ret = this._prevObj;
        while (ret) {
          if (!ret._prevObj) break;
          ret = ret._prevObj;
        }
      } else {
        ret = this._prevObj ? this._prevObj : this;
      }
      return ret;
    }
  });
  function createScript(script2, into = document.body) {
    const s2 = document.createElement("script");
    s2.type = "text/javascript";
    if (not2(script2)) return $(s2);
    const _script = $(script2)[0];
    if (_script.src) {
      s2.src = _script.src;
    } else {
      s2.textContent = _script.innerText;
    }
    if (_script.type) s2.type = _script.type;
    if (_script.async) s2.async = _script.async;
    into.appendChild(s2);
    if (_script.parentNode) _script.parentNode.removeChild(_script);
    return s2;
  }
  $.extend({
    script: function(el, into) {
      if (not2(el)) {
        return;
      }
      if (el instanceof $) {
        el = el[0];
      }
      if (el.tagName && el.tagName === "SCRIPT") {
        createScript(el, into);
      } else {
        const scripts = $(el).find("script");
        $.each(scripts, function() {
          createScript(this, into);
        });
      }
    }
  });
  $.fn.extend({
    script: function() {
      return this.each(function() {
        $.script(this);
      });
    }
  });
  $.fn.extend({
    _prop: function(prop, value) {
      if (arguments.length === 1) {
        return this.length === 0 ? void 0 : this[0][prop];
      }
      if (not2(value)) {
        value = "";
      }
      return this.each(function() {
        const el = this;
        el[prop] = value;
        if (prop === "innerHTML") {
          $.script(el, el);
        }
      });
    },
    prop: function(prop, value) {
      return arguments.length === 1 ? this._prop(prop) : this._prop(prop, typeof value === "undefined" ? "" : value);
    },
    val: function(value) {
      if (not2(value)) {
        return this.length === 0 ? void 0 : this[0].value;
      }
      return this.each(function() {
        const el = $(this);
        if (typeof this.value !== "undefined") {
          this.value = value;
        } else {
          el.html(value);
        }
      });
    },
    html: function(value) {
      const that = this, v2 = [];
      if (arguments.length === 0) {
        return this._prop("innerHTML");
      }
      if (value instanceof $) {
        value.each(function() {
          v2.push($(this).outerHTML());
        });
      } else {
        v2.push(value);
      }
      that._prop("innerHTML", v2.join("\n"));
      return this;
    },
    outerHTML: function() {
      return this._prop("outerHTML");
    },
    text: function(value) {
      return arguments.length === 0 ? this._prop("textContent") : this._prop("textContent", typeof value === "undefined" ? "" : value);
    },
    innerText: function(value) {
      return arguments.length === 0 ? this._prop("innerText") : this._prop("innerText", typeof value === "undefined" ? "" : value);
    },
    empty: function() {
      return this.each(function() {
        if (typeof this.innerHTML !== "undefined") this.innerHTML = "";
      });
    },
    clear: function() {
      return this.empty();
    }
  });
  $.each = function(ctx, cb) {
    let index = 0;
    if (isArrayLike(ctx)) {
      [].forEach.call(ctx, function(val, key) {
        cb.apply(val, [key, val]);
      });
    } else {
      for (const key in ctx) {
        if (hasProp(ctx, key))
          cb.apply(ctx[key], [key, ctx[key], index++]);
      }
    }
    return ctx;
  };
  $.fn.extend({
    each: function(cb) {
      return $.each(this, cb);
    }
  });
  var Data = function(ns) {
    this.expando = "DATASET:UID:" + ns.toUpperCase();
    Data.uid++;
  };
  Data.uid = -1;
  Data.prototype = {
    cache: function(owner) {
      let value = owner[this.expando];
      if (!value) {
        value = {};
        if (acceptData(owner)) {
          if (owner.nodeType) {
            owner[this.expando] = value;
          } else {
            Object.defineProperty(owner, this.expando, {
              value,
              configurable: true
            });
          }
        }
      }
      return value;
    },
    set: function(owner, data2, value) {
      let prop, cache = this.cache(owner);
      if (typeof data2 === "string") {
        cache[camelCase2(data2)] = value;
      } else {
        for (prop in data2) {
          if (hasProp(data2, prop))
            cache[camelCase2(prop)] = data2[prop];
        }
      }
      return cache;
    },
    get: function(owner, key) {
      return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase2(key)];
    },
    access: function(owner, key, value) {
      if (key === void 0 || key && typeof key === "string" && value === void 0) {
        return this.get(owner, key);
      }
      this.set(owner, key, value);
      return value !== void 0 ? value : key;
    },
    remove: function(owner, key) {
      let i3, cache = owner[this.expando];
      if (cache === void 0) {
        return;
      }
      if (key !== void 0) {
        if (Array.isArray(key)) {
          key = key.map(camelCase2);
        } else {
          key = camelCase2(key);
          key = key in cache ? [key] : key.match(/[^\x20\t\r\n\f]+/g) || [];
        }
        i3 = key.length;
        while (i3--) {
          delete cache[key[i3]];
        }
      }
      if (key === void 0 || isEmptyObject(cache)) {
        if (owner.nodeType) {
          owner[this.expando] = void 0;
        } else {
          delete owner[this.expando];
        }
      }
      return true;
    },
    hasData: function(owner) {
      const cache = owner[this.expando];
      return cache !== void 0 && !isEmptyObject(cache);
    }
  };
  var dataSet = new Data("m4q");
  $.extend({
    hasData: function(elem) {
      return dataSet.hasData(elem);
    },
    data: function(elem, key, val) {
      return dataSet.access(elem, key, val);
    },
    removeData: function(elem, key) {
      return dataSet.remove(elem, key);
    },
    dataSet: function(ns) {
      if (not2(ns)) return dataSet;
      if (["INTERNAL", "M4Q"].indexOf(ns.toUpperCase()) > -1) {
        throw Error("You can not use reserved name for your dataset");
      }
      return new Data(ns);
    }
  });
  $.fn.extend({
    data: function(key, val) {
      let res, elem, data2, attrs, name2, i3;
      if (this.length === 0) {
        return;
      }
      elem = this[0];
      if (arguments.length === 0) {
        if (this.length) {
          data2 = dataSet.get(elem);
          if (elem.nodeType === 1) {
            attrs = elem.attributes;
            i3 = attrs.length;
            while (i3--) {
              if (attrs[i3]) {
                name2 = attrs[i3].name;
                if (name2.indexOf("data-") === 0) {
                  name2 = camelCase2(name2.slice(5));
                  dataAttr(elem, name2, data2[name2]);
                }
              }
            }
          }
        }
        return data2;
      }
      if (arguments.length === 1) {
        res = dataSet.get(elem, key);
        if (res === void 0) {
          if (elem.nodeType === 1) {
            if (elem.hasAttribute("data-" + key)) {
              res = elem.getAttribute("data-" + key);
            }
          }
        }
        return res;
      }
      return this.each(function() {
        dataSet.set(this, key, val);
      });
    },
    removeData: function(key) {
      return this.each(function() {
        dataSet.remove(this, key);
      });
    },
    origin: function(name2, value, def) {
      if (this.length === 0) {
        return this;
      }
      if (not2(name2) && not2(value)) {
        return $.data(this[0]);
      }
      if (not2(value)) {
        const res = $.data(this[0], "origin-" + name2);
        return !not2(res) ? res : def;
      }
      this.data("origin-" + name2, value);
      return this;
    }
  });
  $.extend({
    device: /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()),
    localhost: isLocalhost(),
    isLocalhost,
    touchable: isTouch(),
    isPrivateAddress,
    uniqueId: function(prefix) {
      let d2 = (/* @__PURE__ */ new Date()).getTime();
      if (not2(prefix)) {
        prefix = "m4q";
      }
      return (prefix !== "" ? prefix + "-" : "") + "xxxx-xxxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        const r = (d2 + Math.random() * 16) % 16 | 0;
        d2 = Math.floor(d2 / 16);
        return (c === "x" ? r : r & 3 | 8).toString(16);
      });
    },
    toArray: function(n2) {
      let i3, out = [];
      for (i3 = 0; i3 < n2.length; i3++) {
        out.push(n2[i3]);
      }
      return out;
    },
    import: function(ctx) {
      const res = [];
      this.each(ctx, function() {
        res.push(this);
      });
      return this.merge($(), res);
    },
    merge: function(first2, second) {
      let len = +second.length, j2 = 0, i3 = first2.length;
      for (; j2 < len; j2++) {
        first2[i3++] = second[j2];
      }
      first2.length = i3;
      return first2;
    },
    type: function(obj) {
      return Object.prototype.toString.call(obj).replace(/^\[object (.+)]$/, "$1").toLowerCase();
    },
    sleep: function(ms) {
      ms += (/* @__PURE__ */ new Date()).getTime();
      while (/* @__PURE__ */ new Date() < ms) {
      }
    },
    isSelector: function(selector) {
      if (typeof selector !== "string") {
        return false;
      }
      try {
        document.querySelector(selector);
        return true;
      } catch (error) {
        return false;
      }
    },
    remove: function(s2) {
      return $(s2).remove();
    },
    isPlainObject,
    isEmptyObject,
    isArrayLike,
    acceptData,
    not: not2,
    parseUnit,
    getUnit,
    unit: parseUnit,
    isVisible,
    isHidden,
    matches: function(el, s2) {
      return matches2.call(el, s2);
    },
    random: function(from, to) {
      if (arguments.length === 1 && isArrayLike(from)) {
        return from[Math.floor(Math.random() * from.length)];
      }
      return Math.floor(Math.random() * (to - from + 1) + from);
    },
    hasProp,
    dark: globalThis.matchMedia && globalThis.matchMedia("(prefers-color-scheme: dark)").matches,
    serializeToArray: function(form2) {
      const _form = $(form2)[0];
      if (!_form || _form.nodeName !== "FORM") {
        console.warn("Element is not a HTMLFromElement");
        return;
      }
      let i3, j2, q3 = [];
      for (i3 = _form.elements.length - 1; i3 >= 0; i3 = i3 - 1) {
        if (_form.elements[i3].name === "") {
          continue;
        }
        switch (_form.elements[i3].nodeName) {
          case "INPUT":
            switch (_form.elements[i3].type) {
              case "checkbox":
              case "radio":
                if (_form.elements[i3].checked) {
                  q3.push(_form.elements[i3].name + "=" + encodeURIComponent(_form.elements[i3].value));
                }
                break;
              case "file":
                break;
              default:
                q3.push(_form.elements[i3].name + "=" + encodeURIComponent(_form.elements[i3].value));
            }
            break;
          case "TEXTAREA":
            q3.push(_form.elements[i3].name + "=" + encodeURIComponent(_form.elements[i3].value));
            break;
          case "SELECT":
            switch (_form.elements[i3].type) {
              case "select-one":
                q3.push(_form.elements[i3].name + "=" + encodeURIComponent(_form.elements[i3].value));
                break;
              case "select-multiple":
                for (j2 = _form.elements[i3].options.length - 1; j2 >= 0; j2 = j2 - 1) {
                  if (_form.elements[i3].options[j2].selected) {
                    q3.push(_form.elements[i3].name + "=" + encodeURIComponent(_form.elements[i3].options[j2].value));
                  }
                }
                break;
            }
            break;
          case "BUTTON":
            switch (_form.elements[i3].type) {
              case "reset":
              case "submit":
              case "button":
                q3.push(_form.elements[i3].name + "=" + encodeURIComponent(_form.elements[i3].value));
                break;
            }
            break;
        }
      }
      return q3;
    },
    serialize: function(form2) {
      return $.serializeToArray(form2).join("&");
    },
    viewport: function() {
      const w2 = window, d2 = document, e = d2.documentElement, g2 = d2.getElementsByTagName("body")[0], x2 = w2.innerWidth || e.clientWidth || g2.clientWidth, y2 = w2.innerHeight || e.clientHeight || g2.clientHeight;
      return { width: x2, height: y2 };
    }
  });
  $.fn.extend({
    items: function() {
      return $.toArray(this);
    }
  });
  var overriddenStop = Event.prototype.stopPropagation;
  var overriddenPrevent = Event.prototype.preventDefault;
  Event.prototype.stopPropagation = function() {
    this.isPropagationStopped = true;
    overriddenStop.apply(this, arguments);
  };
  Event.prototype.preventDefault = function() {
    this.isPreventedDefault = true;
    overriddenPrevent.apply(this, arguments);
  };
  Event.prototype.stop = function(immediate) {
    return immediate ? this.stopImmediatePropagation() : this.stopPropagation();
  };
  $.extend({
    events: [],
    eventHooks: {},
    eventUID: -1,
    /*
    * el, eventName, handler, selector, ns, id, options
    * */
    setEventHandler: function(obj) {
      let i3, freeIndex = -1, eventObj, resultIndex;
      if (this.events.length > 0) {
        for (i3 = 0; i3 < this.events.length; i3++) {
          if (this.events[i3].handler === null) {
            freeIndex = i3;
            break;
          }
        }
      }
      eventObj = {
        element: obj.el,
        event: obj.event,
        handler: obj.handler,
        selector: obj.selector,
        ns: obj.ns,
        id: obj.id,
        options: obj.options
      };
      if (freeIndex === -1) {
        this.events.push(eventObj);
        resultIndex = this.events.length - 1;
      } else {
        this.events[freeIndex] = eventObj;
        resultIndex = freeIndex;
      }
      return resultIndex;
    },
    getEventHandler: function(index) {
      if (this.events[index] !== void 0 && this.events[index] !== null) {
        this.events[index] = null;
        return this.events[index].handler;
      }
      return void 0;
    },
    off: function() {
      $.each(this.events, function() {
        this.element.removeEventListener(this.event, this.handler, true);
      });
      this.events = [];
      return this;
    },
    getEvents: function() {
      return this.events;
    },
    getEventHooks: function() {
      return this.eventHooks;
    },
    addEventHook: function(event, handler, type) {
      if (not2(type)) {
        type = "before";
      }
      $.each(str2arr(event), function() {
        this.eventHooks[camelCase2(type + "-" + this)] = handler;
      });
      return this;
    },
    removeEventHook: function(event, type) {
      if (not2(type)) {
        type = "before";
      }
      $.each(str2arr(event), function() {
        delete this.eventHooks[camelCase2(type + "-" + this)];
      });
      return this;
    },
    removeEventHooks: function(event) {
      const that = this;
      if (not2(event)) {
        this.eventHooks = {};
      } else {
        $.each(str2arr(event), function() {
          delete that.eventHooks[camelCase2("before-" + this)];
          delete that.eventHooks[camelCase2("after-" + this)];
        });
      }
      return this;
    }
  });
  $.fn.extend({
    on: function(eventsList2, sel, handler, options) {
      if (this.length === 0) {
        return;
      }
      if (typeof sel === "function") {
        options = handler;
        handler = sel;
        sel = void 0;
      }
      if (!isPlainObject(options)) {
        options = {};
      }
      return this.each(function() {
        const el = this;
        $.each(str2arr(eventsList2), function() {
          let h7, ev = this, event = ev.split("."), name2 = normName(event[0]), ns = options.ns ? options.ns : event[1], index, originEvent;
          $.eventUID++;
          h7 = function(e) {
            let target = e.target;
            const beforeHook = $.eventHooks[camelCase2("before-" + name2)];
            const afterHook = $.eventHooks[camelCase2("after-" + name2)];
            if (typeof beforeHook === "function") {
              beforeHook.call(target, e);
            }
            if (!sel) {
              handler.call(el, e);
            } else {
              while (target && target !== el) {
                if (matches2.call(target, sel)) {
                  handler.call(target, e);
                  if (e.isPropagationStopped) {
                    e.stopImmediatePropagation();
                    break;
                  }
                }
                target = target.parentNode;
              }
            }
            if (typeof afterHook === "function") {
              afterHook.call(target, e);
            }
            if (options.once) {
              index = +$(el).origin("event-" + e.type + (sel ? ":" + sel : "") + (ns ? ":" + ns : ""));
              if (!isNaN(index)) $.events.splice(index, 1);
            }
          };
          Object.defineProperty(h7, "name", {
            value: handler.name && handler.name !== "" ? handler.name : "func_event_" + name2 + "_" + $.eventUID
          });
          originEvent = name2 + (sel ? ":" + sel : "") + (ns ? ":" + ns : "");
          el.addEventListener(name2, h7, !isEmptyObject(options) ? options : false);
          index = $.setEventHandler({
            el,
            event: name2,
            handler: h7,
            selector: sel,
            ns,
            id: $.eventUID,
            options: !isEmptyObject(options) ? options : false
          });
          $(el).origin("event-" + originEvent, index);
        });
      });
    },
    one: function(events, sel, handler, options) {
      if (!isPlainObject(options)) {
        options = {};
      }
      options.once = true;
      return this.on.apply(this, [events, sel, handler, options]);
    },
    off: function(eventsList2, sel, options) {
      if (isPlainObject(sel)) {
        options = sel;
        sel = null;
      }
      if (!isPlainObject(options)) {
        options = {};
      }
      if (not2(eventsList2) || eventsList2.toLowerCase() === "all") {
        return this.each(function() {
          const el = this;
          $.each($.events, function() {
            const e = this;
            if (e.element === el) {
              el.removeEventListener(e.event, e.handler, e.options);
              e.handler = null;
              $(el).origin("event-" + name + (e.selector ? ":" + e.selector : "") + (e.ns ? ":" + e.ns : ""), null);
            }
          });
        });
      }
      return this.each(function() {
        const el = this;
        $.each(str2arr(eventsList2), function() {
          let evMap = this.split("."), name2 = normName(evMap[0]), ns = options.ns ? options.ns : evMap[1], originEvent, index;
          originEvent = "event-" + name2 + (sel ? ":" + sel : "") + (ns ? ":" + ns : "");
          index = $(el).origin(originEvent);
          if (index !== void 0 && $.events[index].handler) {
            el.removeEventListener(name2, $.events[index].handler, $.events[index].options);
            $.events[index].handler = null;
          }
          $(el).origin(originEvent, null);
        });
      });
    },
    trigger: function(name2, data2) {
      return this.fire(name2, data2);
    },
    fire: function(name2, data2) {
      let _name, e;
      if (this.length === 0) {
        return;
      }
      _name = normName(name2);
      if (["focus", "blur"].indexOf(_name) > -1) {
        this[0][_name]();
        return this;
      }
      e = new CustomEvent(_name, {
        bubbles: true,
        cancelable: true,
        detail: data2
      });
      return this.each(function() {
        this.dispatchEvent(e);
      });
    }
  });
  "blur focus resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu touchstart touchend touchmove touchcancel".split(" ").forEach(
    function(name2) {
      $.fn[name2] = function(sel, fn, opt2) {
        return arguments.length > 0 ? this.on(name2, sel, fn, opt2) : this.fire(name2);
      };
    }
  );
  $.fn.extend({
    hover: function(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  $.ready = function(fn, options) {
    document.addEventListener("DOMContentLoaded", fn, options || false);
  };
  $.load = function(fn) {
    return $(window).on("load", fn);
  };
  $.unload = function(fn) {
    return $(window).on("unload", fn);
  };
  $.fn.extend({
    unload: function(fn) {
      return this.length === 0 || this[0].self !== window ? void 0 : $.unload(fn);
    }
  });
  $.beforeunload = function(fn) {
    if (typeof fn === "string") {
      return $(window).on("beforeunload", function(e) {
        e.returnValue = fn;
        return fn;
      });
    } else {
      return $(window).on("beforeunload", fn);
    }
  };
  $.fn.extend({
    beforeunload: function(fn) {
      return this.length === 0 || this[0].self !== window ? void 0 : $.beforeunload(fn);
    }
  });
  $.fn.extend({
    ready: function(fn) {
      if (this.length && this[0] === document && typeof fn === "function") {
        return $.ready(fn);
      }
    }
  });
  $.ajax = function(p3) {
    return new Promise(function(resolve, reject) {
      const xhr = new XMLHttpRequest();
      let method = (p3.method || "GET").toUpperCase();
      const headers = [];
      const async = not2(p3.async) ? true : p3.async;
      let url = p3.url;
      let data2;
      const exec = function(fn, params) {
        if (typeof fn === "function") {
          fn.apply(null, params);
        }
      };
      const isGet = function(method2) {
        return ["GET", "JSON"].indexOf(method2) !== -1;
      };
      const plainObjectToData = function(obj) {
        const _data = [];
        $.each(obj, function(k2, v2) {
          const _v = isSimple(v2) ? v2 : JSON.stringify(v2);
          _data.push(k2 + "=" + _v);
        });
        return _data.join("&");
      };
      if (p3.data instanceof HTMLFormElement) {
        let _action = p3.data.getAttribute("action").trim();
        let _method = p3.data.getAttribute("method").trim();
        if (not2(url) && _action) {
          url = _action;
        }
        if (_method) {
          method = _method.toUpperCase();
        }
      }
      if (p3.timeout) {
        xhr.timeout = p3.timeout;
      }
      if (p3.withCredentials) {
        xhr.withCredentials = p3.withCredentials;
      }
      if (p3.data instanceof HTMLFormElement) {
        data2 = $.serialize(p3.data);
      } else if (p3.data instanceof HTMLElement && p3.data.getAttribute("type") && p3.data.getAttribute("type").toLowerCase() === "file") {
        const _name = p3.data.getAttribute("name");
        data2 = new FormData();
        for (let i3 = 0; i3 < p3.data.files.length; i3++) {
          data2.append(_name, p3.data.files[i3]);
        }
      } else if (isPlainObject(p3.data)) {
        data2 = plainObjectToData(p3.data);
      } else if (p3.data instanceof FormData) {
        data2 = p3.data;
      } else if (typeof p3.data === "string") {
        data2 = p3.data;
      } else {
        data2 = new FormData();
        data2.append("_data", JSON.stringify(p3.data));
      }
      if (isGet(method)) {
        url += typeof data2 === "string" ? "?" + data2 : isEmptyObject(data2) ? "" : "?" + JSON.stringify(data2);
      }
      xhr.open(method, url, async, p3.user, p3.password);
      if (p3.headers) {
        $.each(p3.headers, function(k2, v2) {
          xhr.setRequestHeader(k2, v2);
          headers.push(k2);
        });
      }
      if (!isGet(method)) {
        if (headers.indexOf("Content-type") === -1 && p3.contentType !== false) {
          xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        }
      }
      xhr.send(data2);
      xhr.addEventListener("load", function(e) {
        if (xhr.readyState === 4 && xhr.status < 300) {
          let _return = p3.returnValue && p3.returnValue === "xhr" ? xhr : xhr.response;
          if (p3.parseJson) {
            try {
              _return = JSON.parse(_return);
            } catch (ex) {
              _return = {};
            }
          }
          exec(resolve, [_return]);
          exec(p3.onSuccess, [e, xhr]);
        } else {
          exec(reject, [xhr]);
          exec(p3.onFail, [e, xhr]);
        }
        exec(p3.onLoad, [e, xhr]);
      });
      $.each(["readystatechange", "error", "timeout", "progress", "loadstart", "loadend", "abort"], function() {
        const ev = camelCase2("on-" + (this === "readystatechange" ? "state" : this));
        xhr.addEventListener(ev, function(e) {
          exec(p3[ev], [e, xhr]);
        });
      });
    });
  };
  ["GET", "POST", "PUT", "PATCH", "DELETE", "JSON"].forEach(function(method) {
    $[method.toLowerCase()] = function(url, data2, options) {
      const _options = {
        method: method === "JSON" ? "GET" : method,
        url,
        data: data2,
        parseJson: method === "JSON"
      };
      return $.ajax($.extend({}, _options, options));
    };
  });
  $.fn.extend({
    load: function(url, data2, options) {
      const that = this;
      if (this.length && this[0].self === window) {
        return $.load(url);
      }
      return $.get(url, data2, options).then(function(data22) {
        that.each(function() {
          this.innerHTML = data22;
        });
      });
    }
  });
  $.fn.extend({
    style: function(name2, pseudo) {
      let el;
      function _getStyle2(el2, prop, pseudo2) {
        return ["scrollLeft", "scrollTop"].indexOf(prop) > -1 ? $(el2)[prop]() : getComputedStyle(el2, pseudo2)[prop];
      }
      if (typeof name2 === "string" && this.length === 0) {
        return void 0;
      }
      if (this.length === 0) {
        return this;
      }
      el = this[0];
      if (not2(name2) || name2 === "all") {
        return getComputedStyle(el, pseudo);
      } else {
        let result = {}, names = name2.split(", ").map(function(el2) {
          return ("" + el2).trim();
        });
        if (names.length === 1) {
          return _getStyle2(el, names[0], pseudo);
        } else {
          $.each(names, function() {
            const prop = this;
            result[this] = _getStyle2(el, prop, pseudo);
          });
          return result;
        }
      }
    },
    removeStyleProperty: function(name2) {
      if (not2(name2) || this.length === 0) return this;
      const names = name2.split(", ").map(function(el) {
        return ("" + el).trim();
      });
      return this.each(function() {
        const el = this;
        $.each(names, function() {
          el.style.removeProperty(this);
        });
      });
    },
    css: function(key, val) {
      key = key || "all";
      if (typeof key === "string" && not2(val)) {
        return this.style(key);
      }
      return this.each(function() {
        const el = this;
        if (typeof key === "object") {
          $.each(key, function(key2, val2) {
            setStyleProp(el, key2, val2);
          });
        } else if (typeof key === "string") {
          setStyleProp(el, key, val);
        }
      });
    },
    scrollTop: function(val) {
      if (not2(val)) {
        return this.length === 0 ? void 0 : this[0] === window ? scrollY : this[0].scrollTop;
      }
      return this.each(function() {
        this.scrollTop = val;
      });
    },
    scrollLeft: function(val) {
      if (not2(val)) {
        return this.length === 0 ? void 0 : this[0] === window ? scrollX : this[0].scrollLeft;
      }
      return this.each(function() {
        this.scrollLeft = val;
      });
    }
  });
  $.fn.extend({
    addClass: function() {
    },
    removeClass: function() {
    },
    toggleClass: function() {
    },
    containsClass: function(cls) {
      return this.hasClass(cls);
    },
    hasClass: function(cls) {
      let result = false;
      const classes = cls.split(" ").filter(function(v2) {
        return ("" + v2).trim() !== "";
      });
      if (not2(cls)) {
        return false;
      }
      this.each(function() {
        const el = this;
        $.each(classes, function() {
          if (!result && el.classList && el.classList.contains(this)) {
            result = true;
          }
        });
      });
      return result;
    },
    clearClasses: function() {
      return this.each(function() {
        this.className = "";
      });
    },
    cls: function(array) {
      return this.length === 0 ? void 0 : array ? this[0].className.split(" ") : this[0].className;
    },
    removeClassBy: function(mask) {
      return this.each(function() {
        const el = $(this);
        const classes = el.cls(true);
        $.each(classes, function() {
          const elClass = this;
          if (elClass.indexOf(mask) > -1) {
            el.removeClass(elClass);
          }
        });
      });
    },
    classNames: function() {
      const args = Array.prototype.slice.call(arguments, 0);
      const classes = [];
      $.each(args, function(_2, a2) {
        if (typeof a2 === "string") {
          classes.push(a2);
        } else if (isPlainObject(a2)) {
          $.each(a2, function(k2, v2) {
            if (v2) {
              classes.push(k2);
            }
          });
        } else {
          nothing();
        }
      });
      return this.each(function() {
        this.className += " " + classes.join(" ");
      });
    }
  });
  ["add", "remove", "toggle"].forEach(function(method) {
    $.fn[method + "Class"] = function(cls) {
      const _classes = !cls ? [] : Array.isArray(cls) ? cls : cls.split(" ").filter(function(v2) {
        return !!v2;
      });
      if (!_classes.length) return this;
      return this.each(function() {
        const el = this;
        const hasClassList = typeof el.classList !== "undefined";
        if (hasClassList) {
          $.each(_classes, function(_2, v2) {
            el.classList[method](v2);
          });
        } else {
          el.className += _classes.join(" ");
        }
      });
    };
  });
  $.parseHTML = function(data2) {
    let base2, singleTag, result = [], ctx, _context;
    const regexpSingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    if (typeof data2 !== "string") {
      return [];
    }
    data2 = data2.trim();
    ctx = document.implementation.createHTMLDocument("");
    base2 = ctx.createElement("base");
    base2.href = document.location.href;
    ctx.head.appendChild(base2);
    _context = ctx.body;
    singleTag = regexpSingleTag.exec(data2);
    if (singleTag) {
      result.push(document.createElement(singleTag[1]));
    } else {
      _context.innerHTML = data2;
      for (let i3 = 0; i3 < _context.childNodes.length; i3++) {
        result.push(_context.childNodes[i3]);
      }
    }
    return result;
  };
  $.fn.extend({
    _size: function(prop, val) {
      if (this.length === 0) return;
      if (not2(val)) {
        const el = this[0];
        if (prop === "height") {
          return el === window ? window.innerHeight : el === document ? el.body.clientHeight : parseInt(getComputedStyle(el).height);
        }
        if (prop === "width") {
          return el === window ? window.innerWidth : el === document ? el.body.clientWidth : parseInt(getComputedStyle(el).width);
        }
      }
      return this.each(function() {
        const el = this;
        if (el === window || el === document) {
          return;
        }
        el.style[prop] = isNaN(val) ? val : val + "px";
      });
    },
    height: function(val) {
      return this._size("height", val);
    },
    width: function(val) {
      return this._size("width", val);
    },
    _sizeOut: function(prop, val) {
      let el, size, style, result;
      if (this.length === 0) {
        return;
      }
      if (!not2(val) && typeof val !== "boolean") {
        return this.each(function() {
          const el2 = this;
          if (el2 === window || el2 === document) {
            return;
          }
          let h7, style2 = getComputedStyle(el2), bs = prop === "width" ? parseInt(style2["border-left-width"]) + parseInt(style2["border-right-width"]) : parseInt(style2["border-top-width"]) + parseInt(style2["border-bottom-width"]), pa = prop === "width" ? parseInt(style2["padding-left"]) + parseInt(style2["padding-right"]) : parseInt(style2["padding-top"]) + parseInt(style2["padding-bottom"]);
          h7 = $(this)[prop](val)[prop]() - bs - pa;
          el2.style[prop] = h7 + "px";
        });
      }
      el = this[0];
      size = el[prop === "width" ? "offsetWidth" : "offsetHeight"];
      style = getComputedStyle(el);
      result = size + parseInt(style[prop === "width" ? "margin-left" : "margin-top"]) + parseInt(style[prop === "width" ? "margin-right" : "margin-bottom"]);
      return val === true ? result : size;
    },
    outerWidth: function(val) {
      return this._sizeOut("width", val);
    },
    outerHeight: function(val) {
      return this._sizeOut("height", val);
    },
    padding: function(p3) {
      if (this.length === 0) return;
      const s2 = getComputedStyle(this[0], p3);
      return {
        top: parseInt(s2["padding-top"]),
        right: parseInt(s2["padding-right"]),
        bottom: parseInt(s2["padding-bottom"]),
        left: parseInt(s2["padding-left"])
      };
    },
    margin: function(p3) {
      if (this.length === 0) return;
      const s2 = getComputedStyle(this[0], p3);
      return {
        top: parseInt(s2["margin-top"]),
        right: parseInt(s2["margin-right"]),
        bottom: parseInt(s2["margin-bottom"]),
        left: parseInt(s2["margin-left"])
      };
    },
    border: function(p3) {
      if (this.length === 0) return;
      const s2 = getComputedStyle(this[0], p3);
      return {
        top: parseInt(s2["border-top-width"]),
        right: parseInt(s2["border-right-width"]),
        bottom: parseInt(s2["border-bottom-width"]),
        left: parseInt(s2["border-left-width"])
      };
    }
  });
  $.fn.extend({
    offset: function(val) {
      let rect;
      if (not2(val)) {
        if (this.length === 0) return void 0;
        rect = this[0].getBoundingClientRect();
        return {
          top: rect.top + scrollY,
          left: rect.left + scrollX
        };
      }
      return this.each(function() {
        let el = $(this), top = val.top, left = val.left, position = getComputedStyle(this).position, offset = el.offset();
        if (position === "static") {
          el.css("position", "relative");
        }
        if (["absolute", "fixed"].indexOf(position) === -1) {
          top = top - offset.top;
          left = left - offset.left;
        }
        el.css({
          top,
          left
        });
      });
    },
    position: function(margin) {
      let ml = 0, mt = 0, el, style;
      if (not2(margin) || typeof margin !== "boolean") {
        margin = false;
      }
      if (this.length === 0) {
        return void 0;
      }
      el = this[0];
      style = getComputedStyle(el);
      if (margin) {
        ml = parseInt(style["margin-left"]);
        mt = parseInt(style["margin-top"]);
      }
      return {
        left: el.offsetLeft - ml,
        top: el.offsetTop - mt
      };
    },
    left: function(val, margin) {
      if (this.length === 0) return;
      if (not2(val)) {
        return this.position(margin).left;
      }
      if (typeof val === "boolean") {
        margin = val;
        return this.position(margin).left;
      }
      return this.each(function() {
        $(this).css({
          left: val
        });
      });
    },
    top: function(val, margin) {
      if (this.length === 0) return;
      if (not2(val)) {
        return this.position(margin).top;
      }
      if (typeof val === "boolean") {
        margin = val;
        return this.position(margin).top;
      }
      return this.each(function() {
        $(this).css({
          top: val
        });
      });
    },
    coord: function() {
      return this.length === 0 ? void 0 : this[0].getBoundingClientRect();
    },
    pos: function() {
      if (this.length === 0) return;
      return {
        top: parseInt($(this[0]).style("top")),
        left: parseInt($(this[0]).style("left"))
      };
    }
  });
  $.fn.extend({
    attr: function(name2, val) {
      const attributes = {};
      if (this.length === 0 && arguments.length === 0) {
        return void 0;
      }
      if (this.length && arguments.length === 0) {
        $.each(this[0].attributes, function() {
          attributes[this.nodeName] = this.nodeValue;
        });
        return attributes;
      }
      if (arguments.length === 1 && typeof name2 === "string") {
        return this.length && this[0].nodeType === 1 && this[0].hasAttribute(name2) ? this[0].getAttribute(name2) : void 0;
      }
      return this.each(function() {
        const el = this;
        if (isPlainObject(name2)) {
          $.each(name2, function(k2, v2) {
            el.setAttribute(k2, v2);
          });
        } else {
          el.setAttribute(name2, val);
        }
      });
    },
    removeAttr: function(name2) {
      let attributes;
      if (not2(name2)) {
        return this.each(function() {
          const el = this;
          $.each(this.attributes, function() {
            el.removeAttribute(this);
          });
        });
      }
      attributes = typeof name2 === "string" ? name2.split(",").map(function(el) {
        return el.trim();
      }) : name2;
      return this.each(function() {
        const el = this;
        $.each(attributes, function() {
          if (el.hasAttribute(this)) el.removeAttribute(this);
        });
      });
    },
    toggleAttr: function(name2, val) {
      return this.each(function() {
        const el = this;
        if (not2(val)) {
          el.removeAttribute(name2);
        } else {
          el.setAttribute(name2, val);
        }
      });
    },
    id: function(val) {
      if (typeof val === "undefined") {
        return this.length === 1 ? $(this[0]).attr("id") : this.map((el) => $(el).attr("id"));
      }
      return this.each(function() {
        $(this).attr("id", val);
      });
    }
  });
  $.extend({
    meta: function(name2) {
      return not2(name2) ? $("meta") : $("meta[name='$name']".replace("$name", name2));
    },
    metaBy: function(name2) {
      return not2(name2) ? $("meta") : $("meta[$name]".replace("$name", name2));
    },
    doctype: function() {
      return $("doctype");
    },
    html: function() {
      return $("html");
    },
    head: function() {
      return $("html").find("head");
    },
    body: function() {
      return $("body");
    },
    document: function() {
      return $(document);
    },
    window: function() {
      return $(window);
    },
    charset: function(val) {
      if (val) {
        const m2 = $("meta[charset]");
        if (m2.length > 0) {
          m2.attr("charset", val);
        }
      }
      return document.characterSet;
    }
  });
  $.extend({
    bind: (fn, ctx) => fn.bind(ctx)
  });
  (function(arr) {
    arr.forEach(function(item) {
      ["append", "prepend"].forEach(function(where) {
        if (hasProp(item, where)) {
          return;
        }
        Object.defineProperty(item, where, {
          configurable: true,
          enumerable: true,
          writable: true,
          value: function() {
            const argArr = Array.prototype.slice.call(arguments), docFrag = document.createDocumentFragment();
            argArr.forEach(function(argItem) {
              const isNode = argItem instanceof Node;
              docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
            });
            if (where === "prepend")
              this.insertBefore(docFrag, this.firstChild);
            else
              this.appendChild(docFrag);
          }
        });
      });
    });
  })([Element.prototype, Document.prototype, DocumentFragment.prototype]);
  var normalizeElements = function(s2) {
    let result;
    if (typeof s2 === "string") result = $.isSelector(s2) ? $(s2) : $.parseHTML(s2);
    else if (s2 instanceof HTMLElement) result = [s2];
    else if (isArrayLike(s2)) result = s2;
    return result;
  };
  $.fn.extend({
    appendText: function(text) {
      return this.each(function(elIndex, el) {
        el.innerHTML += text;
      });
    },
    prependText: function(text) {
      return this.each(function(elIndex, el) {
        el.innerHTML = text + el.innerHTML;
      });
    },
    append: function(elements) {
      const _elements = normalizeElements(elements);
      return this.each(function(elIndex, el) {
        $.each(_elements, function() {
          if (el === this) return;
          const child = elIndex === 0 ? this : this.cloneNode(true);
          if (child.tagName && child.tagName === "SCRIPT") {
            $.script(child, el);
          } else {
            el.append(child);
          }
        });
      });
    },
    appendTo: function(elements) {
      const _elements = normalizeElements(elements);
      return this.each(function() {
        const el = this;
        $.each(_elements, function(parIndex, parent2) {
          if (el === this) return;
          parent2.append(parIndex === 0 ? el : el.cloneNode(true));
        });
      });
    },
    prepend: function(elements) {
      const _elements = normalizeElements(elements);
      return this.each(function(elIndex, el) {
        $.each(_elements, function() {
          if (el === this) return;
          const child = elIndex === 0 ? this : this.cloneNode(true);
          $.script(child);
          if (child.tagName && child.tagName !== "SCRIPT") el.prepend(child);
        });
      });
    },
    prependTo: function(elements) {
      const _elements = normalizeElements(elements);
      return this.each(function() {
        const el = this;
        $.each(_elements, function(parIndex, parent2) {
          if (el === this) return;
          $(parent2).prepend(parIndex === 0 ? el : el.cloneNode(true));
        });
      });
    },
    insertBefore: function(elements) {
      const _elements = normalizeElements(elements);
      return this.each(function() {
        const el = this;
        $.each(_elements, function(elIndex) {
          if (el === this) return;
          const parent2 = this.parentNode;
          if (parent2) {
            parent2.insertBefore(elIndex === 0 ? el : el.cloneNode(true), this);
          }
        });
      });
    },
    insertAfter: function(elements) {
      const _elements = normalizeElements(elements);
      return this.each(function() {
        const el = this;
        $.each(_elements, function(elIndex, element2) {
          if (el === this) return;
          const parent2 = this.parentNode;
          if (parent2) {
            parent2.insertBefore(elIndex === 0 ? el : el.cloneNode(true), element2.nextSibling);
          }
        });
      });
    },
    after: function(html2) {
      return this.each(function() {
        const el = this;
        if (typeof html2 === "string") {
          el.insertAdjacentHTML("afterend", html2);
        } else {
          $(html2).insertAfter(el);
        }
      });
    },
    before: function(html2) {
      return this.each(function() {
        const el = this;
        if (typeof html2 === "string") {
          el.insertAdjacentHTML("beforebegin", html2);
        } else {
          $(html2).insertBefore(el);
        }
      });
    },
    clone: function(deep, withData) {
      const res = [];
      if (not2(deep)) {
        deep = false;
      }
      if (not2(withData)) {
        withData = false;
      }
      this.each(function() {
        const el = this.cloneNode(deep);
        const $el = $(el);
        let data2;
        if (withData && $.hasData(this)) {
          data2 = $(this).data();
          $.each(data2, function(k2, v2) {
            $el.data(k2, v2);
          });
        }
        res.push(el);
      });
      return $.merge($(), res);
    },
    import: function(deep) {
      const res = [];
      if (not2(deep)) {
        deep = false;
      }
      this.each(function() {
        res.push(document.importNode(this, deep));
      });
      return $.merge($(), res);
    },
    adopt: function() {
      const res = [];
      this.each(function() {
        res.push(document.adoptNode(this));
      });
      return $.merge($(), res);
    },
    remove: function(selector) {
      let i3 = 0, node, out, res = [];
      if (this.length === 0) {
        return;
      }
      out = selector ? this.filter(function(el) {
        return matches2.call(el, selector);
      }) : this.items();
      for (; (node = out[i3]) != null; i3++) {
        if (node.parentNode) {
          res.push(node.parentNode.removeChild(node));
          $.removeData(node);
        }
      }
      return $.merge($(), res);
    },
    wrap: function(el) {
      if (this.length === 0) {
        return;
      }
      const wrapper = $(normalizeElements(el));
      if (!wrapper.length) {
        return;
      }
      const res = [];
      this.each(function() {
        let _target, _wrapper;
        _wrapper = wrapper.clone(true, true);
        _wrapper.insertBefore(this);
        _target = _wrapper;
        while (_target.children().length) {
          _target = _target.children().eq(0);
        }
        _target.append(this);
        res.push(_wrapper);
      });
      return $(res);
    },
    wrapAll: function(el) {
      let wrapper, _wrapper, _target;
      if (this.length === 0) {
        return;
      }
      wrapper = $(normalizeElements(el));
      if (!wrapper.length) {
        return;
      }
      _wrapper = wrapper.clone(true, true);
      _wrapper.insertBefore(this[0]);
      _target = _wrapper;
      while (_target.children().length) {
        _target = _target.children().eq(0);
      }
      this.each(function() {
        _target.append(this);
      });
      return _wrapper;
    },
    wrapInner: function(el) {
      if (this.length === 0) {
        return;
      }
      const wrapper = $(normalizeElements(el));
      if (!wrapper.length) {
        return;
      }
      const res = [];
      this.each(function() {
        const elem = $(this);
        const html2 = elem.html();
        const wrp = wrapper.clone(true, true);
        elem.html(wrp.html(html2));
        res.push(wrp);
      });
      return $(res);
    }
  });
  $.extend({
    animation: {
      duration: 1e3,
      ease: "linear",
      elements: {}
    }
  });
  if (typeof window["setupAnimation"] === "object") {
    $.each(window["setupAnimation"], function(key, val) {
      if (typeof $.animation[key] !== "undefined" && !not2(val))
        $.animation[key] = val;
    });
  }
  var transformProps = ["translateX", "translateY", "translateZ", "rotate", "rotateX", "rotateY", "rotateZ", "scale", "scaleX", "scaleY", "scaleZ", "skew", "skewX", "skewY"];
  var numberProps = ["opacity", "zIndex"];
  var floatProps = ["opacity", "volume"];
  var scrollProps = ["scrollLeft", "scrollTop"];
  var reverseProps = ["opacity", "volume"];
  function _validElement(el) {
    return el instanceof HTMLElement || el instanceof SVGElement;
  }
  function _getRelativeValue(to, from) {
    const operator = /^(\*=|\+=|-=)/.exec(to);
    if (!operator) return to;
    const u2 = getUnit(to) || 0;
    const x2 = parseFloat(from);
    const y2 = parseFloat(to.replace(operator[0], ""));
    switch (operator[0][0]) {
      case "+":
        return x2 + y2 + u2;
      case "-":
        return x2 - y2 + u2;
      case "*":
        return x2 * y2 + u2;
      case "/":
        return x2 / y2 + u2;
    }
  }
  function _getStyle(el, prop, pseudo) {
    if (typeof el[prop] !== "undefined") {
      if (scrollProps.indexOf(prop) > -1) {
        return prop === "scrollLeft" ? el === window ? scrollX : el.scrollLeft : el === window ? scrollY : el.scrollTop;
      } else {
        return el[prop] || 0;
      }
    }
    return el.style[prop] || getComputedStyle(el, pseudo)[prop];
  }
  function _setStyle(el, key, val, unit, toInt2) {
    if (not2(toInt2)) {
      toInt2 = false;
    }
    key = camelCase2(key);
    if (toInt2) {
      val = parseInt(val);
    }
    if (_validElement(el)) {
      if (typeof el[key] !== "undefined") {
        el[key] = val;
      } else {
        el.style[key] = key === "transform" || key.toLowerCase().indexOf("color") > -1 ? val : val + unit;
      }
    } else {
      el[key] = val;
    }
  }
  function _applyStyles(el, mapProps, p3) {
    $.each(mapProps, function(key, val) {
      _setStyle(el, key, val[0] + val[2] * p3, val[3], val[4]);
    });
  }
  function _getElementTransforms(el) {
    if (!_validElement(el)) return {};
    const str3 = el.style.transform || "";
    const reg = /(\w+)\(([^)]*)\)/g;
    const transforms = {};
    let m2;
    while (m2 = reg.exec(str3))
      transforms[m2[1]] = m2[2];
    return transforms;
  }
  function _getColorArrayFromHex(val) {
    const a2 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(val ? val : "#000000");
    return a2.slice(1).map(function(v2) {
      return parseInt(v2, 16);
    });
  }
  function _getColorArrayFromElement(el, key) {
    return getComputedStyle(el)[key].replace(/[^\d.,]/g, "").split(",").map(function(v2) {
      return parseInt(v2);
    });
  }
  function _applyTransform(el, mapProps, p3) {
    const t = [];
    const elTransforms = _getElementTransforms(el);
    $.each(mapProps, function(key, val) {
      let from = val[0], to = val[1], delta = val[2], unit = val[3];
      key = "" + key;
      if (key.indexOf("rotate") > -1 || key.indexOf("skew") > -1) {
        if (unit === "") unit = "deg";
      }
      if (key.indexOf("scale") > -1) {
        unit = "";
      }
      if (key.indexOf("translate") > -1 && unit === "") {
        unit = "px";
      }
      if (unit === "turn") {
        t.push(key + "(" + to * p3 + unit + ")");
      } else {
        t.push(key + "(" + (from + delta * p3) + unit + ")");
      }
    });
    $.each(elTransforms, function(key, val) {
      if (mapProps[key] === void 0) {
        t.push(key + "(" + val + ")");
      }
    });
    el.style.transform = t.join(" ");
  }
  function _applyColors(el, mapProps, p3) {
    $.each(mapProps, function(key, val) {
      let i3, result = [0, 0, 0], v2;
      for (i3 = 0; i3 < 3; i3++) {
        result[i3] = Math.floor(val[0][i3] + val[2][i3] * p3);
      }
      v2 = "rgb(" + result.join(",") + ")";
      el.style[key] = v2;
    });
  }
  function _expandColorValue(val) {
    const regExp = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    if (val[0] === "#" && val.length === 4) {
      return "#" + val.replace(regExp, function(m2, r, g2, b2) {
        return r + r + g2 + g2 + b2 + b2;
      });
    }
    return val[0] === "#" ? val : "#" + val;
  }
  function applyProps(el, map2, p3) {
    _applyStyles(el, map2.props, p3);
    _applyTransform(el, map2.transform, p3);
    _applyColors(el, map2.color, p3);
  }
  function createAnimationMap(el, draw, dir) {
    const map2 = {
      props: {},
      transform: {},
      color: {}
    };
    let i3, from, to, delta, unit, temp;
    const elTransforms = _getElementTransforms(el);
    if (not2(dir)) {
      dir = "normal";
    }
    $.each(draw, function(key, val) {
      const isTransformProp = transformProps.indexOf("" + key) > -1;
      const isNumProp = numberProps.indexOf("" + key) > -1;
      const isColorProp = ("" + key).toLowerCase().indexOf("color") > -1;
      if (Array.isArray(val) && val.length === 1) {
        val = val[0];
      }
      if (!Array.isArray(val)) {
        if (isTransformProp) {
          from = elTransforms[key] || key === "scale" ? 1 : 0;
        } else if (isColorProp) {
          from = _getColorArrayFromElement(el, key);
        } else {
          from = _getStyle(el, key, void 0);
        }
        from = !isColorProp ? parseUnit(from) : from;
        to = !isColorProp ? parseUnit(_getRelativeValue(val, Array.isArray(from) ? from[0] : from)) : _getColorArrayFromHex(val);
      } else {
        from = !isColorProp ? parseUnit(val[0]) : _getColorArrayFromHex(_expandColorValue(val[0]));
        to = !isColorProp ? parseUnit(val[1]) : _getColorArrayFromHex(_expandColorValue(val[1]));
      }
      if (reverseProps.indexOf("" + key) > -1 && from[0] === to[0]) {
        from[0] = to[0] > 0 ? 0 : 1;
      }
      if (dir === "reverse") {
        temp = from;
        from = to;
        to = temp;
      }
      unit = el instanceof HTMLElement && to[1] === "" && !isNumProp && !isTransformProp ? "px" : to[1];
      if (isColorProp) {
        delta = [0, 0, 0];
        for (i3 = 0; i3 < 3; i3++) {
          delta[i3] = to[i3] - from[i3];
        }
      } else {
        delta = to[0] - from[0];
      }
      if (isTransformProp) {
        map2.transform[key] = [from[0], to[0], delta, unit];
      } else if (isColorProp) {
        map2.color[key] = [from, to, delta, unit];
      } else {
        map2.props[key] = [from[0], to[0], delta, unit, floatProps.indexOf("" + key) === -1];
      }
    });
    return map2;
  }
  function minMax(val, min, max) {
    return Math.min(Math.max(val, min), max);
  }
  var Easing = {
    linear: function() {
      return function(t) {
        return t;
      };
    }
  };
  Easing.default = Easing.linear;
  var eases = {
    Sine: function() {
      return function(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      };
    },
    Circ: function() {
      return function(t) {
        return 1 - Math.sqrt(1 - t * t);
      };
    },
    Back: function() {
      return function(t) {
        return t * t * (3 * t - 2);
      };
    },
    Bounce: function() {
      return function(t) {
        let pow2, b2 = 4;
        while (t < ((pow2 = Math.pow(2, --b2)) - 1) / 11) {
        }
        return 1 / Math.pow(4, 3 - b2) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - t, 2);
      };
    },
    Elastic: function(amplitude, period) {
      if (not2(amplitude)) {
        amplitude = 1;
      }
      if (not2(period)) {
        period = 0.5;
      }
      const a2 = minMax(amplitude, 1, 10);
      const p3 = minMax(period, 0.1, 2);
      return function(t) {
        return t === 0 || t === 1 ? t : -a2 * Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1 - p3 / (Math.PI * 2) * Math.asin(1 / a2)) * (Math.PI * 2) / p3);
      };
    }
  };
  ["Quad", "Cubic", "Quart", "Quint", "Expo"].forEach(function(name2, i3) {
    eases[name2] = function() {
      return function(t) {
        return Math.pow(t, i3 + 2);
      };
    };
  });
  Object.keys(eases).forEach(function(name2) {
    const easeIn = eases[name2];
    Easing["easeIn" + name2] = easeIn;
    Easing["easeOut" + name2] = function(a2, b2) {
      return function(t) {
        return 1 - easeIn(a2, b2)(1 - t);
      };
    };
    Easing["easeInOut" + name2] = function(a2, b2) {
      return function(t) {
        return t < 0.5 ? easeIn(a2, b2)(t * 2) / 2 : 1 - easeIn(a2, b2)(t * -2 + 2) / 2;
      };
    };
  });
  var defaultAnimationProps = {
    id: null,
    el: null,
    draw: {},
    dur: $.animation.duration,
    ease: $.animation.ease,
    loop: 0,
    pause: 0,
    dir: "normal",
    defer: 0,
    onStart: function() {
    },
    onStop: function() {
    },
    onStopAll: function() {
    },
    onPause: function() {
    },
    onPauseAll: function() {
    },
    onResume: function() {
    },
    onResumeAll: function() {
    },
    onFrame: function() {
    },
    onDone: function() {
    }
  };
  function animate(args) {
    return new Promise(function(resolve) {
      const that = this;
      const props = $.assign({}, defaultAnimationProps, { dur: $.animation.duration, ease: $.animation.ease }, args);
      let id = props.id, el = props.el, draw = props.draw, dur = props.dur, ease = props.ease, loop = props.loop, onStart = props.onStart, onFrame = props.onFrame, onDone = props.onDone, pauseStart = props.pause, dir = props.dir, defer = props.defer;
      let map2 = {};
      let easeName = "linear", easeArgs = [], easeFn = Easing.linear, matchArgs;
      let direction = dir === "alternate" ? "normal" : dir;
      let replay = false;
      let animationID = id ? id : +(performance.now() * Math.pow(10, 14));
      if (not2(el)) {
        throw new Error("Unknown element!");
      }
      if (typeof el === "string") {
        el = document.querySelector(el);
      }
      if (typeof draw !== "function" && typeof draw !== "object") {
        throw new Error("Unknown draw object. Must be a function or object!");
      }
      if (dur === 0) {
        dur = 1;
      }
      if (dir === "alternate" && typeof loop === "number") {
        loop *= 2;
      }
      if (typeof ease === "string") {
        matchArgs = /\(([^)]+)\)/.exec(ease);
        easeName = ease.split("(")[0];
        easeArgs = matchArgs ? matchArgs[1].split(",").map(function(p3) {
          return parseFloat(p3);
        }) : [];
        easeFn = Easing[easeName] || Easing.linear;
      } else if (typeof ease === "function") {
        easeFn = ease;
      } else {
        easeFn = Easing.linear;
      }
      $.animation.elements[animationID] = {
        element: el,
        id: null,
        stop: 0,
        pause: 0,
        loop: 0,
        t: -1,
        started: 0,
        paused: 0
      };
      const play = function() {
        if (typeof draw === "object") {
          map2 = createAnimationMap(el, draw, direction);
        }
        if (typeof onStart === "function") {
          onStart.apply(el);
        }
        $.animation.elements[animationID].loop += 1;
        $.animation.elements[animationID].started = performance.now();
        $.animation.elements[animationID].duration = dur;
        $.animation.elements[animationID].id = requestAnimationFrame(animate2);
      };
      const done = function() {
        cancelAnimationFrame($.animation.elements[animationID].id);
        delete $.animation.elements[id];
        if (typeof onDone === "function") {
          onDone.apply(el);
        }
        resolve(that);
      };
      const animate2 = function(time2) {
        let p3, t;
        let { stop, pause, started: start } = $.animation.elements[animationID];
        if ($.animation.elements[animationID].paused) {
          start = time2 - $.animation.elements[animationID].t * dur;
          $.animation.elements[animationID].started = start;
        }
        t = ((time2 - start) / dur).toFixed(4);
        if (t > 1) t = 1;
        if (t < 0) t = 0;
        p3 = easeFn.apply(null, easeArgs)(t);
        $.animation.elements[animationID].t = t;
        $.animation.elements[animationID].p = p3;
        if (pause) {
          $.animation.elements[animationID].id = requestAnimationFrame(animate2);
          return;
        }
        if (stop > 0) {
          if (stop === 2) {
            if (typeof draw === "function") {
              draw.bind(el)(1, 1);
            } else {
              applyProps(el, map2, 1);
            }
          }
          done();
          return;
        }
        if (typeof draw === "function") {
          draw.bind(el)(t, p3);
        } else {
          applyProps(el, map2, p3);
        }
        if (typeof onFrame === "function") {
          onFrame.apply(el, [t, p3]);
        }
        if (t < 1) {
          $.animation.elements[animationID].id = requestAnimationFrame(animate2);
        }
        if (parseInt(t) === 1) {
          if (loop) {
            if (dir === "alternate") {
              direction = direction === "normal" ? "reverse" : "normal";
            }
            if (typeof loop === "boolean") {
              setTimeout(function() {
                play();
              }, pauseStart);
            } else {
              if (loop > $.animation.elements[animationID].loop) {
                setTimeout(function() {
                  play();
                }, pauseStart);
              } else {
                done();
              }
            }
          } else {
            if (dir === "alternate" && !replay) {
              direction = direction === "normal" ? "reverse" : "normal";
              replay = true;
              play();
            } else {
              done();
            }
          }
        }
      };
      if (defer > 0) {
        setTimeout(function() {
          play();
        }, defer);
      } else {
        play();
      }
    });
  }
  function stopAnimation(id, done) {
    const an = $.animation.elements[id];
    if (typeof an === "undefined") {
      return;
    }
    if (not2(done)) {
      done = true;
    }
    an.stop = done === true ? 2 : 1;
    if (typeof an.onStop === "function") {
      an.onStop.apply(an.element);
    }
  }
  function stopAnimationAll(done, filter) {
    $.each($.animation.elements, function(k2, v2) {
      if (filter) {
        if (typeof filter === "string") {
          if (matches2.call(v2.element, filter)) stopAnimation(k2, done);
        } else if (filter.length) {
          $.each(filter, function() {
            if (v2.element === this) stopAnimation(k2, done);
          });
        } else if (filter instanceof Element) {
          if (v2.element === filter) stopAnimation(k2, done);
        }
      } else {
        stopAnimation(k2, done);
      }
    });
  }
  function pauseAnimation(id) {
    const an = $.animation.elements[id];
    if (typeof an === "undefined") {
      return;
    }
    an.pause = 1;
    an.paused = performance.now();
    if (typeof an.onPause === "function") {
      an.onPause.apply(an.element);
    }
  }
  function pauseAnimationAll(filter) {
    $.each($.animation.elements, function(k2, v2) {
      if (filter) {
        if (typeof filter === "string") {
          if (matches2.call(v2.element, filter)) pauseAnimation(k2);
        } else if (filter.length) {
          $.each(filter, function() {
            if (v2.element === this) pauseAnimation(k2);
          });
        } else if (filter instanceof Element) {
          if (v2.element === filter) pauseAnimation(k2);
        }
      } else {
        pauseAnimation(k2);
      }
    });
  }
  function resumeAnimation(id) {
    const an = $.animation.elements[id];
    if (typeof an === "undefined") {
      return;
    }
    an.pause = 0;
    an.paused = 0;
    if (typeof an.onResume === "function") {
      an.onResume.apply(an.element);
    }
  }
  function resumeAnimationAll(filter) {
    $.each($.animation.elements, function(k2, v2) {
      if (filter) {
        if (typeof filter === "string") {
          if (matches2.call(v2.element, filter)) resumeAnimation(k2);
        } else if (filter.length) {
          $.each(filter, function() {
            if (v2.element === this) resumeAnimation(k2);
          });
        } else if (filter instanceof Element) {
          if (v2.element === filter) resumeAnimation(k2);
        }
      } else {
        resumeAnimation(k2);
      }
    });
  }
  var defaultChainOptions = {
    loop: false,
    onChainItem: null,
    onChainItemComplete: null,
    onChainComplete: null
  };
  function chain(arr, opt2) {
    const o2 = $.extend({}, defaultChainOptions, opt2);
    if (typeof o2.loop !== "boolean") {
      o2.loop--;
    }
    if (!Array.isArray(arr)) {
      console.warn("Chain array is not defined!");
      return false;
    }
    const reducer = function(acc, item) {
      return acc.then(function() {
        if (typeof o2["onChainItem"] === "function") {
          o2["onChainItem"](item);
        }
        return animate(item).then(function() {
          if (typeof o2["onChainItemComplete"] === "function") {
            o2["onChainItemComplete"](item);
          }
        });
      });
    };
    arr.reduce(reducer, Promise.resolve()).then(function() {
      if (typeof o2["onChainComplete"] === "function") {
        o2["onChainComplete"]();
      }
      if (o2.loop) {
        chain(arr, o2);
      }
    });
  }
  $.easing = {};
  $.extend($.easing, Easing);
  $.extend({
    animate: function(args) {
      let el, draw, dur, ease, cb;
      if (arguments.length > 1) {
        el = $(arguments[0])[0];
        draw = arguments[1];
        dur = arguments[2] || $.animation.duration;
        ease = arguments[3] || $.animation.ease;
        cb = arguments[4];
        if (typeof dur === "function") {
          cb = dur;
          ease = $.animation.ease;
          dur = $.animation.duration;
        }
        if (typeof ease === "function") {
          cb = ease;
          ease = $.animation.ease;
        }
        return animate({
          el,
          draw,
          dur,
          ease,
          onDone: cb
        });
      }
      return animate(args);
    },
    chain,
    stop: stopAnimation,
    stopAll: stopAnimationAll,
    resume: resumeAnimation,
    resumeAll: resumeAnimationAll,
    pause: pauseAnimation,
    pauseAll: pauseAnimationAll
  });
  $.fn.extend({
    /**
         *
    
         args = {
         draw: {} | function,
         dur: 1000,
         ease: "linear",
         loop: 0,
         pause: 0,
         dir: "normal",
         defer: 0,
         onFrame: function,
         onDone: function
         }
    
         * @returns {this}
         */
    animate: function(args) {
      const that = this;
      let draw, dur, easing, cb;
      const a2 = args;
      let compatibilityMode;
      compatibilityMode = !Array.isArray(args) && (arguments.length > 1 || arguments.length === 1 && typeof arguments[0].draw === "undefined");
      if (compatibilityMode) {
        draw = arguments[0];
        dur = arguments[1] || $.animation.duration;
        easing = arguments[2] || $.animation.ease;
        cb = arguments[3];
        if (typeof dur === "function") {
          cb = dur;
          dur = $.animation.duration;
          easing = $.animation.ease;
        }
        if (typeof easing === "function") {
          cb = easing;
          easing = $.animation.ease;
        }
        return this.each(function() {
          return $.animate({
            el: this,
            draw,
            dur,
            ease: easing,
            onDone: cb
          });
        });
      }
      if (Array.isArray(args)) {
        $.each(args, function() {
          const a22 = this;
          that.each(function() {
            a22.el = this;
            $.animate(a22);
          });
        });
        return this;
      }
      return this.each(function() {
        a2.el = this;
        $.animate(a2);
      });
    },
    chain: function(arr, loop) {
      return this.each(function() {
        const el = this;
        $.each(arr, function() {
          this.el = el;
        });
        $.chain(arr, loop);
      });
    },
    /**
     *
     * @param done
     * @returns {this}
     */
    stop: function(done) {
      return this.each(function() {
        const el = this;
        $.each($.animation.elements, function(k2, o2) {
          if (o2.element === el) {
            stopAnimation(k2, done);
          }
        });
      });
    },
    pause: function() {
      return this.each(function() {
        const el = this;
        $.each($.animation.elements, function(k2, o2) {
          if (o2.element === el) {
            pauseAnimation(k2);
          }
        });
      });
    },
    resume: function() {
      return this.each(function() {
        const el = this;
        $.each($.animation.elements, function(k2, o2) {
          if (o2.element === el) {
            resumeAnimation(k2);
          }
        });
      });
    }
  });
  $.extend({
    hidden: function(el, val, cb) {
      el = $(el)[0];
      if (typeof val === "string") {
        val = val.toLowerCase() === "true";
      }
      if (typeof val === "function") {
        cb = val;
        val = !el.hidden;
      }
      el.hidden = val;
      if (typeof cb === "function") {
        $.bind(cb, el);
        cb.call(el, arguments);
      }
      return this;
    },
    hide: function(el, cb) {
      const $el = $(el);
      el = $el[0];
      const inline = el.style.display;
      const css = getComputedStyle(el, null).display;
      $el.origin("display", {
        inline,
        css
      });
      el.style.display = "none";
      if (typeof cb === "function") {
        $.bind(cb, el);
        cb.call(el, arguments);
      }
      return this;
    },
    show: function(el, cb) {
      const $el = $(el);
      const display = $el.origin("display");
      el = $(el)[0];
      el.style.display = "";
      if (display) {
        const inline = display.inline || "";
        const css = display.css || "";
        if (inline && inline !== "none") {
          el.style.display = inline;
        } else if (css === "none") {
          el.style.display = "block";
        }
      } else {
        el.style.display = "block";
      }
      if (parseInt(el.style.opacity) === 0) {
        el.style.opacity = "1";
      }
      if (typeof cb === "function") {
        $.bind(cb, el);
        cb.call(el, arguments);
      }
      return this;
    },
    visible: function(el, mode, cb) {
      if (mode === void 0) {
        mode = true;
      }
      el.style.visibility = mode ? "visible" : "hidden";
      if (typeof cb === "function") {
        $.bind(cb, el);
        cb.call(el, arguments);
      }
      return this;
    },
    toggle: function(el, cb) {
      const func = getComputedStyle(el, null).display !== "none" ? "hide" : "show";
      return $[func](el, cb);
    }
  });
  $.fn.extend({
    hide: function() {
      let callback;
      $.each(arguments, function() {
        if (typeof this === "function") {
          callback = this;
        }
      });
      return this.each(function() {
        $.hide(this, callback);
      });
    },
    show: function() {
      let callback;
      $.each(arguments, function() {
        if (typeof this === "function") {
          callback = this;
        }
      });
      return this.each(function() {
        $.show(this, callback);
      });
    },
    visible: function(mode, cb) {
      return this.each(function() {
        $.visible(this, mode, cb);
      });
    },
    toggle: function(cb) {
      return this.each(function() {
        $.toggle(this, cb);
      });
    },
    hidden: function(val, cb) {
      return this.each(function() {
        $.hidden(this, val, cb);
      });
    }
  });
  $.extend({
    fx: {
      off: false
    }
  });
  $.fn.extend({
    fadeIn: function(dur, easing, cb) {
      return this.each(function() {
        const el = this;
        const $el = $(el);
        const visible = !(!isVisible(el) || isVisible(el) && +$el.style("opacity") === 0);
        if (not2(dur) && not2(easing) && not2(cb)) {
          cb = null;
          dur = $.animation.duration;
        } else if (typeof dur === "function") {
          cb = dur;
          dur = $.animation.duration;
        }
        if (typeof easing === "function") {
          cb = easing;
          easing = $.animation.ease;
        }
        if ($.fx.off) {
          dur = 0;
        }
        if (visible) {
          if (typeof cb === "function") {
            $.bind(cb, this)();
          }
          return this;
        }
        const originDisplay = $el.origin("display", void 0, "block");
        el.style.opacity = "0";
        el.style.display = originDisplay;
        return $.animate({
          el,
          draw: {
            opacity: 1
          },
          dur,
          ease: easing,
          onDone: function() {
            if (typeof cb === "function") {
              $.bind(cb, this)();
            }
          }
        });
      });
    },
    fadeOut: function(dur, easing, cb) {
      return this.each(function() {
        const el = this;
        const $el = $(el);
        if (not2(dur) && not2(easing) && not2(cb)) {
          cb = null;
          dur = $.animation.duration;
        } else if (typeof dur === "function") {
          cb = dur;
          dur = $.animation.duration;
        }
        if (typeof easing === "function") {
          cb = easing;
          easing = $.animation.ease;
        }
        $el.origin("display", $el.style("display"));
        if (!isVisible(el)) {
          if (typeof cb === "function") {
            $.bind(cb, this)();
          }
          return this;
        }
        return $.animate({
          el,
          draw: {
            opacity: 0
          },
          dur,
          ease: easing,
          onDone: function() {
            this.style.display = "none";
            if (typeof cb === "function") {
              $.bind(cb, this)();
            }
          }
        });
      });
    },
    slideUp: function(dur, easing, cb) {
      return this.each(function() {
        const el = this;
        const $el = $(el);
        let currHeight;
        if ($el.height() === 0) return;
        if (not2(dur) && not2(easing) && not2(cb)) {
          cb = null;
          dur = $.animation.duration;
        } else if (typeof dur === "function") {
          cb = dur;
          dur = $.animation.duration;
        }
        if (typeof easing === "function") {
          cb = easing;
          easing = $.animation.ease;
        }
        currHeight = $el.height();
        $el.origin("height", currHeight);
        $el.origin("display", $(el).style("display"));
        $el.css({
          overflow: "hidden"
        });
        return $.animate({
          el,
          draw: {
            height: 0
          },
          dur,
          ease: easing,
          onDone: function() {
            $el.hide().removeStyleProperty("overflow, height");
            if (typeof cb === "function") {
              $.bind(cb, this)();
            }
          }
        });
      });
    },
    slideDown: function(dur, easing, cb) {
      return this.each(function() {
        const el = this;
        const $el = $(el);
        let targetHeight, originDisplay;
        if (not2(dur) && not2(easing) && not2(cb)) {
          cb = null;
          dur = $.animation.duration;
        } else if (typeof dur === "function") {
          cb = dur;
          dur = $.animation.duration;
        }
        if (typeof easing === "function") {
          cb = easing;
          easing = $.animation.ease;
        }
        $el.show().visible(false);
        targetHeight = +$el.origin("height", void 0, $el.height());
        if (parseInt(targetHeight) === 0) {
          targetHeight = el.scrollHeight;
        }
        originDisplay = $el.origin("display", $el.style("display"), "block");
        $el.height(0).visible(true);
        $el.css({
          overflow: "hidden",
          display: originDisplay === "none" ? "block" : originDisplay
        });
        return $.animate({
          el,
          draw: {
            height: targetHeight
          },
          dur,
          ease: easing,
          onDone: function() {
            $(el).removeStyleProperty("overflow, height, visibility");
            if (typeof cb === "function") {
              $.bind(cb, this)();
            }
          }
        });
      });
    },
    moveTo: function(x2, y2, dur, ease, cb) {
      const draw = {
        top: y2,
        left: x2
      };
      if (typeof dur === "function") {
        cb = dur;
        dur = $.animation.duration;
        ease = $.animation.ease;
      }
      if (typeof ease === "function") {
        cb = ease;
        ease = $.animation.ease;
      }
      return this.each(function() {
        $.animate({
          el: this,
          draw,
          dur,
          ease,
          onDone: cb
        });
      });
    },
    centerTo: function(x2, y2, dur, ease, cb) {
      if (typeof dur === "function") {
        cb = dur;
        dur = $.animation.duration;
        ease = $.animation.ease;
      }
      if (typeof ease === "function") {
        cb = ease;
        ease = $.animation.ease;
      }
      return this.each(function() {
        const draw = {
          left: x2 - this.clientWidth / 2,
          top: y2 - this.clientHeight / 2
        };
        $.animate({
          el: this,
          draw,
          dur,
          ease,
          onDone: cb
        });
      });
    },
    colorTo: function(color, dur, easing, cb) {
      const draw = {
        color
      };
      if (typeof dur === "function") {
        cb = dur;
        dur = $.animation.duration;
        easing = $.animation.ease;
      }
      if (typeof easing === "function") {
        cb = easing;
        easing = $.animation.ease;
      }
      return this.each(function() {
        $.animate({
          el: this,
          draw,
          dur,
          ease: easing,
          onDone: cb
        });
      });
    },
    backgroundTo: function(color, dur, easing, cb) {
      const draw = {
        backgroundColor: color
      };
      if (typeof dur === "function") {
        cb = dur;
        dur = $.animation.duration;
        easing = $.animation.ease;
      }
      if (typeof easing === "function") {
        cb = easing;
        easing = $.animation.ease;
      }
      return this.each(function() {
        $.animate({
          el: this,
          draw,
          dur,
          ease: easing,
          onDone: cb
        });
      });
    },
    zoomIn: function(dur, easing, cb) {
      const draw = {
        scale: [0, 1]
      };
      if (typeof dur === "function") {
        cb = dur;
        dur = $.animation.duration;
        easing = $.animation.ease;
      }
      if (typeof easing === "function") {
        cb = easing;
        easing = $.animation.ease;
      }
      return this.each(function() {
        $.animate({
          el: this,
          draw,
          dur,
          ease: easing,
          onDone: cb
        });
      });
    },
    zoomOut: function(dur = 1e3, ease = "linear", cb = () => {
    }) {
      if (typeof dur === "function") {
        cb = dur;
        dur = $.animation.duration;
        ease = $.animation.ease;
      }
      if (typeof ease === "function") {
        cb = ease;
        ease = $.animation.ease;
      }
      return this.each(function() {
        $.animate({
          el: this,
          draw: {
            scale: 0
          },
          dur,
          ease,
          onDone: cb
        });
      });
    }
  });
  $.init = function(sel, ctx) {
    let parsed;
    const that = this;
    if (typeof sel === "string") {
      sel = sel.trim();
    }
    this.uid = $.uniqueId();
    if (!sel) {
      return this;
    }
    if (typeof sel === "function") {
      return $.ready(sel);
    }
    if (sel instanceof Element) {
      this.push(sel);
      return this;
    }
    if (sel instanceof $) {
      $.each(sel, function() {
        that.push(this);
      });
      return this;
    }
    if (sel === "window") sel = window;
    if (sel === "document") sel = document;
    if (sel === "body") sel = document.body;
    if (sel === "html") sel = document.documentElement;
    if (sel === "doctype") sel = document.doctype;
    if (sel && (sel.nodeType || sel.self === window)) {
      this.push(sel);
      return this;
    }
    if (isArrayLike(sel)) {
      $.each(sel, function() {
        $(this).each(function() {
          that.push(this);
        });
      });
      return this;
    }
    if (typeof sel !== "string" && (sel.self && sel.self !== window)) {
      return this;
    }
    if (sel === "#" || sel === ".") {
      console.error("Selector can't be # or .");
      return this;
    }
    if (sel[0] === "@") {
      $("[data-role]").each(function() {
        const roles = str2arr($(this).attr("data-role"), ",");
        if (roles.indexOf(sel.slice(1)) > -1) {
          that.push(this);
        }
      });
    } else {
      parsed = $.parseHTML(sel);
      if (parsed.length === 1 && parsed[0].nodeType === 3) {
        try {
          [].push.apply(this, document.querySelectorAll(sel));
        } catch (e) {
        }
      } else {
        $.merge(this, parsed);
      }
    }
    if (ctx !== void 0) {
      if (ctx instanceof $) {
        this.each(function() {
          $(ctx).append(that);
        });
      } else if (ctx instanceof HTMLElement) {
        $(ctx).append(that);
      } else {
        if (isPlainObject(ctx)) {
          $.each(this, function() {
            for (const name2 in ctx) {
              if (hasProp(ctx, name2))
                this.setAttribute(name2, ctx[name2]);
            }
          });
        }
      }
    }
    return this;
  };
  $.init.prototype = $.fn;

  // source/dom/index.js
  globalThis.$ = $;
  globalThis.Dom = $;

  // node_modules/@olton/hooks/dist/hooks.esm.js
  var hooks_esm_exports = {};
  __export(hooks_esm_exports, {
    EVENTS: () => EVENTS,
    info: () => info3,
    useCompose: () => useCompose,
    useCurry: () => useCurry,
    useDebounce: () => useDebounce,
    useEvent: () => useEvent,
    useMemo: () => useMemo,
    usePipe: () => usePipe,
    useState: () => useState,
    useThrottle: () => useThrottle
  });
  var state = [];
  var stateIndex = -1;
  var useState = (initialState, onStateChange) => {
    const index = stateIndex++;
    state[index] = { value: initialState };
    const setState = (arg) => {
      const old = state[index].value;
      state[index].value = typeof arg === "function" ? arg(old) : arg;
      if (typeof onStateChange === "function") {
        onStateChange(state[index].value, old);
      }
    };
    return [state[index], setState];
  };
  var EVENTS;
  (function(EVENTS2) {
    EVENTS2["LOAD"] = "load";
    EVENTS2["VIEWPORT"] = "viewport";
    EVENTS2["ATTRIBUTE"] = "attribute";
    EVENTS2["CHILDREN"] = "children";
    EVENTS2["DATA"] = "data";
  })(EVENTS || (EVENTS = {}));
  var useEvent = ({ event, root, target, effect }) => {
    const _target = typeof target === "string" ? document.querySelector(target) : target;
    if (typeof effect !== "function") {
      throw Error("Side effect must be a function!");
    }
    if (!_target) {
      throw Error("Please specify a target element!");
    }
    switch (event) {
      case EVENTS.LOAD: {
        const observer = new MutationObserver((mutations, observer2) => {
          const el = document.querySelector(target);
          if (el !== null) {
            effect(el);
            observer2.disconnect();
          }
        });
        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
        break;
      }
      case EVENTS.VIEWPORT: {
        const _root = root instanceof HTMLElement ? root : typeof root === "string" ? document.querySelector(root) : null;
        const observerOptions = {
          root: _root,
          rootMargin: "0px",
          threshold: 0.5
        };
        const observer = new IntersectionObserver((entries, observer2) => {
          for (const entry of entries) {
            if (entry.isIntersecting) {
              effect(_target);
            }
          }
        }, observerOptions);
        observer.observe(_target);
        break;
      }
      case EVENTS.ATTRIBUTE: {
        const observer = new MutationObserver((mutations) => {
          for (const mut of mutations) {
            if (mut.target === _target && mut.type === "attributes") {
              effect(_target, mut.attributeName, _target.getAttribute(mut.attributeName));
            }
          }
        });
        observer.observe(_target, {
          attributes: true
        });
        break;
      }
      case EVENTS.CHILDREN: {
        const observer = new MutationObserver((mutations) => {
          for (const mut of mutations) {
            if (mut.target === _target && mut.type === "childList") {
              effect(_target, mut.addedNodes, mut.removedNodes);
            }
          }
        });
        observer.observe(_target, {
          childList: true,
          subtree: true
        });
        break;
      }
      case EVENTS.DATA: {
        const observer = new MutationObserver((mutations) => {
          for (const mut of mutations) {
            if (mut.target === _target && mut.type === "characterData") {
              effect(_target, _target.textContent);
            }
          }
        });
        observer.observe(_target, {
          characterData: true
        });
        break;
      }
      default: {
        if (_target instanceof HTMLElement) {
          _target.addEventListener(event, (e) => {
            effect(_target, e);
          });
        }
      }
    }
  };
  var useMemo = (fn) => {
    const cache = /* @__PURE__ */ new Map();
    return (...args) => {
      const key = `${args.length}${args.join("+")}`;
      if (cache.has(key)) {
        return cache.get(key);
      }
      const result = fn.apply(null, args);
      cache.set(key, result);
      return result;
    };
  };
  var useDebounce = (fn, wait) => {
    let timer;
    return function(...args) {
      const func = () => {
        fn.apply(this, args);
      };
      clearTimeout(timer);
      timer = setTimeout(func, wait);
    };
  };
  var usePipe = (...functions) => {
    return (first2) => functions.reduce((acc, fn) => fn(acc), first2);
  };
  var useCurry = (func) => {
    return function curried(...args) {
      if (args.length >= func.length) {
        return func.apply(this, args);
      }
      return function(...args2) {
        return curried.apply(this, args.concat(args2));
      };
    };
  };
  var useCompose = (...functions) => {
    return (first2) => functions.reduceRight((acc, fn) => fn(acc), first2);
  };
  var useThrottle = (fn, wait) => {
    let isThrottled = false;
    let saveThis;
    let saveArgs;
    function wrapper(...args) {
      if (isThrottled) {
        saveThis = this;
        saveArgs = args;
        return;
      }
      fn.apply(this, args);
      isThrottled = true;
      setTimeout(() => {
        if (saveArgs) {
          wrapper.apply(saveThis, saveArgs);
          saveArgs = saveThis = null;
        }
      }, wait);
    }
    return wrapper;
  };
  var version3 = "0.10.0";
  var build_time3 = "09.07.2024, 13:04:50";
  var info3 = () => {
    console.info(`%c Hooks %c v${version3} %c ${build_time3} `, "color: #ffffff; font-weight: bold; background: #5c2c05", "color: white; background: darkgreen", "color: white; background: #0080fe;");
  };

  // source/hooks/index.js
  globalThis.Hooks = hooks_esm_exports;

  // node_modules/@olton/farbe/dist/farbe.es.js
  var HSV = class {
    constructor(h7 = 0, s2 = 0, v2 = 0) {
      this.h = h7;
      this.s = s2;
      this.v = v2;
    }
    toString() {
      return "hsv(" + [Math.round(this.h), Math.round(this.s * 100) + "%", Math.round(this.v * 100) + "%"].join(", ") + ")";
    }
  };
  var HSL = class {
    constructor(h7 = 0, s2 = 0, l2 = 0) {
      this.h = h7;
      this.s = ("" + s2).includes("%") ? parseInt(s2) / 100 : s2;
      this.l = ("" + l2).includes("%") ? parseInt(l2) / 100 : l2;
    }
    toString() {
      return "hsl(" + [Math.round(this.h), Math.round(this.s * 100) + "%", Math.round(this.l * 100) + "%"].join(", ") + ")";
    }
  };
  var HSLA = class {
    constructor(h7 = 0, s2 = 0, l2 = 0, a2 = 0) {
      this.h = h7;
      this.s = ("" + s2).includes("%") ? parseInt(s2) / 100 : s2;
      this.l = ("" + l2).includes("%") ? parseInt(l2) / 100 : l2;
      this.a = a2;
    }
    toString() {
      return "hsla(" + [Math.round(this.h), Math.round(this.s * 100) + "%", Math.round(this.l * 100) + "%", parseFloat(this.a).toFixed(2)].join(", ") + ")";
    }
  };
  var RGB = class {
    constructor(r = 0, g2 = 0, b2 = 0) {
      this.r = r;
      this.g = g2;
      this.b = b2;
    }
    toString() {
      return `rgb(${this.r},${this.g},${this.b})`;
    }
  };
  var RGBA = class {
    constructor(r = 0, g2 = 0, b2 = 0, a2 = 0) {
      this.r = r;
      this.g = g2;
      this.b = b2;
      this.a = a2;
    }
    toString() {
      return `rgba(${this.r},${this.g},${this.b},${this.a})`;
    }
  };
  var CMYK = class {
    constructor(c = 0, m2 = 0, y2 = 0, k2 = 0) {
      this.c = c;
      this.m = m2;
      this.y = y2;
      this.k = k2;
    }
    toString() {
      return `cmyk(${this.c},${this.m},${this.y},${this.k})`;
    }
  };
  var StandardColorPalette = {
    aliceBlue: "#f0f8ff",
    antiqueWhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedAlmond: "#ffebcd",
    blue: "#0000ff",
    blueViolet: "#8a2be2",
    brown: "#a52a2a",
    burlyWood: "#deb887",
    cadetBlue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerBlue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkBlue: "#00008b",
    darkCyan: "#008b8b",
    darkGoldenRod: "#b8860b",
    darkGray: "#a9a9a9",
    darkGreen: "#006400",
    darkKhaki: "#bdb76b",
    darkMagenta: "#8b008b",
    darkOliveGreen: "#556b2f",
    darkOrange: "#ff8c00",
    darkOrchid: "#9932cc",
    darkRed: "#8b0000",
    darkSalmon: "#e9967a",
    darkSeaGreen: "#8fbc8f",
    darkSlateBlue: "#483d8b",
    darkSlateGray: "#2f4f4f",
    darkTurquoise: "#00ced1",
    darkViolet: "#9400d3",
    deepPink: "#ff1493",
    deepSkyBlue: "#00bfff",
    dimGray: "#696969",
    dodgerBlue: "#1e90ff",
    fireBrick: "#b22222",
    floralWhite: "#fffaf0",
    forestGreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#DCDCDC",
    ghostWhite: "#F8F8FF",
    gold: "#ffd700",
    goldenRod: "#daa520",
    gray: "#808080",
    green: "#008000",
    greenYellow: "#adff2f",
    honeyDew: "#f0fff0",
    hotPink: "#ff69b4",
    indianRed: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderBlush: "#fff0f5",
    lawnGreen: "#7cfc00",
    lemonChiffon: "#fffacd",
    lightBlue: "#add8e6",
    lightCoral: "#f08080",
    lightCyan: "#e0ffff",
    lightGoldenRodYellow: "#fafad2",
    lightGray: "#d3d3d3",
    lightGreen: "#90ee90",
    lightPink: "#ffb6c1",
    lightSalmon: "#ffa07a",
    lightSeaGreen: "#20b2aa",
    lightSkyBlue: "#87cefa",
    lightSlateGray: "#778899",
    lightSteelBlue: "#b0c4de",
    lightYellow: "#ffffe0",
    lime: "#00ff00",
    limeGreen: "#32dc32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumAquaMarine: "#66cdaa",
    mediumBlue: "#0000cd",
    mediumOrchid: "#ba55d3",
    mediumPurple: "#9370db",
    mediumSeaGreen: "#3cb371",
    mediumSlateBlue: "#7b68ee",
    mediumSpringGreen: "#00fa9a",
    mediumTurquoise: "#48d1cc",
    mediumVioletRed: "#c71585",
    midnightBlue: "#191970",
    mintCream: "#f5fffa",
    mistyRose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajoWhite: "#ffdead",
    navy: "#000080",
    oldLace: "#fdd5e6",
    olive: "#808000",
    oliveDrab: "#6b8e23",
    orange: "#ffa500",
    orangeRed: "#ff4500",
    orchid: "#da70d6",
    paleGoldenRod: "#eee8aa",
    paleGreen: "#98fb98",
    paleTurquoise: "#afeeee",
    paleVioletRed: "#db7093",
    papayaWhip: "#ffefd5",
    peachPuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderBlue: "#b0e0e6",
    purple: "#800080",
    rebeccaPurple: "#663399",
    red: "#ff0000",
    rosyBrown: "#bc8f8f",
    royalBlue: "#4169e1",
    saddleBrown: "#8b4513",
    salmon: "#fa8072",
    sandyBrown: "#f4a460",
    seaGreen: "#2e8b57",
    seaShell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    slyBlue: "#87ceeb",
    slateBlue: "#6a5acd",
    slateGray: "#708090",
    snow: "#fffafa",
    springGreen: "#00ff7f",
    steelBlue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whiteSmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowGreen: "#9acd32"
  };
  var MetroColorPalette = {
    lime: "#a4c400",
    green: "#60a917",
    emerald: "#008a00",
    blue: "#00AFF0",
    teal: "#00aba9",
    cyan: "#1ba1e2",
    cobalt: "#0050ef",
    indigo: "#6a00ff",
    violet: "#aa00ff",
    pink: "#dc4fad",
    magenta: "#d80073",
    crimson: "#a20025",
    red: "#CE352C",
    orange: "#fa6800",
    amber: "#f0a30a",
    yellow: "#fff000",
    brown: "#825a2c",
    olive: "#6d8764",
    steel: "#647687",
    mauve: "#76608a",
    taupe: "#87794e"
  };
  var Palette = {
    color: function(name2, palette = StandardColorPalette, undefined_color = void 0) {
      return palette[name2] !== void 0 ? palette[name2] : undefined_color;
    },
    palette: function(palette = StandardColorPalette) {
      return Object.keys(palette);
    },
    colors: function(palette = StandardColorPalette) {
      return Object.values(palette);
    }
  };
  var Primitives$1 = {
    HSV,
    HSL,
    HSLA,
    RGB,
    RGBA,
    CMYK
  };
  var colorTypes = {
    HEX: "hex",
    RGB: "rgb",
    RGBA: "rgba",
    HSV: "hsv",
    HSL: "hsl",
    HSLA: "hsla",
    CMYK: "cmyk",
    UNKNOWN: "unknown"
  };
  var colorDefaultProps = {
    angle: 30,
    algorithm: 1,
    step: 0.1,
    distance: 5,
    tint1: 0.8,
    tint2: 0.4,
    shade1: 0.6,
    shade2: 0.3,
    alpha: 1,
    baseLight: "#ffffff",
    baseDark: "self"
  };
  function convert(source2, format) {
    let result;
    switch (format) {
      case "hex":
        result = source2.map(function(v2) {
          return toHEX(v2);
        });
        break;
      case "rgb":
        result = source2.map(function(v2) {
          return toRGB(v2);
        });
        break;
      case "rgba":
        result = source2.map(function(v2) {
          return toRGBA(v2, opt.alpha);
        });
        break;
      case "hsl":
        result = source2.map(function(v2) {
          return toHSL(v2);
        });
        break;
      case "hsla":
        result = source2.map(function(v2) {
          return toHSLA(v2, opt.alpha);
        });
        break;
      case "cmyk":
        result = source2.map(function(v2) {
          return toCMYK(v2);
        });
        break;
      default:
        result = source2;
    }
    return result;
  }
  function clamp(num, min, max) {
    return Math.max(min, Math.min(num, max));
  }
  function toRange(a2, b2, c) {
    return a2 < b2 ? b2 : a2 > c ? c : a2;
  }
  function shift(h7, s2) {
    h7 += s2;
    while (h7 >= 360) h7 -= 360;
    while (h7 < 0) h7 += 360;
    return h7;
  }
  var test = (color) => {
    const _isHEX = (color2) => /^#([A-Fa-f0-9]{3}){1,2}$/.test(color2);
    const _isRGB = (color2) => /^rgb\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(color2);
    const _isRGBA = (color2) => /^rgba\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)$/.test(color2);
    const _isHSV = (color2) => /^hsv\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(color2);
    const _isHSL = (color2) => /^hsl\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(color2);
    const _isHSLA = (color2) => /^hsla\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)$/.test(color2);
    const _isCMYK = (color2) => /^cmyk\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(color2);
    return _isHEX(color) || _isRGB(color) || _isHSV(color) || _isHSLA(color) || _isHSLA(color) || _isRGBA(color) || _isHSL(color) || _isCMYK(color);
  };
  var createColor = (colorType2 = "hex", from = "#000000") => {
    let baseColor;
    if (typeof from === "string") {
      baseColor = parseColor(from);
    }
    if (!isColor(baseColor)) {
      baseColor = "#000000";
    }
    return toColor(baseColor, colorType2.toLowerCase());
  };
  var create = createColor;
  var expandHexColor = function(hex) {
    if (isColor(hex) && typeof hex !== "string") {
      return hex;
    }
    if (typeof hex !== "string") {
      throw new Error("Value is not a string!");
    }
    if (hex[0] === "#" && hex.length === 4) {
      const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
      return "#" + hex.replace(shorthandRegex, (m2, r, g2, b2) => {
        return r + r + g2 + g2 + b2 + b2;
      });
    }
    return hex[0] === "#" ? hex : "#" + hex;
  };
  var expand = expandHexColor;
  var isDark = (color) => {
    color = parseColor(color);
    if (!isColor(color)) return;
    const rgb = toRGB(color);
    const YIQ = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    return YIQ < 128;
  };
  var isLight = (color) => {
    return !isDark(color);
  };
  var isHSV = (color) => {
    return parseColor(color) instanceof HSV;
  };
  var isHSL = (color) => {
    return parseColor(color) instanceof HSL;
  };
  var isHSLA = (color) => {
    return parseColor(color) instanceof HSLA;
  };
  var isRGB = (color) => {
    return parseColor(color) instanceof RGB;
  };
  var isRGBA = (color) => {
    return parseColor(color) instanceof RGBA;
  };
  var isCMYK = (color) => {
    return parseColor(color) instanceof CMYK;
  };
  var isHEX = (color) => {
    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);
  };
  var isColor = (color) => {
    if (!color) return false;
    if (typeof color === "string") {
      return test(color);
    }
    return isHEX(color) || isRGB(color) || isRGBA(color) || isHSV(color) || isHSL(color) || isHSLA(color) || isCMYK(color);
  };
  var colorType = (color) => {
    if (isHEX(color)) return colorTypes.HEX;
    if (isRGB(color)) return colorTypes.RGB;
    if (isRGBA(color)) return colorTypes.RGBA;
    if (isHSV(color)) return colorTypes.HSV;
    if (isHSL(color)) return colorTypes.HSL;
    if (isHSLA(color)) return colorTypes.HSLA;
    if (isCMYK(color)) return colorTypes.CMYK;
    return colorTypes.UNKNOWN;
  };
  var equal = (color1, color2) => {
    if (!isColor(color1) || !isColor(color2)) {
      return false;
    }
    return toHEX(color1) === toHEX(color2);
  };
  var colorToString = (color) => {
    return color.toString();
  };
  var hex2rgb = (hex) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(
      expandHexColor(hex)
    );
    const rgb = [
      parseInt(result[1], 16),
      parseInt(result[2], 16),
      parseInt(result[3], 16)
    ];
    return result ? new RGB(...rgb) : null;
  };
  var rgb2hex = (rgb) => {
    return "#" + ((1 << 24) + (rgb.r << 16) + (rgb.g << 8) + rgb.b).toString(16).slice(1);
  };
  var rgb2hsv = (rgb) => {
    const hsv = new HSV();
    let h7, s2, v2;
    const r = rgb.r / 255, g2 = rgb.g / 255, b2 = rgb.b / 255;
    const max = Math.max(r, g2, b2);
    const min = Math.min(r, g2, b2);
    const delta = max - min;
    v2 = max;
    if (max === 0) {
      s2 = 0;
    } else {
      s2 = 1 - min / max;
    }
    if (max === min) {
      h7 = 0;
    } else if (max === r && g2 >= b2) {
      h7 = 60 * ((g2 - b2) / delta);
    } else if (max === r && g2 < b2) {
      h7 = 60 * ((g2 - b2) / delta) + 360;
    } else if (max === g2) {
      h7 = 60 * ((b2 - r) / delta) + 120;
    } else if (max === b2) {
      h7 = 60 * ((r - g2) / delta) + 240;
    } else {
      h7 = 0;
    }
    hsv.h = h7;
    hsv.s = s2;
    hsv.v = v2;
    return hsv;
  };
  var hsv2rgb = (hsv) => {
    let r, g2, b2;
    const h7 = hsv.h, s2 = hsv.s * 100, v2 = hsv.v * 100;
    const Hi = Math.floor(h7 / 60);
    const Vmin = (100 - s2) * v2 / 100;
    const alpha = (v2 - Vmin) * (h7 % 60 / 60);
    const Vinc = Vmin + alpha;
    const Vdec = v2 - alpha;
    switch (Hi) {
      case 0:
        r = v2;
        g2 = Vinc;
        b2 = Vmin;
        break;
      case 1:
        r = Vdec;
        g2 = v2;
        b2 = Vmin;
        break;
      case 2:
        r = Vmin;
        g2 = v2;
        b2 = Vinc;
        break;
      case 3:
        r = Vmin;
        g2 = Vdec;
        b2 = v2;
        break;
      case 4:
        r = Vinc;
        g2 = Vmin;
        b2 = v2;
        break;
      case 5:
        r = v2;
        g2 = Vmin;
        b2 = Vdec;
        break;
    }
    return new RGB(
      Math.round(r * 255 / 100),
      Math.round(g2 * 255 / 100),
      Math.round(b2 * 255 / 100)
    );
  };
  var hsv2hex = (hsv) => {
    return rgb2hex(hsv2rgb(hsv));
  };
  var hex2hsv = (hex) => {
    return rgb2hsv(hex2rgb(hex));
  };
  var rgb2cmyk = (rgb) => {
    const cmyk = new CMYK();
    const r = rgb.r / 255;
    const g2 = rgb.g / 255;
    const b2 = rgb.b / 255;
    cmyk.k = Math.min(1 - r, 1 - g2, 1 - b2);
    cmyk.c = 1 - cmyk.k === 0 ? 0 : (1 - r - cmyk.k) / (1 - cmyk.k);
    cmyk.m = 1 - cmyk.k === 0 ? 0 : (1 - g2 - cmyk.k) / (1 - cmyk.k);
    cmyk.y = 1 - cmyk.k === 0 ? 0 : (1 - b2 - cmyk.k) / (1 - cmyk.k);
    cmyk.c = Math.round(cmyk.c * 100);
    cmyk.m = Math.round(cmyk.m * 100);
    cmyk.y = Math.round(cmyk.y * 100);
    cmyk.k = Math.round(cmyk.k * 100);
    return cmyk;
  };
  var cmyk2rgb = (cmyk) => {
    const r = Math.floor(255 * (1 - cmyk.c / 100) * (1 - cmyk.k / 100));
    const g2 = Math.ceil(255 * (1 - cmyk.m / 100) * (1 - cmyk.k / 100));
    const b2 = Math.ceil(255 * (1 - cmyk.y / 100) * (1 - cmyk.k / 100));
    return new RGB(r, g2, b2);
  };
  var hsv2hsl = (hsv) => {
    let h7, s2, l2, d2;
    h7 = parseInt(hsv.h);
    l2 = (2 - hsv.s) * hsv.v;
    s2 = hsv.s * hsv.v;
    if (l2 === 0) {
      s2 = 0;
    } else {
      d2 = l2 <= 1 ? l2 : 2 - l2;
      if (d2 === 0) {
        s2 = 0;
      } else {
        s2 /= d2;
      }
    }
    l2 /= 2;
    if (Number.isNaN(s2)) s2 = 0;
    if (Number.isNaN(l2)) l2 = 0;
    return new HSL(h7, s2, l2);
  };
  var hsl2hsv = (hsl) => {
    let h7, s2, v2, l2;
    h7 = hsl.h;
    l2 = hsl.l * 2;
    s2 = hsl.s * (l2 <= 1 ? l2 : 2 - l2);
    v2 = (l2 + s2) / 2;
    if (l2 + s2 === 0) {
      s2 = 0;
    } else {
      s2 = 2 * s2 / (l2 + s2);
    }
    return new HSV(h7, s2, v2);
  };
  var rgb2websafe = (rgb) => {
    return new RGB(
      Math.round(rgb.r / 51) * 51,
      Math.round(rgb.g / 51) * 51,
      Math.round(rgb.b / 51) * 51
    );
  };
  var rgba2websafe = (rgba) => {
    const rgbWebSafe = rgb2websafe(rgba);
    return new RGBA(rgbWebSafe.r, rgbWebSafe.g, rgbWebSafe.b, rgba.a);
  };
  var hex2websafe = (hex) => {
    return rgb2hex(rgb2websafe(hex2rgb(hex)));
  };
  var hsv2websafe = (hsv) => {
    return rgb2hsv(rgb2websafe(toRGB(hsv)));
  };
  var hsl2websafe = (hsl) => {
    return hsv2hsl(rgb2hsv(rgb2websafe(toRGB(hsl))));
  };
  var cmyk2websafe = (cmyk) => {
    return rgb2cmyk(rgb2websafe(cmyk2rgb(cmyk)));
  };
  var websafe = (color) => {
    if (isHEX(color)) return hex2websafe(color);
    if (isRGB(color)) return rgb2websafe(color);
    if (isRGBA(color)) return rgba2websafe(color);
    if (isHSV(color)) return hsv2websafe(color);
    if (isHSL(color)) return hsl2websafe(color);
    if (isCMYK(color)) return cmyk2websafe(color);
    return color;
  };
  var toColor = (color, mode = "rgb", alpha = 1) => {
    let result;
    switch (mode.toLowerCase()) {
      case "hex":
        result = toHEX(color);
        break;
      case "rgb":
        result = toRGB(color);
        break;
      case "rgba":
        result = toRGBA(color, alpha);
        break;
      case "hsl":
        result = toHSL(color);
        break;
      case "hsla":
        result = toHSLA(color, alpha);
        break;
      case "hsv":
        result = toHSV(color);
        break;
      case "cmyk":
        result = toCMYK(color);
        break;
      default:
        result = color;
    }
    return result;
  };
  var toHEX = (color) => {
    return typeof color === "string" && color[0] === "#" ? expandHexColor(color) : rgb2hex(toRGB(parse(color)));
  };
  var toRGB = (color) => {
    if (isRGB(color)) return color;
    if (isRGBA(color)) return new RGB(color.r, color.g, color.b);
    if (isHSV(color)) return hsv2rgb(color);
    if (isHSL(color)) return hsv2rgb(hsl2hsv(color));
    if (isHSLA(color)) return hsv2rgb(hsl2hsv(color));
    if (isHEX(color)) return hex2rgb(color);
    if (isCMYK(color)) return cmyk2rgb(color);
    throw new Error("Unknown color format!");
  };
  var toRGBA = (color, alpha = 1) => {
    if (isRGBA(color)) {
      if (alpha) {
        color.a = alpha;
      }
      return color;
    }
    const rgb = toRGB(color);
    return new RGBA(rgb.r, rgb.g, rgb.b, typeof color.a !== "undefined" ? color.a : alpha);
  };
  var toHSV = (color) => {
    return rgb2hsv(toRGB(color));
  };
  var toHSL = (color) => {
    return hsv2hsl(rgb2hsv(toRGB(color)));
  };
  var toHSLA = (color, alpha = 1) => {
    if (isHSLA(color)) {
      if (alpha) {
        color.a = alpha;
      }
      return color;
    }
    let hsla = hsv2hsl(rgb2hsv(toRGB(color)));
    hsla.a = typeof color.a !== "undefined" ? color.a : alpha;
    return new HSLA(hsla.h, hsla.s, hsla.l, hsla.a);
  };
  var toCMYK = (color) => {
    return rgb2cmyk(toRGB(color));
  };
  var grayscale = (color) => {
    const rgb = toRGB(color);
    const type = colorType(color).toLowerCase();
    const gray = Math.round(rgb.r * 0.2125 + rgb.g * 0.7154 + rgb.b * 0.0721);
    const mono = new RGB(gray, gray, gray);
    return toColor(mono, type);
  };
  var darken = (color, amount = 10) => {
    return lighten(color, -1 * Math.abs(amount));
  };
  var lighten = (color, amount = 10) => {
    let type, res, ring = amount > 0;
    const calc = function(_color, _amount) {
      let r, g2, b2;
      const col2 = _color.slice(1);
      const num = parseInt(col2, 16);
      r = (num >> 16) + _amount;
      if (r > 255) r = 255;
      else if (r < 0) r = 0;
      b2 = (num >> 8 & 255) + _amount;
      if (b2 > 255) b2 = 255;
      else if (b2 < 0) b2 = 0;
      g2 = (num & 255) + _amount;
      if (g2 > 255) g2 = 255;
      else if (g2 < 0) g2 = 0;
      return "#" + (g2 | b2 << 8 | r << 16).toString(16);
    };
    type = colorType(color).toLowerCase();
    if (type === colorTypes.RGBA) {
      color.a;
    }
    do {
      res = calc(toHEX(color), amount);
      ring ? amount-- : amount++;
    } while (res.length < 7);
    return toColor(res, type);
  };
  var hueShift = (color, angle, alpha = 1) => {
    const hsv = toHSV(color);
    const type = colorType(color).toLowerCase();
    let h7 = hsv.h;
    h7 += angle;
    while (h7 >= 360) h7 -= 360;
    while (h7 < 0) h7 += 360;
    hsv.h = h7;
    return toColor(hsv, type, alpha);
  };
  var mix = (color1, color2, amount) => {
    amount = amount === 0 ? 0 : amount || 50;
    const rgb = new RGB(0, 0, 0);
    const rgb1 = toRGB(color1);
    const rgb2 = toRGB(color2);
    const p3 = amount / 100;
    rgb.r = Math.round((rgb2.r - rgb1.r) * p3 + rgb1.r);
    rgb.g = Math.round((rgb2.g - rgb1.g) * p3 + rgb1.g);
    rgb.b = Math.round((rgb2.b - rgb1.b) * p3 + rgb1.b);
    return toHEX(rgb);
  };
  var multiply = (color1, color2) => {
    const rgb1 = toRGB(color1);
    const rgb2 = toRGB(color2);
    const rgb = new RGB();
    rgb1.b = Math.floor(rgb1.b * rgb2.b / 255);
    rgb1.g = Math.floor(rgb1.g * rgb2.g / 255);
    rgb1.r = Math.floor(rgb1.r * rgb2.r / 255);
    return toHEX(rgb);
  };
  var shade = (color, amount) => {
    if (!isColor(color)) {
      throw new Error(color + " is not a valid color value!");
    }
    amount /= 100;
    const type = colorType(color).toLowerCase();
    const rgb = toRGB(color);
    const t = amount < 0 ? 0 : 255;
    const p3 = amount < 0 ? amount * -1 : amount;
    let r, g2, b2, a2;
    r = Math.round((t - rgb.r) * p3) + rgb.r;
    g2 = Math.round((t - rgb.g) * p3) + rgb.g;
    b2 = Math.round((t - rgb.b) * p3) + rgb.b;
    if (type === colorTypes.RGBA || type === colorTypes.HSLA) {
      a2 = color.a;
    }
    return toColor(new RGB(r, g2, b2), type, a2);
  };
  var saturate = (color, amount) => {
    let hsl, type, alpha;
    if (!isColor(color)) {
      throw new Error(color + " is not a valid color value!");
    }
    hsl = toHSL(color);
    hsl.s += amount / 100;
    hsl.s = clamp(0, 1, hsl.s);
    type = colorType(color).toLowerCase();
    if (type === colorTypes.RGBA || type === colorTypes.HSLA) {
      alpha = color.a;
    }
    return toColor(hsl, type, alpha);
  };
  var desaturate = (color, amount) => {
    let hsl, type, alpha;
    if (!isColor(color)) {
      throw new Error(color + " is not a valid color value!");
    }
    hsl = toHSL(color);
    hsl.s -= amount / 100;
    hsl.s = clamp(hsl.s);
    type = colorType(color).toLowerCase();
    if (type === colorTypes.RGBA || type === colorTypes.HSLA) {
      alpha = color.a;
    }
    return toColor(hsl, type, alpha);
  };
  var spin = (color, amount) => {
    let hsl, type, alpha, hue;
    if (!isColor(color)) {
      throw new Error(color + " is not a valid color value!");
    }
    hsl = toHSL(color);
    hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    type = colorType(color).toLowerCase();
    if (type === colorTypes.RGBA || type === colorTypes.HSLA) {
      alpha = color.a;
    }
    return toColor(hsl, type, alpha);
  };
  var brighten = (color, amount) => {
    let rgb, type, alpha;
    if (!isColor(color)) {
      throw new Error(color + " is not a valid color value!");
    }
    rgb = toRGB(color);
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    type = colorType(color).toLowerCase();
    if (type === colorTypes.RGBA || type === colorTypes.HSLA) {
      alpha = color.a;
    }
    return toColor(rgb, type, alpha);
  };
  var add = (val1, val2, returnAs) => {
    const color1 = parse(val1);
    const color2 = parse(val2);
    const c1 = toRGBA(color1, void 0);
    const c2 = toRGBA(color2, void 0);
    const result = new RGBA();
    ("" + returnAs).toLowerCase() || "hex";
    result.r = Math.round((c1.r + c2.r) / 2);
    result.g = Math.round((c1.g + c2.g) / 2);
    result.b = Math.round((c1.b + c2.b) / 2);
    result.a = Math.round((c1.a + c2.a) / 2);
    return toColor(result, returnAs, result.a);
  };
  var createColorScheme = (color, name2, format = colorTypes.HEX, options) => {
    const opt2 = Object.assign({}, colorDefaultProps, options);
    let i3;
    const scheme = [];
    let hsv;
    let rgb, h7, s2, v2;
    hsv = toHSV(color);
    if (isHSV(hsv) === false) {
      console.warn("The value is a not supported color format!");
      return false;
    }
    h7 = hsv.h;
    s2 = hsv.s;
    v2 = hsv.v;
    switch (name2) {
      case "monochromatic":
      case "mono": {
        if (opt2.algorithm === 1) {
          rgb = hsv2rgb(hsv);
          rgb.r = toRange(
            Math.round(rgb.r + (255 - rgb.r) * opt2.tint1),
            0,
            255
          );
          rgb.g = toRange(
            Math.round(rgb.g + (255 - rgb.g) * opt2.tint1),
            0,
            255
          );
          rgb.b = toRange(
            Math.round(rgb.b + (255 - rgb.b) * opt2.tint1),
            0,
            255
          );
          scheme.push(rgb2hsv(rgb));
          rgb = hsv2rgb(hsv);
          rgb.r = toRange(
            Math.round(rgb.r + (255 - rgb.r) * opt2.tint2),
            0,
            255
          );
          rgb.g = toRange(
            Math.round(rgb.g + (255 - rgb.g) * opt2.tint2),
            0,
            255
          );
          rgb.b = toRange(
            Math.round(rgb.b + (255 - rgb.b) * opt2.tint2),
            0,
            255
          );
          scheme.push(rgb2hsv(rgb));
          scheme.push(hsv);
          rgb = hsv2rgb(hsv);
          rgb.r = toRange(Math.round(rgb.r * opt2.shade1), 0, 255);
          rgb.g = toRange(Math.round(rgb.g * opt2.shade1), 0, 255);
          rgb.b = toRange(Math.round(rgb.b * opt2.shade1), 0, 255);
          scheme.push(rgb2hsv(rgb));
          rgb = hsv2rgb(hsv);
          rgb.r = toRange(Math.round(rgb.r * opt2.shade2), 0, 255);
          rgb.g = toRange(Math.round(rgb.g * opt2.shade2), 0, 255);
          rgb.b = toRange(Math.round(rgb.b * opt2.shade2), 0, 255);
          scheme.push(rgb2hsv(rgb));
        } else if (opt2.algorithm === 2) {
          scheme.push(hsv);
          for (i3 = 1; i3 <= opt2.distance; i3++) {
            v2 = clamp(v2 - opt2.step, 0, 1);
            s2 = clamp(s2 - opt2.step, 0, 1);
            scheme.push({ h: h7, s: s2, v: v2 });
          }
        } else if (opt2.algorithm === 3) {
          scheme.push(hsv);
          for (i3 = 1; i3 <= opt2.distance; i3++) {
            v2 = clamp(v2 - opt2.step, 0, 1);
            scheme.push({ h: h7, s: s2, v: v2 });
          }
        } else {
          v2 = clamp(hsv.v + opt2.step * 2, 0, 1);
          scheme.push({ h: h7, s: s2, v: v2 });
          v2 = clamp(hsv.v + opt2.step, 0, 1);
          scheme.push({ h: h7, s: s2, v: v2 });
          scheme.push(hsv);
          s2 = hsv.s;
          v2 = hsv.v;
          v2 = clamp(hsv.v - opt2.step, 0, 1);
          scheme.push({ h: h7, s: s2, v: v2 });
          v2 = clamp(hsv.v - opt2.step * 2, 0, 1);
          scheme.push({ h: h7, s: s2, v: v2 });
        }
        break;
      }
      case "complementary":
      case "complement":
      case "comp": {
        scheme.push(hsv);
        h7 = shift(hsv.h, 180);
        scheme.push(new HSV(h7, s2, v2));
        break;
      }
      case "double-complementary":
      case "double-complement":
      case "double": {
        scheme.push(hsv);
        h7 = shift(h7, 180);
        scheme.push(new HSV(h7, s2, v2));
        h7 = shift(h7, opt2.angle);
        scheme.push(new HSV(h7, s2, v2));
        h7 = shift(h7, 180);
        scheme.push(new HSV(h7, s2, v2));
        break;
      }
      case "analogous":
      case "analog": {
        h7 = shift(h7, opt2.angle);
        scheme.push(new HSV(h7, s2, v2));
        scheme.push(hsv);
        h7 = shift(hsv.h, 0 - opt2.angle);
        scheme.push(new HSV(h7, s2, v2));
        break;
      }
      case "triadic":
      case "triad": {
        scheme.push(hsv);
        for (i3 = 1; i3 < 3; i3++) {
          h7 = shift(h7, 120);
          scheme.push(new HSV(h7, s2, v2));
        }
        break;
      }
      case "tetradic":
      case "tetra": {
        scheme.push(hsv);
        h7 = shift(hsv.h, 180);
        scheme.push(new HSV(h7, s2, v2));
        h7 = shift(hsv.h, -1 * opt2.angle);
        scheme.push(new HSV(h7, s2, v2));
        h7 = shift(h7, 180);
        scheme.push(new HSV(h7, s2, v2));
        break;
      }
      case "square": {
        scheme.push(hsv);
        for (i3 = 1; i3 < 4; i3++) {
          h7 = shift(h7, 90);
          scheme.push(new HSV(h7, s2, v2));
        }
        break;
      }
      case "split-complementary":
      case "split-complement":
      case "split": {
        h7 = shift(h7, 180 - opt2.angle);
        scheme.push(new HSV(h7, s2, v2));
        scheme.push(hsv);
        h7 = shift(hsv.h, 180 + opt2.angle);
        scheme.push(new HSV(h7, s2, v2));
        break;
      }
      case "material": {
        var baseLight = opt2.baseLight;
        var baseDark = opt2.baseDark === "self" || !opt2.baseDark ? multiply(color, color) : opt2.baseDark;
        scheme.push({
          "50": mix(baseLight, color, 10),
          "100": mix(baseLight, color, 30),
          "200": mix(baseLight, color, 50),
          "300": mix(baseLight, color, 70),
          "400": mix(baseLight, color, 85),
          "500": mix(baseLight, color, 100),
          "600": mix(baseDark, color, 92),
          "700": mix(baseDark, color, 83),
          "800": mix(baseDark, color, 74),
          "900": mix(baseDark, color, 65),
          "A100": lighten(saturate(mix(baseDark, color, 15), 80), 65),
          "A200": lighten(saturate(mix(baseDark, color, 15), 80), 55),
          "A400": lighten(saturate(mix(baseLight, color, 100), 55), 10),
          "A700": lighten(saturate(mix(baseDark, color, 83), 65), 10)
        });
        break;
      }
      default:
        console.error("Unknown scheme name");
    }
    return name2 === "material" ? scheme[0] : convert(scheme, format);
  };
  var parseColor = function(color) {
    let _color = ("" + color).toLowerCase();
    if (typeof StandardColorPalette[_color] !== "undefined") {
      _color = StandardColorPalette[_color];
    }
    if (typeof MetroColorPalette[_color] !== "undefined") {
      _color = MetroColorPalette[_color];
    }
    let a2 = _color.replace(/[^\d.,%]/g, "").split(",").map((v2) => isNaN(v2) ? v2 : +v2);
    if (_color[0] === "#") {
      return expandHexColor(_color);
    }
    if (_color.includes("rgba")) {
      return new RGBA(a2[0], a2[1], a2[2], a2[3]);
    }
    if (_color.includes("rgb")) {
      return new RGB(a2[0], a2[1], a2[2]);
    }
    if (_color.includes("cmyk")) {
      return new CMYK(a2[0], a2[1], a2[2], a2[3]);
    }
    if (_color.includes("hsv")) {
      return new HSV(a2[0], a2[1], a2[2]);
    }
    if (_color.includes("hsla")) {
      return new HSLA(a2[0], a2[1], a2[2], a2[3]);
    }
    if (_color.includes("hsl")) {
      return new HSL(a2[0], a2[1], a2[2]);
    }
    return _color;
  };
  var parse = parseColor;
  var randomColor = (colorType2 = "hex", alpha = 1) => {
    const rnd = (min, max) => Math.floor(min + Math.random() * (max + 1 - min));
    let hex, r, g2, b2;
    r = rnd(0, 255);
    g2 = rnd(0, 255);
    b2 = rnd(0, 255);
    hex = "#" + ((1 << 24) + (r << 16) + (g2 << 8) + b2).toString(16).slice(1);
    return colorType2 === "hex" ? hex : toColor(hex, colorType2, alpha);
  };
  var random = randomColor;
  var routines = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Primitives: Primitives$1,
    colorTypes,
    colorDefaultProps,
    test,
    createColor,
    create,
    expandHexColor,
    expand,
    isDark,
    isLight,
    isHSV,
    isHSL,
    isHSLA,
    isRGB,
    isRGBA,
    isCMYK,
    isHEX,
    isColor,
    colorType,
    equal,
    colorToString,
    hex2rgb,
    rgb2hex,
    rgb2hsv,
    hsv2rgb,
    hsv2hex,
    hex2hsv,
    rgb2cmyk,
    cmyk2rgb,
    hsv2hsl,
    hsl2hsv,
    rgb2websafe,
    rgba2websafe,
    hex2websafe,
    hsv2websafe,
    hsl2websafe,
    cmyk2websafe,
    websafe,
    toColor,
    toHEX,
    toRGB,
    toRGBA,
    toHSV,
    toHSL,
    toHSLA,
    toCMYK,
    grayscale,
    darken,
    lighten,
    hueShift,
    mix,
    multiply,
    shade,
    saturate,
    desaturate,
    spin,
    brighten,
    add,
    createColorScheme,
    parseColor,
    parse,
    randomColor,
    random
  });
  var Farbe2 = class {
    /**
     * Private method for setting value. Do not use outside
     * @param {*} color
     * @private
     */
    _setValue(color) {
      if (!color) {
        color = "#000000";
      }
      if (typeof color === "string") {
        color = parseColor(color);
      }
      if (color && isColor(color)) {
        this._value = color;
      } else {
        this._value = void 0;
      }
    }
    /**
     * Private method for setting options
     * @param options
     * @private
     */
    _setOptions(options) {
      this._options = Object.assign({}, colorDefaultProps, options);
    }
    /**
     * Constructor
     * @param {*} color. Set color value. Value must one of: hex, RGB, RGBA, HSL, HSLA, HSV, CMYK.
     * @param {Object} options
     */
    constructor(color = "#000000", options = null) {
      this._setValue(color);
      this._setOptions(options);
    }
    /**
     * Getter. Get options
     * @returns {{shade1: number, shade2: number, tint1: number, tint2: number, distance: number, alpha: number, angle: number, step: number, algorithm: number}}
     */
    get options() {
      return this._options;
    }
    /**
     * Setter. Set options. Will override default options
     * @param options
     */
    set options(options) {
      this._setOptions(options);
    }
    /**
     * Getter. Return current color value.
     * @returns {*}
     */
    get value() {
      return this._value ? this._value : void 0;
    }
    /**
     * Setter. Set color value. Value must one of: hex, RGB, RGBA, HSL, HSLA, HSV, CMYK.
     * @param {*} color
     */
    set value(color) {
      this._setValue(color);
    }
    /**
     * Convert current color to RGB
     * @returns {this | undefined}
     */
    toRGB() {
      if (!this._value) {
        return;
      }
      this._value = toRGB(this._value);
      return this;
    }
    /**
     * Getter.  Get color in RGB format
     * @returns {RGB | undefined}
     */
    get rgb() {
      return this._value ? toRGB(this._value) : void 0;
    }
    /**
     * Convert current value to RGBA
     * @param alpha - Alpha chanel value.
     * @returns {this | undefined}
     */
    toRGBA(alpha) {
      if (!this._value) {
        return;
      }
      if (isRGBA(this._value)) {
        if (alpha) {
          this._value = toRGBA(this._value, alpha);
        }
      } else {
        this._value = toRGBA(
          this._value,
          alpha || colorDefaultProps.alpha
        );
      }
      return this;
    }
    /**
     * Getter. Get value in RGBA format. For alpha chanel value used options.alpha
     * @returns {RGBA | undefined}
     */
    get rgba() {
      return this._value ? isRGBA(this._value) ? this._value : toRGBA(this._value, this._options.alpha) : void 0;
    }
    /**
     * Convert current value to HEX
     * @returns {this | undefined}
     */
    toHEX() {
      if (!this._value) {
        return;
      }
      this._value = toHEX(this._value);
      return this;
    }
    /**
     * Getter. Get value as HEX
     * @returns {string | undefined}
     */
    get hex() {
      return this._value ? toHEX(this._value) : void 0;
    }
    /**
     * Convert current value to HSV
     * @returns {this | undefined}
     */
    toHSV() {
      if (!this._value) {
        return;
      }
      this._value = toHSV(this._value);
      return this;
    }
    /**
     * Getter. Get value as HSV
     * @returns {HSV | undefined}
     */
    get hsv() {
      return this._value ? toHSV(this._value) : void 0;
    }
    /**
     * Convert current value to HSL
     * @returns {this | undefined}
     */
    toHSL() {
      if (!this._value) {
        return;
      }
      this._value = toHSL(this._value);
      return this;
    }
    /**
     * Getter. Get value as HSL
     * @returns {HSL | undefined}
     */
    get hsl() {
      return this._value ? toHSL(this._value) : void 0;
    }
    /**
     * Convert current value to HSV
     * @param alpha
     * @returns {this | undefined}
     */
    toHSLA(alpha) {
      if (!this._value) {
        return;
      }
      if (isHSLA(this._value)) {
        if (alpha) {
          this._value = toHSLA(this._value, alpha);
        }
      } else {
        this._value = toHSLA(this._value, alpha);
      }
      return this;
    }
    /**
     * Getter. Get value as HSLA. For alpha used options.alpha
     * @returns {HSLA | undefined}
     */
    get hsla() {
      return this._value ? isHSLA(this._value) ? this._value : toHSLA(this._value, this._options.alpha) : void 0;
    }
    /**
     * Convert current value to CMYK
     * @returns {this | undefined}
     */
    toCMYK() {
      if (!this._value) {
        return;
      }
      this._value = toCMYK(this._value);
      return this;
    }
    /**
     * Getter. Get value as CMYK
     * @returns {CMYK | undefined}
     */
    get cmyk() {
      return this._value ? toCMYK(this._value) : void 0;
    }
    /**
     * Convert color value to websafe value
     * @returns {this | undefined}
     */
    toWebsafe() {
      if (!this._value) {
        return;
      }
      this._value = websafe(this._value);
      return this;
    }
    /**
     * Getter. Get value as websafe.
     * @returns {HSLA | undefined}
     */
    get websafe() {
      return this._value ? websafe(this._value) : void 0;
    }
    /**
     * Get stringify color value
     * @returns {string} This function return string presentation of color. Example: for RGB will return rgb(x, y, z)
     */
    toString() {
      return this._value ? colorToString(this._value) : void 0;
    }
    /**
     * Darken color for requested percent value
     * @param {int} amount - Value must between 0 and 100. Default value is 10
     * @returns {this | undefined}
     */
    darken(amount = 10) {
      if (!this._value) {
        return;
      }
      this._value = darken(this._value, amount);
      return this;
    }
    /**
     * Darken color for requested percent value
     * @param {int} amount - Value must between 0 and 100. Default value is 10
     * @returns {this | undefined}
     */
    lighten(amount = 10) {
      if (!this._value) {
        return;
      }
      this._value = lighten(this._value, amount);
      return this;
    }
    /**
     * Return true, if current color id dark
     * @returns {boolean|undefined}
     */
    isDark() {
      return this._value ? isDark(this._value) : void 0;
    }
    /**
     * Return true, if current color id light
     * @returns {boolean|undefined}
     */
    isLight() {
      return this._value ? isLight(this._value) : void 0;
    }
    /**
     * Change value on wheel with specified angle
     * @param {int} angle - Value between -360 and 360
     */
    hueShift(angle) {
      if (!this._value) {
        return;
      }
      this._value = hueShift(this._value, angle);
      return this;
    }
    /**
     * Convert color value to grayscale value
     * @returns {this | undefined}
     */
    grayscale() {
      if (!this._value || this.type === colorTypes.UNKNOWN) {
        return;
      }
      this._value = grayscale(
        this._value,
        ("" + this.type).toLowerCase()
      );
      return this;
    }
    /**
     * Getter. Get color type
     * @returns {string}
     */
    get type() {
      return colorType(this._value);
    }
    /**
     * Create specified  color scheme for current color value
     * @param {string} name - Scheme name
     * @param {string} format - Format for returned values
     * @param {Object} options - Options for generated schema, will override default options
     * @returns {Array | undefined}
     */
    getScheme(name2, format, options) {
      return this._value ? createColorScheme(this._value, name2, format, options) : void 0;
    }
    /**
     * Check if color is equal to comparison color
     * @param {*} color
     * @returns {boolean}
     */
    equal(color) {
      return equal(this._value, color);
    }
    random(colorType2, alpha) {
      this._value = randomColor(colorType2, alpha);
    }
    channel(ch, val) {
      const currentType = this.type;
      if (["red", "green", "blue"].includes(ch)) {
        this.toRGB();
        this._value[["red", "green", "blue"].indexOf(ch)] = val;
        this["to" + currentType]();
      }
      if (ch === "alpha" && this._value.a) {
        this._value.a = val;
      }
      if (["hue", "saturation", "value"].includes(ch)) {
        this.toHSV();
        this._value[["hue", "saturation", "value"].indexOf(ch)] = val;
        this["to" + currentType]();
      }
      if (["lightness"].includes(ch)) {
        this.toHSL();
        this._value[2] = val;
        this["to" + currentType]();
      }
      if (["cyan", "magenta", "yellow", "black"].includes(ch)) {
        this.toCMYK();
        this._value[["cyan", "magenta", "yellow", "black"].indexOf(ch)] = val;
        this["to" + currentType]();
      }
      return this;
    }
    add(color) {
      this._setValue(add(this._value, color));
    }
    mix(color, amount) {
      this._setValue(mix(this._value, color, amount));
    }
    multiply(color) {
      this._setValue(multiply(this._value, color));
    }
    shade(amount) {
      this._setValue(shade(this._value, amount));
    }
    saturate(amount) {
      this._setValue(saturate(this._value, amount));
    }
    desaturate(amount) {
      this._setValue(desaturate(this._value, amount));
    }
    spin(amount) {
      this._setValue(spin(this._value, amount));
    }
    brighten(amount) {
      this._setValue(brighten(this._value, amount));
    }
  };
  var Primitives = {
    ...Primitives$1
  };
  var version4 = "1.0.4";
  var build_time4 = "11.08.2024, 23:47:03";
  var info4 = () => {
    console.info(`%c Farbe %c v${version4} %c ${build_time4} `, "color: #ffffff; font-weight: bold; background: #ff00ff", "color: white; background: darkgreen", "color: white; background: #0080fe;");
  };

  // source/farbe/index.js
  globalThis.Farbe = Farbe2;
  globalThis.farbe = (c) => new Farbe2(c);
  globalThis.Farbe.Routines = routines;
  globalThis.Farbe.Palette = Palette;
  globalThis.Farbe.StandardColors = StandardColorPalette;
  globalThis.Farbe.MetroColors = MetroColorPalette;
  globalThis.Farbe.Primitives = Primitives;
  globalThis.Farbe.info = info4;

  // node_modules/@olton/html/dist/html.esm.js
  function dashedName2(str3) {
    return str3.replace(/([A-Z])/g, function(u2) {
      return "-" + u2.toLowerCase();
    });
  }
  function setClasses(src = []) {
    return Array.isArray(src) ? src.join(" ") : src.toString();
  }
  var numProps2 = ["opacity", "zIndex", "order", "zoom"];
  function setStyles(src = {}) {
    return typeof src === "string" ? src : Object.keys(src).map((key) => {
      const propName = dashedName2(key);
      let propVal = src[key];
      if (!numProps2.includes(propName) && !isNaN(propVal)) {
        propVal += "px";
      }
      return `${propName}: ${propVal}`;
    }).join(";");
  }
  var globalAttributes = [
    "accesskey",
    "autocapitalize",
    "autofocus",
    "contenteditable",
    "dir",
    "draggable",
    "enterkeyhint",
    "hidden",
    "inert",
    "inputmode",
    "is",
    "itemid",
    "itemprop",
    "itemref",
    "itemscope",
    "itemtype",
    "lang",
    "nonce",
    "popover",
    "spellcheck",
    "style",
    "tabindex",
    "title",
    "translate",
    "writingsuggestions"
  ];
  var htmlParser = (str3) => {
    let base2, singleTag, result = [], ctx, _context;
    let regexpSingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    if (typeof str3 !== "string") {
      return void 0;
    }
    str3 = str3.trim();
    ctx = document.implementation.createHTMLDocument("");
    base2 = ctx.createElement("base");
    base2.href = document.location.href;
    ctx.head.appendChild(base2);
    _context = ctx.body;
    singleTag = regexpSingleTag.exec(str3);
    if (singleTag) {
      return document.createElement(singleTag[1]);
    } else {
      _context.innerHTML = str3;
      for (let i3 = 0; i3 < _context.childNodes.length; i3++) {
        result.push(_context.childNodes[i3]);
      }
    }
    return result[0];
  };
  var eventsList = [
    "onauxclick",
    "onbeforeinput",
    "onbeforematch",
    "onbeforetoggle",
    "onblur",
    "oncancel",
    "oncanplay",
    "oncanplaythrough",
    "onchange",
    "onclick",
    "onclose",
    "oncontextlost",
    "oncontextmenu",
    "oncontextrestored",
    "oncopy",
    "oncuechange",
    "oncut",
    "ondblclick",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onended",
    "onerror",
    "onfocus",
    "onformdata",
    "oninput",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onload",
    "onloadeddata",
    "onloadedmetadata",
    "onloadstart",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onpaste",
    "onpause",
    "onplay",
    "onplaying",
    "onprogress",
    "onratechange",
    "onreset",
    "onresize",
    "onscroll",
    "onscrollend",
    "onsecuritypolicyviolation",
    "onseeked",
    "onseeking",
    "onselect",
    "onslotchange",
    "onstalled",
    "onsubmit",
    "onsuspend",
    "ontimeupdate",
    "ontoggle",
    "onvolumechange",
    "onwaiting",
    "onwheel"
  ];
  var BaseElement = class {
    constructor(options = {}) {
      this.options = options;
      this.tag = "div";
    }
    selfAttributes() {
      return [];
    }
    get attributes() {
      return this.getAttributes().join(" ");
    }
    getAttributes() {
      let attr = [], single = ["hidden", "disabled", "required", "readonly", "selected", "open", "multiply", "default"], service = ["className", "style", "data", "tag", "events"];
      for (let key in this.options) {
        if (service.includes(key))
          continue;
        if (single.includes(key) && this.options[key] === true) {
          attr.push(key);
          continue;
        }
        if (this.selfAttributes().includes(key) && !attr.includes(key) || globalAttributes.includes(key)) {
          attr.push(`${key}="${this.options[key]}"`);
        }
      }
      if (this.classes) attr.push(`class="${this.classes}"`);
      if (this.styles) attr.push(`style="${this.styles}"`);
      if (this.dataSet) attr.push(this.dataSet);
      if (this.aria) attr.push(this.aria);
      return attr;
    }
    draw() {
      return this.template();
    }
    get dataSet() {
      const { data: data2 = {} } = this.options;
      let _2 = [];
      for (let key in data2) {
        _2.push(`data-${dashedName2(key)}="${data2[key]}"`);
      }
      return _2.join(" ");
    }
    get aria() {
      const { aria = {} } = this.options;
      let _2 = [];
      for (let key in aria) {
        _2.push(`aria-${key.toLowerCase()}="${aria[key]}"`);
      }
      return _2.join(" ");
    }
    get events() {
      const { events = {}, control = true } = this.options;
      let eventsArray = [];
      for (let key in events) {
        if (control && !eventsList.includes(key)) {
          console.info(`Event ${key} for element ${this.tag} not specified in HTML specification`);
        }
        eventsArray.push(`${key.toLowerCase()}="${events[key]}"`);
      }
      return eventsArray.join(" ");
    }
    get classes() {
      return setClasses(this.options.class);
    }
    get styles() {
      return setStyles(this.options.style);
    }
    template() {
      return ``;
    }
    toString() {
      return this.draw();
    }
    toElement() {
      return htmlParser(this.draw());
    }
  };
  var parser = (element2) => {
    if (Array.isArray(element2)) {
      return element2.map(parser).join("\n");
    } else if (typeof element2 === "string" || typeof element2 === "number" || typeof element2 === "boolean") {
      return element2;
    } else if (element2.draw) {
      return element2.draw();
    }
    throw new Error("Unknown element! " + element2);
  };
  var Tag = class extends BaseElement {
    constructor(...args) {
      let options = {};
      let children = [];
      for (let a2 of args) {
        if (typeof a2 === "object" && !(a2 instanceof BaseElement)) {
          options = a2;
        } else {
          children.push(a2);
        }
      }
      super(options);
      this.children = children;
    }
    template(content) {
      const tag = this.options.tag ? this.options.tag : this.tag;
      return `
            <${tag} ${this.attributes} ${this.events}>${content}</${tag}>
        `;
    }
    draw() {
      return this.template(this.children.map(parser).join(""));
    }
  };
  var SingleTag = class extends BaseElement {
    constructor(options = {}) {
      super(options);
      this.options = options;
    }
    template() {
      const tag = this.options.tag ? this.options.tag : this.tag;
      return `
            <${tag} ${this.attributes} ${this.events}/>
        `;
    }
  };
  var render = (view = [], renderTo = document.body, options = {}) => {
    let html2, renderPoint;
    const { clear = true, where = "beforeend" } = options;
    renderPoint = typeof renderTo === "string" ? document.querySelector(renderTo) : renderTo;
    if (!(renderPoint instanceof HTMLElement)) {
      renderPoint = document.body;
    }
    if (clear) {
      renderPoint.innerHTML = "";
    }
    if (!Array.isArray(view)) {
      view = [view];
    }
    html2 = view.map(parser).join("");
    renderPoint.insertAdjacentHTML(where, html2);
  };
  var createStyleElement = (content = "", media) => {
    let style = document.createElement("style");
    if (media !== void 0) {
      style.setAttribute("media", media);
    }
    style.appendChild(document.createTextNode(content));
    document.head.appendChild(style);
    return style;
  };
  var createStyleSheet = (media) => {
    return createStyleElement(media).sheet;
  };
  var addCssRule = (sheet, selector, rules) => {
    sheet.insertRule(selector + "{" + rules + "}");
  };
  var addStyle = (style, media) => {
    if (typeof style === "string") {
      createStyleElement(style, media);
      return;
    }
    const sheet = createStyleSheet(media);
    for (let key in style) {
      addCssRule(sheet, key, setStyles(style[key]));
    }
  };
  var cssLoader = async (path, options) => {
    let response = await fetch(path, options), textNode, tag;
    if (!response.ok) {
      throw new Error("HTTP error: " + response.status);
    }
    textNode = await response.text();
    tag = document.createElement("style");
    tag.appendChild(document.createTextNode(textNode));
    document.body.appendChild(tag);
  };
  var jsLoader = async (path, options) => {
    let response = await fetch(path, options), textNode, tag;
    if (!response.ok) {
      throw new Error("HTTP error: " + response.status);
    }
    textNode = await response.text();
    tag = document.createElement("script");
    tag.appendChild(document.createTextNode(textNode));
    document.body.appendChild(tag);
  };
  var viewLoader = async (path, options = {}, storage = false) => {
    let response, textNode, result = () => {
    }, storageKey;
    if (storage !== false) {
      storageKey = `html::key::${path}`;
      textNode = localStorage.getItem(storageKey);
    }
    if (!textNode) {
      response = await fetch(path, options);
      if (!response.ok) {
        throw new Error("HTTP error: " + response.status);
      }
      textNode = await response.text();
      if (storage !== false) {
        localStorage.setItem(storageKey, textNode);
      }
    }
    const eval2 = eval;
    eval2(`result = ${textNode}`);
    return typeof result === "function" ? result() : result;
  };
  var clearViewStorageHolder = (path) => localStorage.removeItem(`html::key::${path}`);
  var Html2 = class extends Tag {
    tag = "html";
    selfAttributes() {
      return ["lang"];
    }
  };
  var html = (...args) => new Html2(...args);
  var Head = class extends Tag {
    tag = "head";
  };
  var head = (...args) => new Head(...args);
  var Base = class extends SingleTag {
    tag = "base";
    selfAttributes() {
      return ["href", "target"];
    }
  };
  var base = (options) => new Base(options);
  var Link = class extends SingleTag {
    tag = "link";
    selfAttributes() {
      return ["href", "crossorigin", "rel", "media", "integrity", "hreflang", "type", "referrerpolicy", "sizes", "imagesrcset", "imagesizes", "as", "blocking", "color", "disabled", "fetchpriority"];
    }
  };
  var link = (options) => new Link(options);
  var Body = class extends Tag {
    tag = "body";
  };
  var body = (...args) => new Body(...args);
  var Span = class extends Tag {
    tag = "span";
  };
  var span = (...args) => new Span(...args);
  var Img = class extends SingleTag {
    tag = "img";
    selfAttributes() {
      return ["align", "alt", "border", "height", "hspace", "ismap", "longdesc", "lowsrc", "src", "vspace", "width", "usemap"];
    }
  };
  var img = (src = "", alt = "", options = {}) => new Img({ ...options, src, alt });
  var Input = class extends SingleTag {
    tag = "input";
    selfAttributes() {
      return [
        "accept",
        "align",
        "alt",
        "autocomplete",
        "autofocus",
        "border",
        "checked",
        "disabled",
        "form",
        "formaction",
        "formenctype",
        "formmethod",
        "formnovalidate",
        "formtarget",
        "list",
        "max",
        "maxlength",
        "min",
        "multiple",
        "name",
        "pattern",
        "placeholder",
        "size",
        "src",
        "step",
        "type",
        "value"
      ];
    }
  };
  var input = (options = {}) => new Input(options);
  var Br = class extends SingleTag {
    tag = "br";
    selfAttributes() {
      return ["clear"];
    }
  };
  var br = (options) => new Br(options);
  var Hr = class extends SingleTag {
    tag = "hr";
  };
  var hr = (options) => new Hr(options);
  var Heading = class extends Tag {
    constructor(tag = "h1", ...args) {
      super(...args);
      this.tag = tag;
    }
  };
  var heading = (tag = "h1", ...args) => new Heading(tag, ...args);
  var h1 = (...args) => heading("h1", ...args);
  var h2 = (...args) => heading("h2", ...args);
  var h3 = (...args) => heading("h3", ...args);
  var h4 = (...args) => heading("h4", ...args);
  var h5 = (...args) => heading("h5", ...args);
  var h6 = (...args) => heading("h6", ...args);
  var Section = class extends Tag {
    tag = "section";
  };
  var section = (...args) => new Section(...args);
  var Anchor = class extends Tag {
    tag = "a";
    selfAttributes() {
      return ["coords", "download", "hreflang", "name", "rel", "rev", "shape", "target", "type", "href"];
    }
  };
  var anchor = (...args) => new Anchor(...args);
  var a = (...args) => new Anchor(...args);
  var Abbr = class extends Tag {
    tag = "abbr";
  };
  var abbr = (...args) => new Abbr(...args);
  var Article = class extends Tag {
    tag = "article";
  };
  var article = (...args) => new Article(...args);
  var Nav = class extends Tag {
    tag = "nav";
  };
  var nav = (...args) => new Nav(...args);
  var Aside = class extends Tag {
    tag = "aside";
  };
  var aside = (...args) => new Aside(...args);
  var Header = class extends Tag {
    tag = "header";
  };
  var header = (...args) => new Header(...args);
  var Footer = class extends Tag {
    tag = "footer";
  };
  var footer = (...args) => new Footer(...args);
  var Address = class extends Tag {
    tag = "address";
  };
  var address = (...args) => new Address(...args);
  var Map2 = class extends Tag {
    tag = "map";
    selfAttributes() {
      return ["name"];
    }
  };
  var map = (...args) => new Map2(...args);
  var Area = class extends SingleTag {
    tag = "area";
    selfAttributes() {
      return ["alt", "coords", "hreflang", "nohref", "shape", "target", "type", "href"];
    }
  };
  var area = (options = {}) => new Area(options);
  var AudioTag = class extends Tag {
    tag = "audio";
    selfAttributes() {
      return ["autoplay", "controls", "loop", "preload", "src"];
    }
  };
  var audio = (...args) => new AudioTag(...args);
  var Bold = class extends Tag {
    tag = "b";
  };
  var bold = (...args) => new Bold(...args);
  var Bdi = class extends Tag {
    tag = "bdi";
  };
  var bdi = (...args) => new Bdi(...args);
  var Bdo = class extends Tag {
    tag = "bdo";
  };
  var bdo = (...args) => new Bdo(...args);
  var Blockquote = class extends Tag {
    tag = "blockquote";
    selfAttributes() {
      return ["cite"];
    }
  };
  var blockquote = (...args) => new Blockquote(...args);
  var Button = class extends Tag {
    tag = "button";
    selfAttributes() {
      return ["autofocus", "form", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "name", "type", "value"];
    }
  };
  var button = (...args) => new Button(...args);
  var Canvas = class extends Tag {
    tag = "canvas";
    selfAttributes() {
      return ["width", "height"];
    }
  };
  var canvas = (...args) => new Canvas(...args);
  var Table = class extends Tag {
    tag = "table";
    selfAttributes() {
      return [
        "align",
        "background",
        "bgcolor",
        "border",
        "bordercolor",
        "cellpadding",
        "cellspacing",
        "cols",
        "frame",
        "height",
        "rules",
        "summary",
        "width"
      ];
    }
  };
  var table = (...args) => new Table(...args);
  var Caption = class extends Tag {
    tag = "caption";
    selfAttributes() {
      return ["align", "valign"];
    }
  };
  var caption = (...args) => new Caption(...args);
  var Col = class extends SingleTag {
    tag = "col";
    selfAttributes() {
      return ["align", "valign", "char", "charoff", "span", "width"];
    }
  };
  var col = (options) => new Col(options);
  var Colgroup = class extends SingleTag {
    tag = "colgroup";
    selfAttributes() {
      return ["align", "valign", "char", "charoff", "span", "width"];
    }
  };
  var colgroup = (options) => new Colgroup(options);
  var TableSection = class extends Tag {
    constructor(tag = "tbody", ...args) {
      super(...args);
      this.tag = tag;
    }
    selfAttributes() {
      return ["align", "valign", "char", "charoff", "bgcolor"];
    }
  };
  var tbody = (...args) => new TableSection("tbody", ...args);
  var thead = (...args) => new TableSection("thead", ...args);
  var tfoot = (...args) => new TableSection("tfoot", ...args);
  var TableRow = class extends Tag {
    tag = "tr";
    selfAttributes() {
      return ["align", "bgcolor", "bordercolor", "char", "charoff", "valign"];
    }
  };
  var tr = (...args) => new TableRow(...args);
  var TableCell = class extends Tag {
    constructor(tag = "td", ...args) {
      super(...args);
      this.tag = tag;
    }
    selfAttributes() {
      return ["abbr", "align", "axis", "background", "bgcolor", "bordercolor", "char", "charoff", "colspan", "headers", "height", "nowrap", "rowspan", "scope", "valign", "width"];
    }
  };
  var th = (...args) => new TableCell("th", ...args);
  var td = (...args) => new TableCell("td", ...args);
  var Cite = class extends Tag {
    tag = "cite";
  };
  var cite = (...args) => new Cite(...args);
  var Code = class extends Tag {
    tag = "code";
  };
  var code = (...args) => new Code(...args);
  var Dl = class extends Tag {
    tag = "dl";
  };
  var Dt = class extends Tag {
    tag = "dt";
  };
  var Dd = class extends Tag {
    tag = "dd";
  };
  var dl = (...args) => new Dl(...args);
  var dt = (...args) => new Dt(...args);
  var dd = (...args) => new Dd(...args);
  var Details = class extends Tag {
    tag = "details";
  };
  var details = (...args) => new Details(...args);
  var Summary = class extends Tag {
    tag = "summary";
  };
  var summary = (...args) => new Summary(...args);
  var Dfn = class extends Tag {
    tag = "dfn";
  };
  var dfn = (...args) => new Dfn(...args);
  var Div = class extends Tag {
    tag = "div";
    selfAttributes() {
      return ["align", "title"];
    }
  };
  var div = (...args) => new Div(...args);
  var Em = class extends Tag {
    tag = "em";
  };
  var em = (...args) => new Em(...args);
  var Ital = class extends Tag {
    tag = "i";
  };
  var ital = (...args) => new Ital(...args);
  var i = (...args) => new Ital(...args);
  var Strong = class extends Tag {
    tag = "strong";
  };
  var strong = (...args) => new Strong(...args);
  var Embed = class extends Tag {
    tag = "embed";
    selfAttributes() {
      return ["align", "height", "hspace", "pluginspace", "src", "type", "vspace", "width"];
    }
  };
  var embed = (...args) => new Embed(...args);
  var NoEmbed = class extends Tag {
    tag = "noembed";
  };
  var noembed = (...args) => new NoEmbed(...args);
  var Fieldset = class extends Tag {
    tag = "fieldset";
    selfAttributes() {
      return ["form", "title"];
    }
  };
  var fieldset = (...args) => new Fieldset(...args);
  var Legend = class extends Tag {
    tag = "legend";
    selfAttributes() {
      return ["align", "title"];
    }
  };
  var legend = (...args) => new Legend(...args);
  var Figure = class extends Tag {
    tag = "figure";
  };
  var figure = (...args) => new Figure(...args);
  var FigCaption = class extends Tag {
    tag = "figcaption";
  };
  var figcaption = (...args) => new FigCaption(...args);
  var Form = class extends Tag {
    tag = "form";
    selfAttributes() {
      return ["accept-charset", "action", "autocomplete", "enctype", "method", "name", "novalidate", "target"];
    }
  };
  var form = (...args) => new Form(...args);
  var Frameset = class extends Tag {
    tag = "frameset";
    selfAttributes() {
      return ["border", "bordercolor", "cols", "frameborder", "framespacing", "rows"];
    }
  };
  var frameset = (...args) => new Frameset(...args);
  var Frame = class extends SingleTag {
    tag = "frame";
    selfAttributes() {
      return ["bordercolor", "frameborder", "noresize", "name", "src", "scrolling"];
    }
  };
  var frame = (options = {}) => new Frame(options);
  var NoFrames = class extends Tag {
    tag = "noframes";
  };
  var noframes = (...args) => new NoFrames(...args);
  var IFrame = class extends Tag {
    tag = "iframe";
    selfAttributes() {
      return ["align", "allowtransparency", "frameborder", "height", "hspace", "marginheight", "marginwidth", "name", "sandbox", "scrolling", "seamless", "src", "srcdoc", "vspace", "width"];
    }
  };
  var iframe = (...args) => new IFrame(...args);
  var Ins = class extends Tag {
    tag = "ins";
    selfAttributes() {
      return ["cite", "datetime"];
    }
  };
  var ins = (...args) => new Ins(...args);
  var Kbd = class extends Tag {
    tag = "kbd";
  };
  var kbd = (...args) => new Kbd(...args);
  var Label = class extends Tag {
    tag = "label";
    selfAttributes() {
      return ["for"];
    }
  };
  var label = (...args) => new Label(...args);
  var List = class extends Tag {
    constructor(tag = "ul", ...args) {
      super(...args);
      this.tag = tag;
    }
    selfAttributes() {
      return this.tag === "ul" ? ["type"] : ["type", "reserved", "start"];
    }
  };
  var ListItem = class extends Tag {
    tag = "li";
    selfAttributes() {
      return ["type", "value"];
    }
  };
  var ul = (...args) => new List("ul", ...args);
  var ol = (...args) => new List("ol", ...args);
  var li = (...args) => new ListItem(...args);
  var Mark = class extends Tag {
    tag = "mark";
  };
  var mark = (...args) => new Mark(...args);
  var NoScript = class extends Tag {
    tag = "noscript";
  };
  var noscript = (...args) => new NoScript(...args);
  var Select = class extends Tag {
    tag = "select";
    selfAttributes() {
      return ["autofocus", "form", "name", "size"];
    }
  };
  var select = (...args) => new Select(...args);
  var OptionGroup = class extends Tag {
    tag = "optgroup";
    selfAttributes() {
      return ["label"];
    }
  };
  var optgroup = (...args) => new OptionGroup(...args);
  var Option = class extends Tag {
    tag = "option";
    selfAttributes() {
      return ["label", "value"];
    }
  };
  var option = (...args) => new Option(...args);
  var Output = class extends Tag {
    tag = "output";
    selfAttributes() {
      return ["for", "form", "name"];
    }
  };
  var output = (...args) => new Output(...args);
  var Paragraph = class extends Tag {
    tag = "p";
    selfAttributes() {
      return ["align"];
    }
  };
  var paragraph = (...args) => new Paragraph(...args);
  var p = (...args) => new Paragraph(...args);
  var Pre = class extends Tag {
    tag = "pre";
  };
  var pre = (...args) => new Pre(...args);
  var Quoted = class extends Tag {
    tag = "q";
    selfAttributes() {
      return ["cite"];
    }
  };
  var q = (...args) => new Quoted(...args);
  var quoted = (...args) => new Quoted(...args);
  var Strike = class extends Tag {
    tag = "strike";
  };
  var strike = (...args) => new Strike(...args);
  var s = (...args) => new Strike(...args);
  var Script = class extends Tag {
    tag = "script";
    selfAttributes() {
      return ["async", "defer", "language", "src", "type"];
    }
  };
  var script = (...args) => new Script(...args);
  var Small = class extends Tag {
    tag = "small";
  };
  var small = (...args) => new Small(...args);
  var Source = class extends SingleTag {
    tag = "source";
    selfAttributes() {
      return ["media", "src", "type"];
    }
  };
  var source = (options = {}) => new Source(options);
  var Sub = class extends Tag {
    tag = "sub";
  };
  var sub = (...args) => new Sub(...args);
  var Sup = class extends Tag {
    tag = "sup";
  };
  var sup = (...args) => new Sup(...args);
  var Textarea = class extends Tag {
    tag = "textarea";
    selfAttributes() {
      return ["autofocus", "cols", "form", "maxlength", "name", "placeholder", "rows", "wrap"];
    }
  };
  var textarea = (...args) => new Textarea(...args);
  var Time = class extends Tag {
    tag = "time";
    selfAttributes() {
      return ["datetime", "pubdate"];
    }
  };
  var time = (...args) => new Time(...args);
  var Track = class extends SingleTag {
    tag = "track";
    selfAttributes() {
      return ["kind", "src", "srclang", "label"];
    }
  };
  var track = (options = {}) => new Track(options);
  var Var = class extends Tag {
    tag = "var";
  };
  var variable = (...args) => new Var(...args);
  var VideoTag = class extends Tag {
    tag = "video";
    selfAttributes() {
      return ["autoplay", "controls", "height", "loop", "loop", "poster", "preload", "src", "width"];
    }
  };
  var video = (...args) => new VideoTag(...args);
  var Wbr = class extends SingleTag {
    tag = "wbr";
  };
  var wbr = (options) => new Wbr(options);
  var Main = class extends Tag {
    tag = "main";
  };
  var main = (...args) => new Main(...args);
  var Meta = class extends SingleTag {
    tag = "meta";
    selfAttributes() {
      return ["content", "name", "http-equiv", "charset"];
    }
  };
  var meta = (options) => new Meta(options);
  var Title = class extends Tag {
    tag = "title";
  };
  var title2 = (text) => new Title(text);
  var Template = class extends Tag {
    tag = "template";
    selfAttributes() {
      return ["shadowrootmode", "shadowrootdelegatesfocus", "shadowrootclonable", "shadowrootserializable"];
    }
  };
  var template = (...args) => new Template(...args);
  var Ruby = class extends Tag {
    tag = "ruby";
  };
  var Rt = class extends SingleTag {
    tag = "rt";
  };
  var Rp = class extends SingleTag {
    tag = "rp";
  };
  var ruby = (...args) => new Ruby(...args);
  var rt = (options) => new Rt(options);
  var rp = (options) => new Rp(options);
  var Data2 = class extends Tag {
    tag = "data";
  };
  var data = (...args) => new Data2(...args);
  var Picture = class extends Tag {
    tag = "picture";
  };
  var picture = (...args) => new Picture(...args);
  var Dialog = class extends Tag {
    tag = "dialog";
    selfAttributes() {
      return ["open"];
    }
  };
  var dialog = (...args) => new Dialog(...args);
  var Slot = class extends Tag {
    tag = "slot";
    selfAttributes() {
      return ["name"];
    }
  };
  var slot = (...args) => new Slot(...args);
  var Elements = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Abbr,
    Address,
    Anchor,
    Area,
    Article,
    Aside,
    AudioTag,
    Base,
    Bdi,
    Bdo,
    Blockquote,
    Body,
    Bold,
    Br,
    Button,
    Canvas,
    Caption,
    Cite,
    Code,
    Col,
    Colgroup,
    Data: Data2,
    Dd,
    Details,
    Dfn,
    Dialog,
    Div,
    Dl,
    Dt,
    Em,
    Embed,
    Fieldset,
    FigCaption,
    Figure,
    Footer,
    Form,
    Frame,
    Frameset,
    Head,
    Header,
    Heading,
    Hr,
    Html: Html2,
    IFrame,
    Img,
    Input,
    Ins,
    Ital,
    Kbd,
    Label,
    Legend,
    Link,
    List,
    ListItem,
    Main,
    Map: Map2,
    Mark,
    Meta,
    Nav,
    NoEmbed,
    NoFrames,
    NoScript,
    Option,
    OptionGroup,
    Output,
    Paragraph,
    Picture,
    Pre,
    Quoted,
    Rp,
    Rt,
    Ruby,
    Script,
    Section,
    Select,
    Slot,
    Small,
    Source,
    Span,
    Strike,
    Strong,
    Sub,
    Summary,
    Sup,
    Table,
    TableCell,
    TableRow,
    TableSection,
    Template,
    Textarea,
    Time,
    Title,
    Track,
    Var,
    VideoTag,
    Wbr,
    a,
    abbr,
    address,
    anchor,
    area,
    article,
    aside,
    audio,
    base,
    bdi,
    bdo,
    blockquote,
    body,
    bold,
    br,
    button,
    canvas,
    caption,
    cite,
    code,
    col,
    colgroup,
    data,
    dd,
    details,
    dfn,
    dialog,
    div,
    dl,
    dt,
    em,
    embed,
    fieldset,
    figcaption,
    figure,
    footer,
    form,
    frame,
    frameset,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    head,
    header,
    heading,
    hr,
    html,
    i,
    iframe,
    img,
    input,
    ins,
    ital,
    kbd,
    label,
    legend,
    li,
    link,
    main,
    map,
    mark,
    meta,
    nav,
    noembed,
    noframes,
    noscript,
    ol,
    optgroup,
    option,
    output,
    p,
    paragraph,
    picture,
    pre,
    q,
    quoted,
    rp,
    rt,
    ruby,
    s,
    script,
    section,
    select,
    slot,
    small,
    source,
    span,
    strike,
    strong,
    sub,
    summary,
    sup,
    table,
    tbody,
    td,
    template,
    textarea,
    tfoot,
    th,
    thead,
    time,
    title: title2,
    tr,
    track,
    ul,
    variable,
    video,
    wbr
  });
  var __htmlSaver = {};
  var version5 = "0.12.0";
  var build_time5 = "12.11.2024, 20:46:19";
  var info5 = () => {
    console.info(`%c Html %c v${version5} %c ${build_time5} `, "color: #ffffff; font-weight: bold; background: #708238", "color: white; background: darkgreen", "color: white; background: #0080fe;");
  };
  var extract = (ctx = globalThis) => {
    for (let key in Elements) {
      if (globalThis[key]) __htmlSaver[key] = globalThis[key];
      ctx[key] = Elements[key];
    }
  };
  var restore = (ctx = globalThis) => {
    for (let key in __htmlSaver) {
      ctx[key] = __htmlSaver[key];
    }
  };
  var htmljs = {
    ...Elements,
    extract,
    restore,
    info: info5
  };

  // source/html/index.js
  globalThis.Html = {
    addStyle,
    addCssRule,
    cssLoader,
    jsLoader,
    viewLoader,
    clearViewStorageHolder,
    createStyleElement,
    createStyleSheet,
    render,
    ...htmljs
  };

  // node_modules/@olton/guardian/dist/guardian.mjs
  var guardian_exports = {};
  __export(guardian_exports, {
    americanExpress: () => Kr,
    array: () => Lr,
    base64: () => gr,
    between: () => ur,
    bigint: () => z,
    boolean: () => hr2,
    bytes: () => ce,
    compose: () => v,
    creditCard: () => Jr,
    date: () => X,
    digits: () => Ae,
    diners: () => ee,
    discover: () => re2,
    domain: () => Tr,
    email: () => nr,
    endsWith: () => F,
    finite: () => lr,
    float: () => de,
    func: () => Y,
    hexColor: () => Br2,
    imei: () => Vr,
    info: () => ge,
    integer: () => J,
    ip: () => Ur,
    ipv4: () => Mr,
    ipv6: () => Nr,
    jcb: () => te,
    length: () => Rr,
    mastercard: () => Qr,
    maxLength: () => kr,
    maxValue: () => tr2,
    minLength: () => xr,
    minValue: () => rr,
    notNull: () => ae,
    notNumber: () => Gr,
    number: () => fr,
    object: () => mr,
    parse: () => A,
    pattern: () => ie,
    pipe: () => M2,
    required: () => sr,
    safeInteger: () => Q,
    safeParse: () => y,
    startsWith: () => C2,
    string: () => m,
    symbol: () => B,
    unionPay: () => oe,
    unknown: () => O,
    url: () => Fr,
    visa: () => Zr
  });
  var k = Object.defineProperty;
  var d = Object.getOwnPropertySymbols;
  var w = Object.prototype.hasOwnProperty;
  var D = Object.prototype.propertyIsEnumerable;
  var l = (e, r, t) => r in e ? k(e, r, { enumerable: true, configurable: true, writable: true, value: t }) : e[r] = t;
  var E = (e, r) => {
    for (var t in r || (r = {})) w.call(r, t) && l(e, t, r[t]);
    if (d) for (var t of d(r)) D.call(r, t) && l(e, t, r[t]);
    return e;
  };
  var o = class extends Error {
    constructor(r = "", t = null, c) {
      super(r), this.message = r, this.name = t, this.value = c;
    }
  };
  var A = (e, r) => {
    let t;
    if (!e) throw new Error("Schema object required for parse data!");
    if (typeof e == "function") {
      if (t = e.apply(null, [r]), t instanceof o) throw t;
    } else for (let c in e) {
      let s2 = r[c], a2 = e[c];
      if (!a2) throw new o(`Guard not defined for field ${c} in input data!`, "general", r);
      if (!r.hasOwnProperty(c)) throw new o(`Field ${c} doesn't exists in input data!`, "general", r);
      if (typeof a2 == "function") {
        if (console.log(a2.name), t = a2.apply(null, [s2]), t instanceof o) throw t;
      } else A(a2, s2);
    }
    return r;
  };
  var y = (e, r) => {
    let t;
    if (!e) throw new Error("Schema object required for parse data!");
    if (typeof e == "function") {
      if (t = e.apply(null, [r]), t instanceof o) return { ok: false, error: t };
    } else for (let c in e) {
      let s2 = r[c], a2 = e[c];
      if (a2) if (typeof a2 == "function") {
        if (t = a2.apply(null, [r]), t instanceof o) return { ok: false, error: t };
      } else A(a2, s2);
    }
    return { ok: true, output: r };
  };
  var U = (...e) => (r) => e.reduce((t, c) => c(t), r);
  var M2 = U;
  var N = (...e) => (r) => e.reduceRight((t, c) => c(t), r);
  var v = N;
  var I = "VAL must be a string";
  var m = (e = I) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" ? r : new o(t, "string", r);
  };
  var f2 = (e) => typeof e != "undefined" && e !== null;
  var T = "VAL must starts with START_VAL";
  var C2 = (e, r = T) => {
    if (!f2(e)) throw new Error("START_VALUE not defined!");
    return function(t) {
      let c = r.replace(/VAL/g, t).replace(/START_VAL/g, e);
      return typeof t == "string" && t.startsWith(e) ? t : new o(c, "startsWith", t);
    };
  };
  var $2 = "VAL must end with END_VAL";
  var F = (e, r = $2) => {
    if (!f2(e)) throw new Error("END_VALUE not defined!");
    return function(t) {
      let c = r.replace(/VAL/g, t).replace(/END_VAL/g, e);
      return typeof t == "string" && t.endsWith(e) ? t : new o(c, "endsWith", t);
    };
  };
  var O = () => function(e) {
    return e;
  };
  var j = "A symbol is required";
  var B = (e = j) => function(r) {
    return typeof r == "symbol" ? r : new o(e, "symbol", r);
  };
  var P = "VAL must be a bigint";
  var z = (e = P) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "bigint" ? r : new o(t, "bigint", r);
  };
  var W = "VAL must be valid date object or date string";
  var X = (e = W) => function(r) {
    let t = e.replace(/VAL/g, r);
    return r instanceof Date ? r : new o(t, "date", r);
  };
  var q2 = "The value must be a function";
  var Y = (e = q2) => function(r) {
    return typeof r == "function" ? r : new o(e, "function", r);
  };
  var H = "VAL must be an integer";
  var J = (e = H) => function(r) {
    let t = e.replace(/VAL/g, r);
    return Number.isInteger(r) ? r : new o(t, "integer", r);
  };
  var Z = "VAL must be an safe integer";
  var Q = (e = Z) => function(r) {
    let t = e.replace(/VAL/g, r);
    return Number.isSafeInteger(r) ? r : new o(t, "safeInteger", r);
  };
  var K = "VAL must be a great then MIN_VALUE";
  var rr = (e, r = K) => {
    if (!f2(e)) throw new Error("MIN_VALUE not defined!");
    return function(t) {
      let c = r.replace(/VAL/g, t).replace(/MIN_VALUE/g, e), s2 = +t;
      return !isNaN(s2) && s2 >= +e ? t : new o(c, "minValue", t);
    };
  };
  var er = "VAL must be a less then MAX_VALUE";
  var tr2 = (e, r = er) => {
    if (!f2(e)) throw new Error("MAX_VALUE not defined!");
    return function(t) {
      let c = r.replace(/VAL/g, t).replace(/MAX_VALUE/g, e), s2 = +t;
      return !isNaN(s2) && s2 <= +e ? t : new o(c, "maxValue", t);
    };
  };
  var or = "VAL must be a string in valid email format";
  var nr = (e = or) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(r) ? r : new o(t, "email", r);
  };
  var cr = "Any value required";
  var sr = (e = cr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r != "undefined" && r !== null && r !== "" ? r : new o(t, "required", r);
  };
  var ar = "VAL must be a number";
  var fr = (e = ar) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "number" && !isNaN(+r) ? r : new o(t, "number", r);
  };
  var ir = "VAL must be an object";
  var mr = (e) => {
    if (!(typeof e == "object")) throw new o(ir.replace(/VAL/g, e), "object", e);
    return E({}, e);
  };
  var Ar = "VAL must be between MIN_VAL and MAX_VAL";
  var ur = (e, r, t = Ar) => {
    if (!f2(e)) throw new Error("MIN_VALUE not defined!");
    if (!f2(r)) throw new Error("MAX_VALUE not defined!");
    return function(c) {
      let s2 = t.replace(/VAL/g, c).replace(/MIN_VAL/g, e).replace(/MAX_VAL/g, r), a2 = +c;
      return !isNaN(a2) && c >= +e && c <= +r ? c : new o(s2, "between", c);
    };
  };
  var dr = "VAL must be a finite number";
  var lr = (e = dr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return Number.isFinite(r) ? r : new o(t, "finite", r);
  };
  var Er = "VAL must be a string in valid base 64 format";
  var gr = (e = Er) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(r) ? r : new o(t, "base64", r);
  };
  var _r = "VAL can`t be a number";
  var Gr = (e = _r) => function(r) {
    let t = e.replace(/VAL/g, r);
    return isNaN(r) ? r : new o(t, "notNumber", r);
  };
  var pr = "VAL must be a boolean";
  var hr2 = (e = pr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "boolean" ? r : new o(t, "boolean", r);
  };
  var g = "VAL must be an array of TYPE";
  var Lr = (e, r = g) => (!e && !r && (e = m(), r = g), typeof e == "string" && (r = e, e = m()), function(t) {
    let c = r.replace(/VAL/g, t).replace(/TYPE/g, e.name);
    if (!Array.isArray(t)) return new o(c, "array", t);
    for (let s2 of t) if (e(s2) instanceof o) return new o(c, "array", t);
    return t;
  });
  var Sr = "VAL must be a valid EMEI";
  var br2 = (e) => {
    let r = (s2) => {
      let a2 = 0;
      for (; s2 > 0; ) a2 = a2 + s2 % 10, s2 = parseInt("" + s2 / 10, 10);
      return a2;
    }, t = ("" + e).length;
    if (t !== 15) return false;
    let c = 0;
    for (let s2 = t; s2 >= 1; s2--) {
      let a2 = e % 10;
      s2 % 2 === 0 && (a2 = 2 * a2), c += r(a2), e = parseInt("" + e / 10, 10);
    }
    return c % 10 === 0;
  };
  var Vr = (e = Sr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return br2(r) ? r : new o(t, "emei", r);
  };
  var u = "VAL must be a string or array with length N";
  var Rr = (e, r = u) => function(t) {
    let c = r.replace(/VAL/g, t).replace(/N/g, e), s2 = (typeof t == "string" || Array.isArray(t)) && t.length === +e;
    return console.log(t.length, e), s2 ? t : new o(c, "length", t);
  };
  var xr = (e, r = u) => function(t) {
    let c = r.replace(/VAL/g, t).replace(/N/g, e);
    return (typeof t == "string" || Array.isArray(t)) && t.length >= +e ? t : new o(c, "minLength", t);
  };
  var kr = (e, r = u) => function(t) {
    let c = r.replace(/VAL/g, t).replace(/N/g, e);
    return (typeof t == "string" || Array.isArray(t)) && t.length <= +e ? t : new o(c, "maxLength", t);
  };
  var wr = "VAL must be a valid ip address ipv4 or ipv6";
  var Dr = "VAL must be a valid ipv4 address";
  var yr = "VAL must be a valid ipv6 address";
  var _ = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
  var G2 = /^[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}$/;
  var Ur = (e = wr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && (_.test(r) || G2.test(r)) ? r : new o(t, "ip", r);
  };
  var Mr = (e = Dr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && _.test(r) ? r : new o(t, "ipv4", r);
  };
  var Nr = (e = yr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && G2.test(r) ? r : new o(t, "ipv6", r);
  };
  var vr = "VAL must be a valid domain name, xn--* for internationalized names";
  var Ir = /^((xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/;
  var Tr = (e = vr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && Ir.test(r) ? r : new o(t, "domain", r);
  };
  var Cr = "VAL must be a valid url";
  var $r = /^(?:(?:(?:https?|ftp|wss?):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i;
  var Fr = (e = Cr) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && $r.test(r) ? r : new o(t, "url", r);
  };
  var Or = "VAL must be a valid hex color";
  var jr = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;
  var Br2 = (e = Or) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && jr.test(r) ? r : new o(t, "hexColor", r);
  };
  var p2 = /^4\d{12}(?:\d{3,6})?$/u;
  var h = /^5[1-5]\d{2}|(?:222\d|22[3-9]\d|2[3-6]\d{2}|27[01]\d|2720)\d{12}$/u;
  var L = /^3[47]\d{13}$/u;
  var S = /^6(?:011|5\d{2})\d{12,15}$/u;
  var b = /^3(?:0[0-5]|[68]\d)\d{11,13}$/u;
  var V = /^(?:2131|1800|35\d{3})\d{11}$/u;
  var R = /^(?:6[27]\d{14,17}|81\d{14,17})$/u;
  var x = "VAL must be a valid CC number (visa, mastercard, american express, discover, diners club, jcb, or union pay)";
  var Pr = "VAL must be a valid Visa card number";
  var zr = "VAL must be a valid Mastercard card number";
  var Wr = "VAL must be a valid American Express card number";
  var Xr = "VAL must be a valid DISCOVER card number";
  var qr = "VAL must be a valid DINERS CLUB card number";
  var Yr = "VAL must be a valid JCB card number";
  var Hr2 = "VAL must be a valid Union Pay card number";
  var Jr = (e = x) => function(r) {
    let t = e.replace(/VAL/g, r);
    return typeof r == "string" && (p2.test(r) || h.test(r) || L.test(r) || S.test(r) || b.test(r) || V.test(r) || R.test(r)) ? r : new o(t, "creditCard", r);
  };
  var i2 = (e, r, t = x) => function(c) {
    let s2 = t.replace(/VAL/g, c);
    return typeof c == "string" && r.test(c) ? c : new o(s2, e, c);
  };
  var Zr = (e = Pr) => i2("visa", p2, e);
  var Qr = (e = zr) => i2("mastercard", h, e);
  var Kr = (e = Wr) => i2("american express", L, e);
  var re2 = (e = Xr) => i2("discover", S, e);
  var ee = (e = qr) => i2("diners club", b, e);
  var te = (e = Yr) => i2("jcb card", V, e);
  var oe = (e = Hr2) => i2("union pay", R, e);
  var ne = "The length of string must be VAL bytes";
  var ce = (e, r = ne) => function(t) {
    let c = r.replace(/VAL/g, t);
    return typeof t == "string" && new TextEncoder().encode(t).length === e ? t : new o(c, "bytes", t);
  };
  var se = "VAL can`t be null or undefined.";
  var ae = (e = se) => function(r) {
    let t = e.replace(/VAL/g, r);
    return f2(r) ? r : new o(t, "notNull", r);
  };
  var fe = "The value must match the pattern";
  var ie = (e, r = fe) => function(t) {
    let c = r.replace(/VAL/g, t);
    return (typeof e == "string" ? new RegExp(e, "g") : e).test("" + t) ? t : new o(c, "pattern", t);
  };
  var me = "VAL must contains only digits";
  var Ae = (e = me) => function(r) {
    let t = e.replace(/VAL/g, r);
    return /^\d+$/g.test("" + r) ? r : new o(t, "digits", r);
  };
  var ue = "VAL must be a float";
  var de = (e = ue) => function(r) {
    let t = e.replace(/VAL/g, r);
    return !isNaN(r) && +n % 1 !== 0 || /^\d*\.\d+$/.test(r) ? r : new o(t, "float", r);
  };
  var le = "0.5.2";
  var Ee = "29.11.2024, 18:45:18";
  var ge = () => {
    console.info(`%c GUARDIAN %c v${le} %c ${Ee} `, "color: pink; font-weight: bold; background: #2b1700", "color: white; background: darkgreen", "color: white; background: #0080fe;");
  };

  // source/guardian/index.js
  globalThis.G = guardian_exports;

  // source/core/global.js
  (function($3) {
    "use strict";
    globalThis["__version__"] = "5.1.0";
    globalThis["__build_time__"] = "31.01.2025, 20:16:16";
    const meta_init = $3.meta("metro:init").attr("content");
    const meta_locale = $3.meta("metro:locale").attr("content");
    const meta_week_start = $3.meta("metro:week_start").attr("content");
    const meta_date_format = $3.meta("metro:date_format").attr("content");
    const meta_date_format_input = $3.meta("metro:date_format_input").attr("content");
    const meta_animation_duration = $3.meta("metro:animation_duration").attr("content");
    const meta_callback_timeout = $3.meta("metro:callback_timeout").attr("content");
    const meta_timeout = $3.meta("metro:timeout").attr("content");
    const meta_scroll_multiple = $3.meta("metro:scroll_multiple").attr("content");
    const meta_cloak = $3.meta("metro:cloak").attr("content");
    const meta_cloak_duration = $3.meta("metro:cloak_duration").attr("content");
    const meta_global_common = $3.meta("metro:global_common").attr("content");
    const meta_blur_image = $3.meta("metro:blur_image").attr("content");
    const meta_smooth_scroll = $3.meta("metro:smooth_scroll").attr("content");
    const meta_theme = $3.meta("metro:theme").attr("content");
    if (meta_theme !== void 0) {
      $3("html").addClass(meta_theme === "auto" ? $3.dark ? "dark-side" : "" : meta_theme === "dark" ? "dark-side" : "light-side");
    }
    if (globalThis["METRO_BLUR_IMAGE"] === void 0) {
      globalThis["METRO_BLUR_IMAGE"] = meta_blur_image !== void 0 ? JSON.parse(meta_global_common) : false;
    }
    if (globalThis["METRO_GLOBAL_COMMON"] === void 0) {
      globalThis["METRO_GLOBAL_COMMON"] = meta_global_common !== void 0 ? JSON.parse(meta_global_common) : false;
    }
    const meta_jquery = $3.meta("metro:jquery").attr("content");
    globalThis["jquery_present"] = typeof globalThis["jQuery"] !== "undefined";
    if (globalThis["METRO_JQUERY"] === void 0) {
      globalThis["METRO_JQUERY"] = meta_jquery !== void 0 ? JSON.parse(meta_jquery) : true;
    }
    globalThis["useJQuery"] = globalThis["jquery_present"] && globalThis["METRO_JQUERY"];
    const meta_info = $3.meta("metro:info").attr("content");
    if (globalThis["METRO_SHOW_INFO"] === void 0) {
      globalThis["METRO_SHOW_INFO"] = meta_info !== void 0 ? JSON.parse(meta_info) : true;
    }
    const meta_compile = $3.meta("metro:compile").attr("content");
    if (globalThis["METRO_SHOW_COMPILE_TIME"] === void 0) {
      globalThis["METRO_SHOW_COMPILE_TIME"] = meta_compile !== void 0 ? JSON.parse(meta_compile) : true;
    }
    if (globalThis["METRO_INIT"] === void 0) {
      globalThis["METRO_INIT"] = meta_init !== void 0 ? JSON.parse(meta_init) : true;
    }
    if (globalThis["METRO_DEBUG"] === void 0) {
      globalThis["METRO_DEBUG"] = true;
    }
    if (globalThis["METRO_WEEK_START"] === void 0) {
      globalThis["METRO_WEEK_START"] = meta_week_start !== void 0 ? parseInt(meta_week_start) : 0;
    }
    if (globalThis["METRO_DATE_FORMAT"] === void 0) {
      globalThis["METRO_DATE_FORMAT"] = meta_date_format !== void 0 ? meta_date_format : "YYYY-MM-DD";
    }
    if (globalThis["METRO_DATE_FORMAT_INPUT"] === void 0) {
      globalThis["METRO_DATE_FORMAT_INPUT"] = meta_date_format_input !== void 0 ? meta_date_format_input : "YYYY-MM-DD";
    }
    if (globalThis["METRO_LOCALE"] === void 0) {
      globalThis["METRO_LOCALE"] = meta_locale !== void 0 ? meta_locale : "en-US";
    }
    if (globalThis["METRO_ANIMATION_DURATION"] === void 0) {
      globalThis["METRO_ANIMATION_DURATION"] = meta_animation_duration !== void 0 ? parseInt(meta_animation_duration) : 100;
    }
    if (globalThis["METRO_CALLBACK_TIMEOUT"] === void 0) {
      globalThis["METRO_CALLBACK_TIMEOUT"] = meta_callback_timeout !== void 0 ? parseInt(meta_callback_timeout) : 500;
    }
    if (globalThis["METRO_TIMEOUT"] === void 0) {
      globalThis["METRO_TIMEOUT"] = meta_timeout !== void 0 ? parseInt(meta_timeout) : 2e3;
    }
    if (globalThis["METRO_SCROLL_MULTIPLE"] === void 0) {
      globalThis["METRO_SCROLL_MULTIPLE"] = meta_scroll_multiple !== void 0 ? parseInt(meta_scroll_multiple) : 20;
    }
    if (globalThis["METRO_CLOAK_REMOVE"] === void 0) {
      globalThis["METRO_CLOAK_REMOVE"] = meta_cloak !== void 0 ? ("" + meta_cloak).toLowerCase() : "fade";
    }
    if (globalThis["METRO_CLOAK_DURATION"] === void 0) {
      globalThis["METRO_CLOAK_DURATION"] = meta_cloak_duration !== void 0 ? parseInt(meta_cloak_duration) : 300;
    }
    if (globalThis["METRO_SMOOTH_SCROLL"] === void 0) {
      globalThis["METRO_SMOOTH_SCROLL"] = meta_smooth_scroll !== void 0 ? JSON.parse(meta_smooth_scroll) : true;
    }
    if (globalThis["METRO_HOTKEYS_FILTER_CONTENT_EDITABLE"] === void 0) {
      globalThis["METRO_HOTKEYS_FILTER_CONTENT_EDITABLE"] = true;
    }
    if (globalThis["METRO_HOTKEYS_FILTER_INPUT_ACCEPTING_ELEMENTS"] === void 0) {
      globalThis["METRO_HOTKEYS_FILTER_INPUT_ACCEPTING_ELEMENTS"] = true;
    }
    if (globalThis["METRO_HOTKEYS_FILTER_TEXT_INPUTS"] === void 0) {
      globalThis["METRO_HOTKEYS_FILTER_TEXT_INPUTS"] = true;
    }
    if (globalThis["METRO_HOTKEYS_BUBBLE_UP"] === void 0) {
      globalThis["METRO_HOTKEYS_BUBBLE_UP"] = false;
    }
    if (globalThis["METRO_THROWS"] === void 0) {
      globalThis["METRO_THROWS"] = true;
    }
    globalThis["METRO_MEDIA"] = [];
  })(Dom);

  // source/core/props.js
  var isTouch2 = "ontouchstart" in window;
  var Props = {
    controlsPosition: {
      INSIDE: "inside",
      OUTSIDE: "outside"
    },
    groupMode: {
      ONE: "one",
      MULTI: "multi"
    },
    aspectRatio: {
      HD: "hd",
      SD: "sd",
      CINEMA: "cinema"
    },
    fullScreenMode: {
      WINDOW: "window",
      DESKTOP: "desktop"
    },
    position: {
      TOP: "top",
      BOTTOM: "bottom",
      LEFT: "left",
      RIGHT: "right",
      TOP_RIGHT: "top-right",
      TOP_LEFT: "top-left",
      BOTTOM_LEFT: "bottom-left",
      BOTTOM_RIGHT: "bottom-right",
      LEFT_BOTTOM: "left-bottom",
      LEFT_TOP: "left-top",
      RIGHT_TOP: "right-top",
      RIGHT_BOTTOM: "right-bottom"
    },
    popoverEvents: {
      CLICK: "click",
      HOVER: "hover",
      FOCUS: "focus"
    },
    stepperView: {
      SQUARE: "square",
      CYCLE: "cycle",
      DIAMOND: "diamond"
    },
    listView: {
      LIST: "list",
      CONTENT: "content",
      ICONS: "icons",
      ICONS_MEDIUM: "icons-medium",
      ICONS_LARGE: "icons-large",
      TILES: "tiles",
      TABLE: "table"
    },
    events: {
      click: "click",
      start: isTouch2 ? "touchstart" : "mousedown",
      stop: isTouch2 ? "touchend" : "mouseup",
      move: isTouch2 ? "touchmove" : "mousemove",
      enter: isTouch2 ? "touchstart" : "mouseenter",
      startAll: "mousedown touchstart",
      stopAll: "mouseup touchend",
      moveAll: "mousemove touchmove",
      leave: "mouseleave",
      focus: "focus",
      blur: "blur",
      resize: "resize",
      keyup: "keyup",
      keydown: "keydown",
      keypress: "keypress",
      dblclick: "dblclick",
      input: "input",
      change: "change",
      cut: "cut",
      paste: "paste",
      scroll: "scroll",
      mousewheel: "mousewheel",
      inputchange: "change input propertychange cut paste copy drop",
      dragstart: "dragstart",
      dragend: "dragend",
      dragenter: "dragenter",
      dragover: "dragover",
      dragleave: "dragleave",
      drop: "drop",
      drag: "drag"
    },
    keyCode: {
      BACKSPACE: 8,
      TAB: 9,
      ENTER: 13,
      SHIFT: 16,
      CTRL: 17,
      ALT: 18,
      BREAK: 19,
      CAPS: 20,
      ESCAPE: 27,
      SPACE: 32,
      PAGEUP: 33,
      PAGEDOWN: 34,
      END: 35,
      HOME: 36,
      LEFT_ARROW: 37,
      UP_ARROW: 38,
      RIGHT_ARROW: 39,
      DOWN_ARROW: 40,
      COMMA: 188
    },
    media_queries: {
      FS: "(min-width: 0px)",
      XS: "(min-width: 360px)",
      SM: "(min-width: 576px)",
      LD: "(min-width: 640px)",
      MD: "(min-width: 768px)",
      LG: "(min-width: 992px)",
      XL: "(min-width: 1200px)",
      XXL: "(min-width: 1452px)",
      XXXL: "(min-width: 2000px)"
    },
    media_sizes: {
      FS: 0,
      XS: 360,
      SM: 576,
      LD: 640,
      MD: 768,
      LG: 992,
      XL: 1200,
      XXL: 1452,
      XXXL: 2e3
    },
    media_mode: {
      FS: "fs",
      XS: "xs",
      SM: "sm",
      LD: "ld",
      MD: "md",
      LG: "lg",
      XL: "xl",
      XXL: "xxl",
      XXXL: "xxxl"
    },
    media_modes: ["fs", "xs", "sm", "ld", "md", "lg", "xl", "xxl", "xxxl"],
    actions: {
      NONE: 0,
      REMOVE: 1,
      HIDE: 2,
      MINIMIZE: 3,
      MAXIMIZE: 4,
      CLOSE: 5,
      RESTORE: 6,
      SHOW: 7
    },
    theme: {
      LIGHT: "light",
      DARK: "dark"
    }
  };

  // source/core/metro.js
  (() => {
    "use strict";
    const $3 = Dom;
    if (typeof Dom === "undefined") {
      throw new Error("Metro UI requires Dom helper!");
    }
    if (!("MutationObserver" in window)) {
      throw new Error("Metro UI requires MutationObserver!");
    }
    const isTouch3 = "ontouchstart" in window || navigator["MaxTouchPoints"] > 0 || navigator["msMaxTouchPoints"] > 0;
    const normalizeComponentName = (name2) => typeof name2 !== "string" ? void 0 : name2.replace(/-/g, "").toLowerCase();
    const Metro2 = {
      version: "5.1.0",
      build_time: "31.01.2025, 20:16:16",
      buildNumber: 0,
      isTouchable: isTouch3,
      fullScreenEnabled: document.fullscreenEnabled,
      sheet: null,
      hotkeys: {},
      locales: {},
      utils: {},
      colors: {},
      dialog: null,
      pagination: null,
      md5: null,
      storage: null,
      export: null,
      animations: null,
      cookie: null,
      template: null,
      defaults: {},
      info: () => {
        if (typeof globalThis["METRO_LIB_INFO"] !== "undefined") {
          Metro2.welcome();
        }
      },
      welcome: () => {
        console.info(
          `%c METRO UI %c v${Metro2.version} %c ${Metro2.build_time} `,
          "color: pink; font-weight: bold; background: #800000",
          "color: white; background: darkgreen",
          "color: white; background: #0080fe;"
        );
        if (globalThis["$"] && $3.info) $3.info();
        if (globalThis["Hooks"] && Hooks.info) Hooks.info();
        if (globalThis["Html"] && Html.info) Html.info();
        if (globalThis["Farbe"] && Farbe.info) Farbe.info();
        if (globalThis["Datetime"] && Datetime.info) Datetime.info();
        if (globalThis["Str"] && Str.info) Str.info();
        if (globalThis["G"] && G.info) G.info();
      },
      aboutDlg: () => {
        alert("Metro UI - v" + Metro2.version);
      },
      observe: () => {
        let observer, observerCallback;
        const observerConfig = {
          childList: true,
          attributes: true,
          subtree: true
        };
        observerCallback = (mutations) => {
          mutations.map((mutation) => {
            if (mutation.type === "attributes" && mutation.attributeName !== "data-role") {
              if (mutation.attributeName === "data-hotkey") {
                Metro2.initHotkeys([mutation.target], true);
              } else {
                const element2 = $3(mutation.target);
                const mc = element2.data("metroComponent");
                const attr = mutation.attributeName, newValue = element2.attr(attr), oldValue = mutation.oldValue;
                if (mc !== void 0) {
                  element2.fire("attr-change", {
                    attr,
                    newValue,
                    oldValue,
                    __this: element2[0]
                  });
                  $3.each(mc, function() {
                    const plug = Metro2.getPlugin(element2, this);
                    if (plug && typeof plug.changeAttribute === "function") {
                      plug.changeAttribute(attr, newValue, oldValue);
                    }
                  });
                }
              }
            } else if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
              let widgets = [], $node, node;
              const nodes = mutation.addedNodes;
              if (nodes.length) {
                for (let i3 = 0; i3 < nodes.length; i3++) {
                  node = nodes[i3];
                  $node = $3(node);
                  if ($node.attr("data-role") !== void 0) {
                    widgets.push(node);
                  }
                  $3.each($node.find("[data-role]"), function() {
                    if (widgets.indexOf(this) !== -1) {
                      return;
                    }
                    widgets.push(this);
                  });
                }
                if (widgets.length) Metro2.initWidgets(widgets, "observe");
              }
            } else {
            }
          });
        };
        observer = new MutationObserver(observerCallback);
        observer.observe($3("html")[0], observerConfig);
      },
      init: () => {
        const widgets = $3("[data-role]");
        const hotkeys = $3("[data-hotkey]");
        const html2 = $3("html");
        Metro2.i18n.load(html2.attr("lang"));
        if (globalThis["METRO_SHOW_INFO"]) {
          Metro2.info(true);
        }
        if (isTouch3 === true) {
          html2.addClass("touchable-device");
        }
        Metro2.sheet = Metro2.utils.newCssSheet();
        Metro2.utils.addCssRule(Metro2.sheet, "*, *::before, *::after", "box-sizing: border-box;");
        globalThis["METRO_MEDIA"] = [];
        $3.each(Metro2.media_queries, (key, query) => {
          if (Metro2.utils.media(query)) {
            globalThis["METRO_MEDIA"].push(Metro2.media_mode[key]);
          }
        });
        Metro2.observe();
        Metro2.initHotkeys(hotkeys);
        Metro2.initWidgets(widgets, "init");
        if (globalThis["METRO_CLOAK_REMOVE"] !== "fade") {
          $3(".m4-cloak").removeClass("m4-cloak");
          $3(".cloak").removeClass("cloak");
          $3(globalThis).fire("metro-initiated");
        } else {
          $3(".m4-cloak, .cloak").animate({
            draw: {
              opacity: [0, 1]
            },
            dur: 300,
            onDone: () => {
              $3(".m4-cloak").removeClass("m4-cloak");
              $3(".cloak").removeClass("cloak");
              $3(globalThis).fire("metro-initiated");
            }
          });
        }
        $3(document).on("click", "[data-copy-to-clipboard]", function() {
          const val = $3(this).attr("data-copy-to-clipboard");
          Metro2.utils.copy2clipboard(val);
          if (Metro2.toast) {
            Metro2.toast.create(`Data copied to clipboard!`);
          }
        });
        if (METRO_SMOOTH_SCROLL) {
          const smoothLinks = document.querySelectorAll('a.smooth-scroll[href^="#"]');
          for (const smoothLink of smoothLinks) {
            smoothLink.addEventListener("click", (e) => {
              e.preventDefault();
              const id = smoothLink.getAttribute("href");
              document.querySelector(id).scrollIntoView({
                behavior: "smooth",
                block: "start"
              });
            });
          }
        }
      },
      initHotkeys: (hotkeys, redefine) => {
        $3.each(hotkeys, function() {
          const element2 = $3(this);
          const hotkey = element2.attr("data-hotkey") ? element2.attr("data-hotkey").toLowerCase() : false;
          const fn = element2.attr("data-hotkey-func") ? element2.attr("data-hotkey-func") : false;
          if (hotkey === false) {
            return;
          }
          if (element2.data("hotKeyBonded") === true && redefine !== true) {
            return;
          }
          Metro2.hotkeys[hotkey] = [this, fn];
          element2.data("hotKeyBonded", true);
          element2.fire("hot-key-bonded", {
            __this: element2[0],
            hotkey,
            fn
          });
        });
      },
      initWidgets: (widgets) => {
        $3.each(widgets, function() {
          let $this = $3(this), roles;
          if (!this.hasAttribute("data-role")) {
            return;
          }
          roles = $this.attr("data-role").split(/\s*,\s*/);
          roles.map((func) => {
            const $$ = Metro2.utils.$();
            const _func = normalizeComponentName(func);
            if ($$.fn[_func] !== void 0 && $this.attr("data-role-" + _func) === void 0) {
              try {
                $$.fn[_func].call($this);
                $this.attr("data-role-" + _func, true);
                let mc = $this.data("metroComponent");
                if (mc === void 0) {
                  mc = [_func];
                } else {
                  mc.push(_func);
                }
                $this.data("metroComponent", mc);
                $this.fire("create", {
                  __this: $this[0],
                  name: _func
                });
                $3(document).fire("component-create", {
                  element: $this[0],
                  name: _func
                });
              } catch (e) {
                console.error("Error creating component " + func + " for ", $this[0]);
                throw e;
              }
            }
          });
        });
        Metro2.i18n.updateUI();
      },
      plugin: (name2, object) => {
        const _name = normalizeComponentName(name2);
        const register = ($4) => {
          $4.fn[_name] = function(options) {
            return this.each(function() {
              $4.data(this, _name, Object.create(object).init(options, this));
            });
          };
        };
        register(Dom);
        if (globalThis["useJQuery"]) {
          register(globalThis["jQuery"]);
        }
      },
      pluginExists: (name2) => {
        const $4 = globalThis["useJQuery"] ? globalThis["jQuery"] : Dom;
        return typeof $4.fn[normalizeComponentName(name2)] === "function";
      },
      destroyPlugin: (element2, name2) => {
        let p3, mc;
        const el = $3(element2);
        const _name = normalizeComponentName(name2);
        p3 = Metro2.getPlugin(el, _name);
        if (typeof p3 === "undefined") {
          console.warn("Component " + name2 + " can not be destroyed: the element is not a Metro UI component.");
          return;
        }
        if (typeof p3["destroy"] !== "function") {
          console.warn("Component " + name2 + " can not be destroyed: method destroy not found.");
          return;
        }
        p3["destroy"]();
        mc = el.data("metroComponent");
        Metro2.utils.arrayDelete(mc, _name);
        el.data("metroComponent", mc);
        $3.removeData(el[0], _name);
        el.removeAttr("data-role-" + _name);
      },
      destroyPluginAll: (element2) => {
        const el = $3(element2);
        const mc = el.data("metroComponent");
        if (mc !== void 0 && mc.length > 0)
          $3.each(mc, function() {
            Metro2.destroyPlugin(el[0], this);
          });
      },
      noop: () => {
      },
      noop_true: () => true,
      noop_false: () => false,
      noop_arg: (a2) => a2,
      requestFullScreen: (element2) => {
        if (element2["mozRequestFullScreen"]) {
          element2["mozRequestFullScreen"]();
        } else if (element2["webkitRequestFullScreen"]) {
          element2["webkitRequestFullScreen"]();
        } else if (element2["msRequestFullscreen"]) {
          element2["msRequestFullscreen"]();
        } else {
          element2.requestFullscreen().catch((err) => {
            console.warn("Error attempting to enable full-screen mode: " + err.message + " " + err.name);
          });
        }
      },
      exitFullScreen: () => {
        if (document["mozCancelFullScreen"]) {
          document["mozCancelFullScreen"]();
        } else if (document["webkitCancelFullScreen"]) {
          document["webkitCancelFullScreen"]();
        } else if (document["msExitFullscreen"]) {
          document["msExitFullscreen"]();
        } else {
          document.exitFullscreen().catch((err) => {
            console.warn("Error attempting to disable full-screen mode: " + err.message + " " + err.name);
          });
        }
      },
      inFullScreen: () => {
        const fsm = document.fullscreenElement || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"];
        return fsm !== void 0;
      },
      $: () => globalThis["useJQuery"] ? globalThis["jQuery"] : Dom,
      get$el: (el) => Metro2.$()($3(el)[0]),
      get$elements: (el) => Metro2.$()($3(el)),
      // TODO add if name is not defined, return one or array of plugins
      getPlugin: (el, name2) => {
        const _name = normalizeComponentName(name2);
        const $el = Metro2.get$el(el);
        return $el.length ? $el.data(_name) : void 0;
      },
      makePlugin: (el, name2, options) => {
        const _name = normalizeComponentName(name2);
        const $el = Metro2.get$elements(el);
        return $el.length && typeof $el[_name] === "function" ? $el[_name](options) : void 0;
      },
      Component: (nameName, compObj) => {
        const name2 = normalizeComponentName(nameName);
        const Utils = Metro2.utils;
        const component = $3.extend(
          { name: name2 },
          {
            _super: function(el, options, defaults, setup) {
              this.elem = el;
              this.element = $3(el);
              this.options = $3.extend({}, defaults, options);
              this.component = this.elem;
              this.locale = "en";
              this.strings = {};
              this._setOptionsFromDOM();
              this._runtime();
              this._setLocale();
              if (setup && typeof setup === "object") {
                $3.each(setup, (key, val) => {
                  this[key] = val;
                });
              }
              this._createExec();
            },
            _setOptionsFromDOM: function() {
              const element2 = this.element, o2 = this.options;
              $3.each(element2.data(), (key, value) => {
                if (key in o2) {
                  try {
                    o2[key] = JSON.parse(value);
                  } catch (e) {
                    o2[key] = value;
                  }
                }
              });
            },
            _runtime: function() {
              let element2 = this.element, mc;
              const roles = (element2.attr("data-role") || "").toArray(",").map((v2) => normalizeComponentName(v2)).filter((v2) => v2.trim() !== "");
              if (!element2.attr("data-role-" + this.name)) {
                element2.attr("data-role-" + this.name, true);
                if (roles.indexOf(this.name) === -1) {
                  roles.push(this.name);
                  element2.attr("data-role", roles.join(","));
                }
                mc = element2.data("metroComponent");
                if (mc === void 0) {
                  mc = [this.name];
                } else {
                  mc.push(this.name);
                }
                element2.data("metroComponent", mc);
              }
            },
            _createExec: function() {
              const timeout = this.options[this.name + "Deferred"];
              if (timeout) {
                setTimeout(() => {
                  this._create();
                }, timeout);
              } else {
                this._create();
              }
            },
            _fireEvent: function(eventName, data2, log, noFire, context = null) {
              const element2 = this.element, o2 = this.options;
              let _data;
              const event = str(eventName).camelCase().capitalize(false).value;
              data2 = $3.extend({}, data2, { __this: element2[0] });
              _data = data2 ? Object.values(data2) : {};
              if (log) {
                console.warn(log);
                console.warn("Event: on" + event);
                console.warn("Data: ", data2);
                console.warn("Element: ", element2[0]);
              }
              if (noFire !== true) element2.fire(event.toLowerCase(), data2);
              return Utils.exec(o2["on" + event], _data, context ? context : element2[0]);
            },
            _fireEvents: function(events, data2, log, noFire, context) {
              let that = this, _events;
              if (arguments.length === 0) {
                return;
              }
              if (arguments.length === 1) {
                $3.each(events, function() {
                  that._fireEvent(this.name, this.data, this.log, this.noFire, context);
                });
                return Utils.objectLength(events);
              }
              if (!Array.isArray(events) && typeof events !== "string") {
                return;
              }
              _events = Array.isArray(events) ? events : events.toArray(",");
              $3.each(_events, function() {
                that._fireEvent(this, data2, log, noFire, context);
              });
            },
            _setLocale: function() {
              const lang = this.element.closest("[lang]");
              if (lang.length > 0) {
                this.locale = lang.attr("lang");
              } else {
                this.locale = $3("html").attr("lang") || "en";
              }
              this.strings = $3.extend({}, Metro2.locales["en"], Metro2.locales[this.locale]);
            },
            getComponent: function() {
              return this.component;
            },
            getComponentName: function() {
              return this.name;
            }
          },
          compObj
        );
        Metro2.plugin(name2, component);
        return component;
      },
      fetch: {
        status: (response) => response.ok ? Promise.resolve(response) : Promise.reject(new Error(response.statusText)),
        json: (response) => response.json(),
        text: (response) => response.text(),
        form: (response) => response.formData(),
        blob: (response) => response.blob(),
        buffer: (response) => response.arrayBuffer()
      },
      i18n: {
        language: "en",
        load(lang = "en") {
          Metro2.i18n.language = Metro2.locales[lang] ? lang : "en";
          Metro2.locale = Metro2.locales[Metro2.i18n.language];
        },
        add(id, data2) {
          Metro2.locales[id] = data2;
        },
        get(key, locale) {
          return Metro2.locales[locale][key] || "";
        },
        updateUI(from = document, lang) {
          if (!lang) {
            lang = $3.html().attr("lang") || "en";
          }
          if (!Metro2.locales[lang]) {
            return;
          }
          Metro2.i18n.load(lang);
          $3.html().attr("lang", lang);
          from.querySelectorAll("[data-i18n]").forEach((el) => {
            const key = el.getAttribute("data-i18n");
            el.innerHTML = Metro2.i18n.get(key, lang);
          });
        },
        extend(data2) {
          $3.each(data2, (key, value) => {
            Metro2.locales[key] = Object.assign({}, Metro2.locales[key], value);
          });
        }
      }
    };
    Object.assign(Metro2, Props);
    $3(globalThis).on(Metro2.events.resize, () => {
      globalThis["METRO_MEDIA"] = [];
      $3.each(Metro2.media_queries, (key, query) => {
        if (Metro2.utils.media(query)) {
          globalThis["METRO_MEDIA"].push(Metro2.media_mode[key]);
        }
      });
    });
    globalThis["Metro"] = Metro2;
    if (globalThis["METRO_INIT"] === true) {
      $3(() => {
        Metro2.init();
      });
    }
    return Metro2;
  })();

  // source/i18n/en.js
  (function() {
    Metro.i18n.add("en", {
      weekStart: 0,
      january: "January",
      february: "February",
      march: "March",
      april: "April",
      may: "May",
      june: "June",
      july: "July",
      august: "August",
      september: "September",
      october: "October",
      november: "November",
      december: "December",
      january_short: "Jan",
      february_short: "Feb",
      march_short: "Mar",
      april_short: "Apr",
      may_short: "May",
      june_short: "Jun",
      july_short: "Jul",
      august_short: "Aug",
      september_short: "Sep",
      october_short: "Oct",
      november_short: "Nov",
      december_short: "Dec",
      sunday: "Sunday",
      monday: "Monday",
      tuesday: "Tuesday",
      wednesday: "Wednesday",
      thursday: "Thursday",
      friday: "Friday",
      saturday: "Saturday",
      sunday_short: "Sun",
      monday_short: "Mon",
      tuesday_short: "Tue",
      wednesday_short: "Wed",
      thursday_short: "Thu",
      friday_short: "Fri",
      saturday_short: "Sat",
      sunday_short_2: "Su",
      monday_short_2: "Mo",
      tuesday_short_2: "Tu",
      wednesday_short_2: "We",
      thursday_short_2: "Th",
      friday_short_2: "Fr",
      saturday_short_2: "Sa",
      label_ok: "OK",
      label_cancel: "Cancel",
      label_done: "Done",
      label_today: "Today",
      label_now: "Now",
      label_clear: "Clear",
      label_help: "Help",
      label_yes: "Yes",
      label_no: "No",
      label_random: "Random",
      label_save: "Save",
      label_reset: "Reset",
      label_submit: "Submit",
      label_add_user_color: "Add to swatches",
      label_send: "Send",
      label_accept: "Accept",
      label_cookies_title: "This site uses cookies",
      label_cookies_text: "This website uses cookies to ensure you get the best experience on our website.",
      label_choose_file: "Choose file(s)",
      label_drop_file: "Click or drop file(s) here",
      label_files_selected: "{n} file(s) selected",
      label_days: "days",
      label_hours: "hours",
      label_minutes: "min",
      label_seconds: "sec",
      label_month: "mon",
      label_months: "mon's",
      label_day: "day",
      label_year: "year",
      label_years: "years",
      label_rows_count: "Show:",
      label_search: "Search:",
      label_table_info: "Showing $1 to $2 of $3 entries",
      label_prev: "Prev",
      label_next: "Next",
      label_all: "All",
      label_inspector: "Inspector",
      label_goto_page: "Goto",
      label_enter_page: "Enter page...",
      label_empty: "Nothing to show",
      label_user_colors: "User Colors",
      label_tiles: "Tiles",
      label_list: "List",
      label_load_more: "Load more",
      label_buy: "Buy",
      label_buy_now: "Buy now",
      label_buy_today: "Buy today",
      label_download: "Download",
      label_search_results: "Search results",
      label_add: "Add",
      label_edit: "Edit",
      label_delete: "Delete",
      label_new: "New",
      label_sell: "Sell",
      label_details: "Details",
      label_sorting: "Sorting",
      label_on: "on",
      label_off: "off",
      label_rename_tab: "Rename tab",
      label_close_tab: "Close tab",
      label_close_other_tabs: "Close other tabs",
      label_close_tabs_left: "Close tabs left",
      label_close_tabs_right: "Close tabs right",
      label_close_all_tabs: "Close all tabs",
      label_close_inactive_tabs: "Close inactive tabs",
      label_clear_input: "Clear input",
      label_reveal_password: "Reveal password",
      label_hide_password: "Hide password",
      label_generate_random: "Generate random value",
      label_search_input: "Search for the entered value",
      label_note: "Note",
      label_tip: "Tip",
      label_info: "Info",
      label_warning: "Warning",
      label_question: "Question",
      label_error: "Error",
      label_success: "Success",
      label_caution: "Caution",
      label_alert: "Alert",
      label_bug: "Bug",
      label_fuck: "Fuck",
      label_important: "Important",
      label_select_all: "Select all",
      label_select_more: "Select...",
      label_select: "Select",
      label_filter: "Filter"
    });
  })();

  // source/i18n/ua.js
  (function() {
    Metro.i18n.add("ua", {
      weekStart: 1,
      january: "\u0421\u0456\u0447\u0435\u043D\u044C",
      february: "\u041B\u044E\u0442\u0438\u0439",
      march: "\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044C",
      april: "\u041A\u0432\u0456\u0442\u0435\u043D\u044C",
      may: "\u0422\u0440\u0430\u0432\u0435\u043D\u044C",
      june: "\u0427\u0435\u0440\u0432\u0435\u043D\u044C",
      july: "\u041B\u0438\u043F\u0435\u043D\u044C",
      august: "\u0421\u0435\u0440\u043F\u0435\u043D\u044C",
      september: "\u0412\u0435\u0440\u0435\u0441\u0435\u043D\u044C",
      october: "\u0416\u043E\u0432\u0442\u0435\u043D\u044C",
      november: "\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434",
      december: "\u0413\u0440\u0443\u0434\u0435\u043D\u044C",
      january_short: "\u0421\u0456\u0447",
      february_short: "\u041B\u044E\u0442",
      march_short: "\u0411\u0435\u0440",
      april_short: "\u041A\u0432\u0456",
      may_short: "\u0422\u0440\u0430",
      june_short: "\u0427\u0435\u0440",
      july_short: "\u041B\u0438\u043F",
      august_short: "\u0421\u0435\u0440",
      september_short: "\u0412\u0435\u0440",
      october_short: "\u0416\u043E\u0432",
      november_short: "\u041B\u0438\u0441",
      december_short: "\u0413\u0440\u0443",
      sunday: "\u041D\u0435\u0434\u0456\u043B\u044F",
      monday: "\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A",
      tuesday: "\u0412\u0456\u0432\u0442\u043E\u0440\u043E\u043A",
      wednesday: "\u0421\u0435\u0440\u0435\u0434\u0430",
      thursday: "\u0427\u0435\u0442\u0432\u0435\u0440",
      friday: "\u041F'\u044F\u0442\u043D\u0438\u0446\u044F",
      saturday: "\u0421\u0443\u0431\u043E\u0442\u0430",
      sunday_short: "\u041D\u0435\u0434",
      monday_short: "\u041F\u043E\u043D",
      tuesday_short: "\u0412\u0456\u0432",
      wednesday_short: "\u0421\u0435\u0440",
      thursday_short: "\u0427\u0435\u0442",
      friday_short: "\u041F\u0442\u043D",
      saturday_short: "\u0421\u0443\u0431",
      sunday_short_2: "\u041D\u0434",
      monday_short_2: "\u041F\u043D",
      tuesday_short_2: "\u0412\u0442",
      wednesday_short_2: "\u0421\u0440",
      thursday_short_2: "\u0427\u0442",
      friday_short_2: "\u041F\u0442",
      saturday_short_2: "\u0421\u0431",
      label_ok: "OK",
      label_cancel: "\u0412\u0456\u0434\u043C\u0456\u043D\u0430",
      label_done: "\u0412\u0438\u043A\u043E\u043D\u0430\u043D\u043E",
      label_today: "\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456",
      label_now: "\u0417\u0430\u0440\u0430\u0437",
      label_clear: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u0438",
      label_help: "\u0414\u043E\u043F\u043E\u043C\u043E\u0433\u0430",
      label_yes: "\u0422\u0430\u043A",
      label_no: "\u041D\u0456",
      label_random: "\u0412\u0438\u043F\u0430\u0434\u043A\u043E\u0432\u043E",
      label_save: "\u0417\u0431\u0435\u0440\u0456\u0433\u0442\u0438",
      label_reset: "\u0421\u043A\u0438\u043D\u0443\u0442\u0438",
      label_submit: "\u0412\u0456\u0434\u043F\u0440\u0430\u0432\u0438\u0442\u0438",
      label_add_user_color: "\u0414\u043E\u0434\u0430\u0442\u0438 \u0434\u043E \u0437\u0440\u0430\u0437\u043A\u0456\u0432",
      label_send: "\u0412\u0456\u0434\u043F\u0440\u0430\u0432\u0438\u0442\u0438",
      label_accept: "\u041F\u0440\u0438\u0439\u043D\u044F\u0442\u0438",
      label_cookies_title: "\u0426\u0435\u0439 \u0441\u0430\u0439\u0442 \u0432\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u043E\u0432\u0443\u0454 \u0444\u0430\u0439\u043B\u0438 cookie",
      label_cookies_text: "\u0426\u0435\u0439 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442 \u0432\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u043E\u0432\u0443\u0454 \u0444\u0430\u0439\u043B\u0438 cookie, \u0449\u043E\u0431 \u0437\u0430\u0431\u0435\u0437\u043F\u0435\u0447\u0438\u0442\u0438 \u0432\u0430\u043C \u043D\u0430\u0439\u043A\u0440\u0430\u0449\u0438\u0439 \u0434\u043E\u0441\u0432\u0456\u0434 \u0432\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u0430\u043D\u043D\u044F \u043D\u0430\u0448\u043E\u0433\u043E \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u0443.",
      label_choose_file: "\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044C \u0444\u0430\u0439\u043B(\u0438)",
      label_drop_file: "\u041D\u0430\u0442\u0438\u0441\u043D\u0456\u0442\u044C \u0430\u0431\u043E \u043F\u0435\u0440\u0435\u0442\u044F\u0433\u043D\u0456\u0442\u044C \u0444\u0430\u0439\u043B(\u0438) \u0441\u044E\u0434\u0438",
      label_files_selected: "\u0412\u0438\u0431\u0440\u0430\u043D\u043E {n} \u0444\u0430\u0439\u043B(\u0456\u0432)",
      label_days: "\u0434\u043D\u0456",
      label_hours: "\u0433\u043E\u0434",
      label_minutes: "\u0445\u0432\u0438\u043B",
      label_seconds: "\u0441\u0435\u043A",
      label_month: "\u043C\u0456\u0441",
      label_months: "\u043C\u0456\u0441\u044F\u0446\u0456",
      label_day: "\u0434\u0435\u043D\u044C",
      label_year: "\u0440\u0456\u043A",
      label_years: "\u0440\u043E\u043A\u0456\u0432",
      label_rows_count: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438:",
      label_search: "\u041F\u043E\u0448\u0443\u043A:",
      label_table_info: "\u0412\u0456\u0434\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u043E \u0437 $1 \u043F\u043E $2 \u0456\u0437 $3 \u0437\u0430\u043F\u0438\u0441\u0456\u0432",
      label_prev: "\u041F\u043E\u043F\u0435\u0440",
      label_next: "\u041D\u0430\u0441\u0442",
      label_all: "\u0423\u0441\u0456",
      label_inspector: "\u0406\u043D\u0441\u043F\u0435\u043A\u0442\u043E\u0440",
      label_goto_page: "\u041F\u0435\u0440\u0435\u0439\u0442\u0438",
      label_enter_page: "\u0412\u0432\u0435\u0434\u0456\u0442\u044C \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443...",
      label_empty: "\u041D\u0456\u0447\u043E\u0433\u043E \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u0438",
      label_user_colors: "\u041A\u043E\u043B\u044C\u043E\u0440\u0438 \u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430",
      label_tiles: "\u041F\u043B\u0438\u0442\u043A\u0430",
      label_list: "\u0421\u043F\u0438\u0441\u043E\u043A",
      label_load_more: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0449\u0435",
      label_buy: "\u041A\u0443\u043F\u0438\u0442\u0438",
      label_buy_now: "\u041A\u0443\u043F\u0438\u0442\u0438 \u0437\u0430\u0440\u0430\u0437",
      label_buy_today: "\u041A\u0443\u043F\u0438\u0442\u0438 \u0441\u044C\u043E\u0433\u043E\u0434\u043D\u0456",
      label_download: "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0438\u0442\u0438",
      label_search_results: "\u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0438 \u043F\u043E\u0448\u0443\u043A\u0443",
      label_add: "\u0414\u043E\u0434\u0430\u0442\u0438",
      label_edit: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438",
      label_delete: "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438",
      label_new: "\u041D\u043E\u0432\u0435",
      label_sell: "\u041F\u0440\u043E\u0434\u0430\u0442\u0438",
      label_details: "\u041F\u043E\u0434\u0440\u043E\u0431\u0438\u0446\u0456",
      label_sorting: "\u0421\u043E\u0440\u0442\u0443\u0432\u0430\u043D\u043D\u044F",
      label_on: "\u0443\u0432\u043C",
      label_off: "\u0432\u0438\u043C",
      label_rename_tab: "\u041F\u0435\u0440\u0435\u0439\u043C\u0435\u043D\u0443\u0432\u0430\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0443",
      label_close_tab: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0443",
      label_close_other_tabs: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0456\u043D\u0448\u0456 \u0432\u043A\u043B\u0430\u0434\u043A\u0438",
      label_close_tabs_left: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u043B\u0456\u0432\u043E\u0440\u0443\u0447",
      label_close_tabs_right: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u043F\u0440\u0430\u0432\u043E\u0440\u0443\u0447",
      label_close_all_tabs: "\u0417\u0430\u043A\u0440\u0438\u0439\u0442\u0435 \u0432\u0441\u0456 \u0432\u043A\u043B\u0430\u0434\u043A\u0438",
      label_close_inactive_tabs: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u043D\u0435\u0430\u043A\u0442\u0438\u0432\u043D\u0456 \u0432\u043A\u043B\u0430\u0434\u043A\u0438",
      label_clear_input: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u0438 \u0432\u0432\u0435\u0434\u0435\u043D\u043D\u044F",
      label_reveal_password: "\u0412\u0456\u0434\u043A\u0440\u0438\u0442\u0438 \u043F\u0430\u0440\u043E\u043B\u044C",
      label_hide_password: "\u041F\u0440\u0438\u0445\u043E\u0432\u0430\u0442\u0438 \u043F\u0430\u0440\u043E\u043B\u044C",
      label_generate_random: "\u0413\u0435\u043D\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u0432\u0438\u043F\u0430\u0434\u043A\u043E\u0432e \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F",
      label_search_input: "\u0428\u0443\u043A\u0430\u0442\u0438 \u0432\u0432\u0435\u0434\u0435\u043D\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F",
      label_note: "\u041F\u0440\u0438\u043C\u0456\u0442\u043A\u0430",
      label_tip: "\u041F\u0456\u0434\u043A\u0430\u0437\u043A\u0430",
      label_info: "\u0406\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0456\u044F",
      label_warning: "\u0423\u0432\u0430\u0433\u0430",
      label_question: "\u041F\u0438\u0442\u0430\u043D\u043D\u044F",
      label_error: "\u041F\u043E\u043C\u0438\u043B\u043A\u0430",
      label_success: "\u0423\u0441\u043F\u0456\u0445",
      label_caution: "\u041E\u0431\u0435\u0440\u0435\u0436\u043D\u043E",
      label_alert: "\u041F\u043E\u043F\u0435\u0440\u0435\u0434\u0436\u0435\u043D\u043D\u044F",
      label_bug: "\u041F\u043E\u043C\u0438\u043B\u043A\u0430",
      label_fuck: "\u0411\u043B\u044F",
      label_important: "\u0412\u0430\u0436\u043B\u0438\u0432\u043E",
      label_select_all: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0443\u0441\u0456",
      label_select_more: "\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044C...",
      label_select: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438",
      label_filter: "\u0424\u0456\u043B\u044C\u0442\u0440"
    });
  })();

  // source/i18n/pt-BR.js
  (function() {
    Metro.i18n.add("pt-BR", {
      weekStart: 0,
      january: "Janeiro",
      february: "Fevereiro",
      march: "Mar\xE7o",
      april: "Abril",
      may: "Maio",
      june: "Junho",
      july: "Julho",
      august: "Agosto",
      september: "Setembro",
      october: "Outubro",
      november: "Novembro",
      december: "Dezembro",
      january_short: "Jan",
      february_short: "Fev",
      march_short: "Mar",
      april_short: "Abr",
      may_short: "Mai",
      june_short: "Jun",
      july_short: "Jul",
      august_short: "Ago",
      september_short: "Set",
      october_short: "Out",
      november_short: "Nov",
      december_short: "Dez",
      sunday: "Domingo",
      monday: "Segunda",
      tuesday: "Ter\xE7a",
      wednesday: "Quarta",
      thursday: "Quinta",
      friday: "Sexta",
      saturday: "S\xE1bado",
      sunday_short: "Dom",
      monday_short: "Seg",
      tuesday_short: "Ter",
      wednesday_short: "Qua",
      thursday_short: "Qui",
      friday_short: "Sex",
      saturday_short: "S\xE1b",
      sunday_short_2: "D",
      monday_short_2: "S",
      tuesday_short_2: "T",
      wednesday_short_2: "Q",
      thursday_short_2: "Q",
      friday_short_2: "S",
      saturday_short_2: "S",
      label_ok: "OK",
      label_cancel: "Cancelar",
      label_done: "Pronto",
      label_today: "Hoje",
      label_now: "Agora",
      label_clear: "Limpar",
      label_help: "Ajuda",
      label_yes: "Sim",
      label_no: "N\xE3o",
      label_random: "Aleat\xF3rio",
      label_save: "Salvar",
      label_reset: "Resetar",
      label_submit: "Enviar",
      label_add_user_color: "Adicionar \xE0s amostras",
      label_send: "Enviar",
      label_accept: "Aceitar",
      label_cookies_title: "Este site usa cookis",
      label_cookies_text: "Este site utiliza cookies para garantir que voc\xEA tenha a melhor experi\xEAncia.",
      label_choose_file: "Escolher arquivo(s)",
      label_drop_file: "Clique ou solte arquivo(s) aqui",
      label_files_selected: "{n} arquivo(s) selecionado(s)",
      label_days: "dias",
      label_hours: "horas",
      label_minutes: "min",
      label_seconds: "seg",
      label_month: "m\xEAs",
      label_months: "meses",
      label_day: "dia",
      label_year: "ano",
      label_years: "anos",
      label_rows_count: "Exibir:",
      label_search: "Pesquisar:",
      label_table_info: "Exibindo de $1 at\xE9 $2 de um total de $3 registros",
      label_prev: "Anterior",
      label_next: "Pr\xF3ximo",
      label_all: "Todos",
      label_inspector: "Inspetor",
      label_goto_page: "Ir para",
      label_enter_page: "Digite a p\xE1gina...",
      label_empty: "Nada para exibir",
      label_user_colors: "Cores do usu\xE1rio",
      label_tiles: "Blocos",
      label_list: "Lista",
      label_load_more: "Carregar mais",
      label_buy: "Comprar",
      label_buy_now: "Comprar agora",
      label_buy_today: "Comprar hoje",
      label_download: "Download",
      label_search_results: "Pesquisar resultados",
      label_add: "Adicionar",
      label_edit: "Editar",
      label_delete: "Excluir",
      label_new: "Novo",
      label_sell: "Vender",
      label_details: "Detalhes",
      label_sorting: "Ordenar",
      label_on: "lig",
      label_off: "deslig",
      label_rename_tab: "Renomear aba",
      label_close_tab: "Fechar aba",
      label_close_other_tabs: "Fechar outras abas",
      label_close_tabs_left: "Fechar abas a esquerda",
      label_close_tabs_right: "Fechar abas a direita",
      label_close_all_tabs: "Fechar todas as abas",
      label_close_inactive_tabs: "Fechar abas inativas",
      label_clear_input: "Limpar",
      label_reveal_password: "Mostrar senha",
      label_hide_password: "Ocultar senha",
      label_generate_random: "Gerar valor aleat\xF3rio",
      label_search_input: "Pesquisar pelo valor",
      label_note: "Nota",
      label_tip: "Dica",
      label_info: "Informa\xE7\xE3o",
      label_warning: "Aviso",
      label_question: "Quest\xE3o",
      label_error: "Erro",
      label_success: "Sucesso",
      label_caution: "Cuidado",
      label_alert: "Alerta",
      label_bug: "Bug",
      label_fuck: "Falha catastr\xF3tico",
      label_important: "Importante",
      label_select_all: "Select all",
      label_select_more: "Select...",
      label_select: "Select",
      label_filter: "Filter"
    });
  })();

  // source/i18n/es-ES.js
  (function() {
    Metro.i18n.add("es-ES", {
      weekStart: 0,
      january: "Enero",
      february: "Febrero",
      march: "Marzo",
      april: "Abril",
      may: "Mayo",
      june: "Junio",
      july: "Julio",
      august: "Agosto",
      september: "Septiembre",
      october: "Octubre",
      november: "Noviembre",
      december: "Diciembre",
      january_short: "Ene",
      february_short: "Feb",
      march_short: "Mar",
      april_short: "Abr",
      may_short: "May",
      june_short: "Jun",
      july_short: "Jul",
      august_short: "Ago",
      september_short: "Sep",
      october_short: "Oct",
      november_short: "Nov",
      december_short: "Dic",
      sunday: "Domingo",
      monday: "Lunes",
      tuesday: "Martes",
      wednesday: "Mi\xE9rcoles",
      thursday: "Jueves",
      friday: "Viernes",
      saturday: "S\xE1bado",
      sunday_short: "Dom",
      monday_short: "Lun",
      tuesday_short: "Mar",
      wednesday_short: "Mi\xE9",
      thursday_short: "Jue",
      friday_short: "Vie",
      saturday_short: "S\xE1b",
      sunday_short_2: "D",
      monday_short_2: "L",
      tuesday_short_2: "M",
      wednesday_short_2: "M",
      thursday_short_2: "J",
      friday_short_2: "V",
      saturday_short_2: "S",
      label_ok: "OK",
      label_cancel: "Cancelar",
      label_done: "Listo",
      label_today: "Hoy",
      label_now: "Ahora",
      label_clear: "Limpiar",
      label_help: "Ayuda",
      label_yes: "S\xED",
      label_no: "No",
      label_random: "Aleatorio",
      label_save: "Guardar",
      label_reset: "Restablecer",
      label_submit: "Enviar",
      label_add_user_color: "Agregar a la paleta",
      label_send: "Enviar",
      label_accept: "Aceptar",
      label_cookies_title: "Este sitio usa cookies",
      label_cookies_text: "Este sitio utiliza cookies para garantizar que tengas la mejor experiencia.",
      label_choose_file: "Elegir archivo(s)",
      label_drop_file: "Haz clic o suelta archivo(s) aqu\xED",
      label_files_selected: "{n} archivo(s) seleccionado(s)",
      label_days: "d\xEDas",
      label_hours: "horas",
      label_minutes: "min",
      label_seconds: "seg",
      label_month: "mes",
      label_months: "meses",
      label_day: "d\xEDa",
      label_year: "a\xF1o",
      label_years: "a\xF1os",
      label_rows_count: "Mostrar:",
      label_search: "Buscar:",
      label_table_info: "Mostrando de $1 a $2 de un total de $3 registros",
      label_prev: "Anterior",
      label_next: "Siguiente",
      label_all: "Todos",
      label_inspector: "Inspector",
      label_goto_page: "Ir a la p\xE1gina",
      label_enter_page: "Escribe la p\xE1gina...",
      label_empty: "Nada para mostrar",
      label_user_colors: "Colores del usuario",
      label_tiles: "Cuadr\xEDculas",
      label_list: "Lista",
      label_load_more: "Cargar m\xE1s",
      label_buy: "Comprar",
      label_buy_now: "Comprar ahora",
      label_buy_today: "Comprar hoy",
      label_download: "Descargar",
      label_search_results: "Buscar resultados",
      label_add: "Agregar",
      label_edit: "Editar",
      label_delete: "Eliminar",
      label_new: "Nuevo",
      label_sell: "Vender",
      label_details: "Detalles",
      label_sorting: "Ordenar",
      label_on: "encendido",
      label_off: "apagado",
      label_rename_tab: "Renombrar pesta\xF1a",
      label_close_tab: "Cerrar pesta\xF1a",
      label_close_other_tabs: "Cerrar otras pesta\xF1as",
      label_close_tabs_left: "Cerrar pesta\xF1as a la izquierda",
      label_close_tabs_right: "Cerrar pesta\xF1as a la derecha",
      label_close_all_tabs: "Cerrar todas las pesta\xF1as",
      label_close_inactive_tabs: "Cerrar pesta\xF1as inactivas",
      label_clear_input: "Limpiar",
      label_reveal_password: "Mostrar contrase\xF1a",
      label_hide_password: "Ocultar contrase\xF1a",
      label_generate_random: "Generar valor aleatorio",
      label_search_input: "Buscar por valor",
      label_note: "Nota",
      label_tip: "Consejo",
      label_info: "Informaci\xF3n",
      label_warning: "Advertencia",
      label_question: "Pregunta",
      label_error: "Error",
      label_success: "\xC9xito",
      label_caution: "Precauci\xF3n",
      label_alert: "Alerta",
      label_bug: "Bug",
      label_fuck: "Falla catastr\xF3fica",
      label_important: "Importante",
      label_select_all: "Select all",
      label_select_more: "Select...",
      label_select: "Select",
      label_filter: "Filter"
    });
  })();

  // source/extensions/array.js
  (function() {
    "use strict";
    if (typeof Array.prototype.shuffle !== "function") {
      Array.prototype.shuffle = function() {
        var currentIndex = this.length, temporaryValue, randomIndex;
        while (0 !== currentIndex) {
          randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex -= 1;
          temporaryValue = this[currentIndex];
          this[currentIndex] = this[randomIndex];
          this[randomIndex] = temporaryValue;
        }
        return this;
      };
    }
    if (typeof Array.prototype.clone !== "function") {
      Array.prototype.clone = function() {
        return this.slice(0);
      };
    }
    if (typeof Array.prototype.unique !== "function") {
      Array.prototype.unique = function() {
        var a2 = this.concat();
        for (var i3 = 0; i3 < a2.length; ++i3) {
          for (var j2 = i3 + 1; j2 < a2.length; ++j2) {
            if (a2[i3] === a2[j2])
              a2.splice(j2--, 1);
          }
        }
        return a2;
      };
    }
    if (typeof Array.prototype.pack !== "function") {
      Array.prototype.pack = function() {
        return this.map((n2) => n2.trim()).filter(Boolean);
      };
    }
  })();

  // source/extensions/number.js
  (function() {
    "use strict";
    Number.prototype.format = function(n2, x2, s2, c) {
      var re3 = "\\d(?=(\\d{" + (x2 || 3) + "})+" + (n2 > 0 ? "\\D" : "$") + ")", num = this.toFixed(Math.max(0, ~~n2));
      return (c ? num.replace(".", c) : num).replace(new RegExp(re3, "g"), "$&" + (s2 || ","));
    };
  })();

  // source/extensions/string.js
  (function() {
    "use strict";
    String.prototype.toArray = function(delimiter = ",", type = "string", format, locale) {
      var str3 = this;
      var a2;
      format = format === void 0 || format === null ? false : format;
      a2 = ("" + str3).split(delimiter);
      return a2.map(function(s2) {
        var result;
        switch (type) {
          case "int":
          case "integer":
            result = isNaN(s2) ? s2.trim() : parseInt(s2);
            break;
          case "number":
          case "float":
            result = isNaN(s2) ? s2 : parseFloat(s2);
            break;
          case "date":
            result = !format ? datetime(s2) : Datetime.from(s2, format, locale || "en-US");
            break;
          default:
            result = s2.trim();
        }
        return result;
      });
    };
    String.prototype.capitalize = function() {
      var str3 = this;
      return str3.substr(0, 1).toUpperCase() + str3.substr(1);
    };
  })();

  // source/common-js/utilities.js
  (function(Metro2, $3) {
    "use strict";
    Metro2.utils = {
      nothing: function() {
      },
      noop: function() {
      },
      elementId: function(prefix) {
        return prefix + "-" + (/* @__PURE__ */ new Date()).getTime() + $3.random(1, 1e3);
      },
      secondsToTime: function(s2) {
        const days = Math.floor(s2 % 31536e3 / 86400);
        const hours = Math.floor(s2 % 31536e3 % 86400 / 3600);
        const minutes = Math.floor(s2 % 31536e3 % 86400 % 3600 / 60);
        const seconds = Math.round(s2 % 31536e3 % 86400 % 3600 % 60);
        return {
          d: days,
          h: hours,
          m: minutes,
          s: seconds
        };
      },
      secondsToFormattedString: function(time2) {
        const sec_num = parseInt(time2, 10);
        const hours = Math.floor(sec_num / 3600);
        const minutes = Math.floor((sec_num - hours * 3600) / 60);
        const seconds = sec_num - hours * 3600 - minutes * 60;
        return [
          Str.lpad(hours, "0", 2),
          Str.lpad(minutes, "0", 2),
          Str.lpad(seconds, "0", 2)
        ].join(":");
      },
      func: function(f3) {
        return new Function("a", f3);
      },
      exec: function(f3, args, context) {
        let result;
        if (f3 === void 0 || f3 === null) {
          return false;
        }
        let func = this.isFunc(f3);
        if (func === false) {
          func = this.func(f3);
        }
        try {
          result = func.apply(context, args);
        } catch (err) {
          result = null;
          if (globalThis["METRO_THROWS"] === true) {
            throw err;
          }
        }
        return result;
      },
      embedUrl: function(val) {
        if (val.indexOf("youtu.be") !== -1) {
          val = "https://www.youtube.com/embed/" + val.split("/").pop();
        }
        return "<div class='embed-container'><iframe src='" + val + "'></iframe></div>";
      },
      isVisible: function(element2) {
        const el = $3(element2)[0];
        return this.getStyleOne(el, "display") !== "none" && this.getStyleOne(el, "visibility") !== "hidden" && el.offsetParent !== null;
      },
      isUrl: function(val) {
        return /^(\.\/|\.\.\/|ftp|http|https):\/\/(\w+:?\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@\-\/]))?/.test(
          val
        );
      },
      isTag: function(val) {
        return /^<\/?[\w\s="\/.':;#-\/?]+>/gi.test(val);
      },
      isEmbedObject: function(val) {
        const embed2 = ["iframe", "object", "embed", "video"];
        let result = false;
        $3.each(embed2, function() {
          if (typeof val === "string" && val.toLowerCase() === this) {
            result = true;
          } else if (val.nodeType !== void 0 && val.tagName.toLowerCase() === this) {
            result = true;
          }
        });
        return result;
      },
      isVideoUrl: function(val) {
        return /youtu\.be|youtube|twitch|vimeo/gi.test(val);
      },
      isDate: function(val, format, locale = "en-US") {
        let result;
        if (this.isDateObject(val)) {
          return true;
        }
        try {
          result = format ? Datetime.from(val, format, locale) : datetime(val);
          return Datetime.isDatetime(result);
        } catch (e) {
          return false;
        }
      },
      isDateObject: function(v2) {
        return typeof v2 === "object" && v2.getMonth !== void 0;
      },
      isInt: function(n2) {
        return !isNaN(n2) && +n2 % 1 === 0;
      },
      isFloat: function(n2) {
        return !isNaN(n2) && +n2 % 1 !== 0 || /^\d*\.\d+$/.test(n2);
      },
      isFunc: function(f3) {
        return this.isType(f3, "function");
      },
      isObject: function(o2) {
        return this.isType(o2, "object");
      },
      isObject2: function(o2) {
        return typeof o2 === "object" && !Array.isArray(o2);
      },
      isType: function(o2, t) {
        if (!this.isValue(o2)) {
          return false;
        }
        if (typeof o2 === t) {
          return o2;
        }
        if (("" + t).toLowerCase() === "tag" && this.isTag(o2)) {
          return o2;
        }
        if (("" + t).toLowerCase() === "url" && this.isUrl(o2)) {
          return o2;
        }
        if (("" + t).toLowerCase() === "array" && Array.isArray(o2)) {
          return o2;
        }
        if (t !== "string" && this.isTag(o2) || this.isUrl(o2)) {
          return false;
        }
        if (typeof window[o2] === t) {
          return window[o2];
        }
        if (typeof o2 === "string" && o2.indexOf(".") === -1) {
          return false;
        }
        if (typeof o2 === "string" && /[/\s([]+/gm.test(o2)) {
          return false;
        }
        if (typeof o2 === "number" && t.toLowerCase() !== "number") {
          return false;
        }
        const ns = o2.split(".");
        let i3, context = window;
        for (i3 = 0; i3 < ns.length; i3++) {
          context = context[ns[i3]];
        }
        return typeof context === t ? context : false;
      },
      $: function() {
        return globalThis["useJQuery"] ? globalThis["jQuery"] : Dom;
      },
      isMetroObject: function(el, type) {
        const $el = $3(el), el_obj = Metro2.getPlugin(el, type);
        if ($el.length === 0) {
          console.warn(type + " " + el + " not found!");
          return false;
        }
        if (el_obj === void 0) {
          console.warn(
            "Element not contain role " + type + '! Please add attribute data-role="' + type + '" to element ' + el
          );
          return false;
        }
        return true;
      },
      isJQuery: function(el) {
        return typeof globalThis["jQuery"] !== "undefined" && el instanceof globalThis["jQuery"];
      },
      isDom: function(el) {
        return typeof Dom !== "undefined" && el instanceof Dom;
      },
      isQ: function(el) {
        return this.isJQuery(el) || this.isDom(el);
      },
      isOutsider: function(element2) {
        const el = $3(element2);
        let inViewport;
        const clone = el.clone();
        clone.removeAttr("data-role").css({
          visibility: "hidden",
          position: "absolute",
          display: "block"
        });
        el.parent().append(clone);
        inViewport = this.inViewport(clone[0]);
        clone.remove();
        return !inViewport;
      },
      inViewport: function(el) {
        const rect = this.rect(el);
        return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (globalThis.innerHeight || document.documentElement.clientHeight) && rect.right <= (globalThis.innerWidth || document.documentElement.clientWidth);
      },
      rect: function(el) {
        return el.getBoundingClientRect();
      },
      getCursorPosition: function(el, e) {
        const a2 = this.rect(el);
        return {
          x: this.pageXY(e).x - a2.left - globalThis.scrollX,
          y: this.pageXY(e).y - a2.top - globalThis.scrollY
        };
      },
      getCursorPositionX: function(el, e) {
        return this.getCursorPosition(el, e).x;
      },
      getCursorPositionY: function(el, e) {
        return this.getCursorPosition(el, e).y;
      },
      objectLength: function(obj) {
        return Object.keys(obj).length;
      },
      percent: function(total, part, round_value) {
        if (total === 0) {
          return 0;
        }
        const result = part * 100 / total;
        return round_value === true ? Math.round(result) : Math.round(result * 100) / 100;
      },
      objectShift: function(obj) {
        let min = 0;
        $3.each(obj, function(i3) {
          if (min === 0) {
            min = i3;
          } else {
            if (min > i3) {
              min = i3;
            }
          }
        });
        delete obj[min];
        return obj;
      },
      objectDelete: function(obj, key) {
        if (key in obj) delete obj[key];
      },
      arrayDeleteByMultipleKeys: function(arr, keys) {
        keys.forEach(function(ind) {
          delete arr[ind];
        });
        return arr.filter(function(item) {
          return item !== void 0;
        });
      },
      arrayDelete: function(arr, val) {
        const i3 = arr.indexOf(val);
        if (i3 > -1) arr.splice(i3, 1);
      },
      arrayDeleteByKey: function(arr, key) {
        arr.splice(key, 1);
      },
      nvl: function(data2, other) {
        return data2 === void 0 || data2 === null ? other : data2;
      },
      objectClone: function(obj) {
        const copy = {};
        for (const key in obj) {
          if ($3.hasProp(obj, key)) {
            copy[key] = obj[key];
          }
        }
        return copy;
      },
      github: async function(repo, callback) {
        const res = await fetch(`https://api.github.com/repos/${repo}`);
        if (!res.ok) return;
        const data2 = await res.json();
        this.exec(callback, [data2]);
      },
      pageHeight: function() {
        const body2 = document.body, html2 = document.documentElement;
        return Math.max(
          body2.scrollHeight,
          body2.offsetHeight,
          html2.clientHeight,
          html2.scrollHeight,
          html2.offsetHeight
        );
      },
      cleanPreCode: function(selector) {
        const els = Array.prototype.slice.call(
          document.querySelectorAll(selector),
          0
        );
        els.forEach(function(el) {
          const txt = el.textContent.replace(/^[\r\n]+/, "").replace(/\s+$/g, "");
          if (/^\S/gm.test(txt)) {
            el.textContent = txt;
            return;
          }
          let mat, str3, re3 = /^[\t ]+/gm, len, min = 1e3;
          while (mat = re3.exec(txt)) {
            len = mat[0].length;
            if (len < min) {
              min = len;
              str3 = mat[0];
            }
          }
          if (min === 1e3) return;
          el.textContent = txt.replace(new RegExp("^" + str3, "gm"), "").trim();
        });
      },
      coords: function(element2) {
        const el = $3(element2)[0];
        const box = el.getBoundingClientRect();
        return {
          top: box.top + globalThis.pageYOffset,
          left: box.left + globalThis.pageXOffset
        };
      },
      /**
      * @param {TouchEvent|Event|MouseEvent} e
      * @param t where: client, screen, or page
      * @param s source: touches or changedTouches
      */
      positionXY: function(e, t, s2) {
        switch (t) {
          case "client":
            return this.clientXY(e, s2);
          case "screen":
            return this.screenXY(e, s2);
          case "page":
            return this.pageXY(e, s2);
          default:
            return { x: 0, y: 0 };
        }
      },
      /**
       *
       * @param {TouchEvent|Event|MouseEvent} e
       * @param t source: touches or changedTouches
       * @returns {{x: (*), y: (*)}}
       */
      clientXY: function(e, t = "touches") {
        return {
          x: e[t] ? e[t][0].clientX : e.clientX,
          y: e[t] ? e[t][0].clientY : e.clientY
        };
      },
      /**
       *
       * @param {TouchEvent|Event|MouseEvent} e
       * @param t source: touches or changedTouches
       * @returns {{x: (*), y: (*)}}
       */
      screenXY: function(e, t = "touches") {
        return {
          x: e[t] ? e[t][0].screenX : e.screenX,
          y: e[t] ? e[t][0].screenY : e.screenY
        };
      },
      /**
       *
       * @param {TouchEvent|Event|MouseEvent} e
       * @param t source: touches or changedTouches
       * @returns {{x: (*), y: (*)}}
       */
      pageXY: function(e, t = "touches") {
        return {
          x: e[t] ? e[t][0].pageX : e.pageX,
          y: e[t] ? e[t][0].pageY : e.pageY
        };
      },
      isRightMouse: function(e) {
        return "which" in e ? e.which === 3 : "button" in e ? e.button === 2 : void 0;
      },
      hiddenElementSize: function(el, includeMargin) {
        let width, height, clone = $3(el).clone(true);
        clone.removeAttr("data-role").css({
          visibility: "hidden",
          position: "absolute",
          display: "block"
        });
        $3("body").append(clone);
        if (!this.isValue(includeMargin)) {
          includeMargin = false;
        }
        width = clone.outerWidth(includeMargin);
        height = clone.outerHeight(includeMargin);
        clone.remove();
        return {
          width,
          height
        };
      },
      getStyle: function(element2) {
        const el = $3(element2)[0];
        return globalThis.getComputedStyle(el);
      },
      getStyleOne: function(el, property) {
        return this.getStyle(el).getPropertyValue(property);
      },
      getInlineStyles: function(element2) {
        let i3, l2, styles = {}, el = $3(element2)[0];
        for (i3 = 0, l2 = el.style.length; i3 < l2; i3++) {
          const s2 = el.style[i3];
          styles[s2] = el.style[s2];
        }
        return styles;
      },
      encodeURI: function(str3) {
        return encodeURI(str3).replace(/%5B/g, "[").replace(/%5D/g, "]");
      },
      updateURIParameter: function(uri, key, value) {
        const re3 = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        const separator = uri.indexOf("?") !== -1 ? "&" : "?";
        if (uri.match(re3)) {
          return uri.replace(re3, "$1" + key + "=" + value + "$2");
        } else {
          return uri + separator + key + "=" + value;
        }
      },
      getURIParameter: function(url, name2) {
        if (!url) url = globalThis.location.href;
        name2 = name2.replace(/[\[\]]/g, "\\$&");
        const regex = new RegExp("[?&]" + name2 + "(=([^&#]*)|&|#|$)"), results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return "";
        return decodeURIComponent(results[2].replace(/\+/g, " "));
      },
      getLocales: function() {
        return Object.keys(Metro2.locales);
      },
      addLocale: function(locale) {
        Metro2.locales = $3.extend({}, Metro2.locales, locale);
      },
      aspectRatioH: function(width, a2) {
        if (a2 === "16/9") return width * 9 / 16;
        if (a2 === "21/9") return width * 9 / 21;
        if (a2 === "4/3") return width * 3 / 4;
      },
      aspectRatioW: function(height, a2) {
        if (a2 === "16/9") return height * 16 / 9;
        if (a2 === "21/9") return height * 21 / 9;
        if (a2 === "4/3") return height * 4 / 3;
      },
      valueInObject: function(obj, value) {
        return Object.values(obj).indexOf(value) > -1;
      },
      keyInObject: function(obj, key) {
        return Object.keys(obj).indexOf(key) > -1;
      },
      inObject: function(obj, key, val) {
        return obj[key] !== void 0 && obj[key] === val;
      },
      newCssSheet: function(media) {
        const style = document.createElement("style");
        if (media !== void 0) {
          style.setAttribute("media", media);
        }
        style.appendChild(document.createTextNode(""));
        document.head.appendChild(style);
        return style.sheet;
      },
      addCssRule: function(sheet, selector, rules, index) {
        sheet.insertRule(selector + "{" + rules + "}", index);
      },
      media: function(query) {
        return globalThis.matchMedia(query).matches;
      },
      mediaModes: function() {
        return globalThis["METRO_MEDIA"];
      },
      mediaExist: function(media) {
        return globalThis["METRO_MEDIA"].indexOf(media) > -1;
      },
      inMedia: function(media) {
        return globalThis["METRO_MEDIA"].indexOf(media) > -1 && globalThis["METRO_MEDIA"].indexOf(media) === globalThis["METRO_MEDIA"].length - 1;
      },
      isValue: function(val) {
        return val !== void 0 && val !== null && val !== "";
      },
      isNull: function(val) {
        return val === void 0 || val === null;
      },
      isNegative: function(val) {
        return parseFloat(val) < 0;
      },
      isPositive: function(val) {
        return parseFloat(val) > 0;
      },
      isZero: function(val) {
        return parseFloat(val.toFixed(2)) === 0;
      },
      between: function(val, bottom, top, equals) {
        return equals === true ? val >= bottom && val <= top : val > bottom && val < top;
      },
      parseMoney: function(val) {
        return Number(parseFloat(val.replace(/[^0-9-.]/g, "")));
      },
      parseCard: function(val) {
        return val.replace(/[^0-9]/g, "");
      },
      parsePhone: function(val) {
        return this.parseCard(val);
      },
      parseNumber: function(val, thousand, decimal) {
        return val.replace(new RegExp("\\" + thousand, "g"), "").replace(new RegExp("\\" + decimal, "g"), ".");
      },
      nearest: function(val, precision, down) {
        val /= precision;
        val = Math[down === true ? "floor" : "ceil"](val) * precision;
        return val;
      },
      bool: function(value) {
        switch (value) {
          case true:
          case "true":
          case 1:
          case "1":
          case "on":
          case "yes":
            return true;
          default:
            return false;
        }
      },
      decCount: function(v2) {
        return v2 % 1 === 0 ? 0 : v2.toString().split(".")[1].length;
      },
      classNames: function() {
        const args = Array.prototype.slice.call(arguments, 0);
        const classes = [];
        for (let a2 of args) {
          if (!a2) continue;
          if (typeof a2 === "string") {
            classes.push(a2);
          } else if (Metro2.utils.isObject(a2)) {
            for (let k2 in a2) {
              if (a2[k2]) {
                classes.push(k2);
              }
            }
          } else {
            Metro2.utils.nothing();
          }
        }
        return classes.join(" ");
      },
      join: function() {
        const values = Array.prototype.slice.call(arguments, 0);
        const sep = values.pop();
        const classes = [];
        for (let a2 of values) {
          if (!a2) continue;
          classes.push(Metro2.utils.isObject(a2) ? Object.values(a2)[0] : a2);
        }
        return classes.join(sep);
      },
      copy2clipboard: function(v2, cb) {
        navigator.clipboard.writeText(v2).then(function() {
          Metro2.utils.exec(cb, [v2]);
        });
      },
      getCssVar: function(v2) {
        const root = document.documentElement;
        const style = getComputedStyle(root);
        return style.getPropertyValue(v2);
      },
      scrollTo: function(element2, options) {
        const elem = typeof element2 === "string" ? $3(element2)[0] : element2;
        elem.scrollIntoView({
          ...options,
          behavior: "smooth",
          block: "start"
        });
      }
    };
    if (globalThis["METRO_GLOBAL_COMMON"] === true) {
      globalThis["Utils"] = Metro2.utils;
    }
  })(Metro, Dom);

  // source/components/carousel/animations.js
  (function(Metro2, $3) {
    "use strict";
    let AnimationDefaultConfig = {
      duration: METRO_ANIMATION_DURATION,
      ease: "linear"
    };
    Metro2.Effects = {
      switchIn: function(el) {
        $3(el).hide().css({
          left: 0,
          top: 0
        }).show();
      },
      switchOut: function(el) {
        $3(el).hide();
      },
      switch: function(current, next) {
        this.switchOut(current);
        this.switchIn(next);
      },
      slideUpIn: function(el, o2) {
        let op, $el = $3(el);
        const h7 = $el.parent().outerHeight(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          top: h7,
          left: 0,
          zIndex: 2
        }).animate({
          draw: {
            top: 0,
            opacity: 1
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideUpOut: function(el, o2) {
        let op, $el = $3(el);
        const h7 = $el.parent().outerHeight(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          zIndex: 1
        }).animate({
          draw: {
            top: -h7,
            opacity: 0
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideUp: function(current, next, o2) {
        this.slideUpOut(current, o2);
        this.slideUpIn(next, o2);
      },
      slideDownIn: function(el, o2) {
        let op, $el = $3(el);
        const h7 = $el.parent().outerHeight(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          left: 0,
          top: -h7,
          zIndex: 2
        }).animate({
          draw: {
            top: 0,
            opacity: 1
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideDownOut: function(el, o2) {
        let op, $el = $3(el);
        const h7 = $el.parent().outerHeight(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          zIndex: 1
        }).animate({
          draw: {
            top: h7,
            opacity: 0
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideDown: function(current, next, o2) {
        this.slideDownOut(current, o2);
        this.slideDownIn(next, o2);
      },
      slideLeftIn: function(el, o2) {
        let op, $el = $3(el);
        const w2 = $el.parent().outerWidth(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          left: w2,
          zIndex: 2
        }).animate({
          draw: {
            left: 0,
            opacity: 1
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideLeftOut: function(el, o2) {
        let op, $el = $3(el);
        const w2 = $el.parent().outerWidth(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          zIndex: 1
        }).animate({
          draw: {
            left: -w2,
            opacity: 0
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideLeft: function(current, next, o2) {
        this.slideLeftOut(current, o2);
        this.slideLeftIn(next, o2);
      },
      slideRightIn: function(el, o2) {
        let op, $el = $3(el);
        const w2 = $el.parent().outerWidth(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          left: -w2,
          zIndex: 2
        }).animate({
          draw: {
            left: 0,
            opacity: 1
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideRightOut: function(el, o2) {
        let op, $el = $3(el);
        const w2 = $el.parent().outerWidth(true);
        op = $3.extend({}, AnimationDefaultConfig, o2);
        $el.css({
          zIndex: 1
        }).animate({
          draw: {
            left: w2,
            opacity: 0
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      slideRight: function(current, next, o2) {
        this.slideRightOut(current, o2);
        this.slideRightIn(next, o2);
      },
      fadeIn: function(el, o2) {
        const op = $3.extend({}, AnimationDefaultConfig, o2);
        const $el = $3(el);
        $el.css({
          top: 0,
          left: 0,
          opacity: 0
        }).animate({
          draw: {
            opacity: 1
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      fadeOut: function(el, o2) {
        const op = $3.extend({}, AnimationDefaultConfig, o2);
        const $el = $3(el);
        $el.animate({
          draw: {
            opacity: 0
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      fade: function(current, next, o2) {
        this.fadeOut(current, o2);
        this.fadeIn(next, o2);
      },
      zoomIn: function(el, o2) {
        const op = $3.extend({}, AnimationDefaultConfig, o2);
        const $el = $3(el);
        $el.css({
          top: 0,
          left: 0,
          opacity: 0,
          transform: "scale(3)",
          zIndex: 2
        }).animate({
          draw: {
            scale: 1,
            opacity: 1
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      zoomOut: function(el, o2) {
        const op = $3.extend({}, AnimationDefaultConfig, o2);
        const $el = $3(el);
        $el.css({
          zIndex: 1
        }).animate({
          draw: {
            scale: 3,
            opacity: 0
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      zoom: function(current, next, o2) {
        this.zoomOut(current, o2);
        this.zoomIn(next, o2);
      },
      swirlIn: function(el, o2) {
        const op = $3.extend({}, AnimationDefaultConfig, o2);
        const $el = $3(el);
        $el.css({
          top: 0,
          left: 0,
          opacity: 0,
          transform: "scale(3) rotate(180deg)",
          zIndex: 2
        }).animate({
          draw: {
            scale: 1,
            rotate: 0,
            opacity: 1
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      swirlOut: function(el, o2) {
        const op = $3.extend({}, AnimationDefaultConfig, o2);
        const $el = $3(el);
        $el.css({
          zIndex: 1
        }).animate({
          draw: {
            scale: 3,
            rotate: "180deg",
            opacity: 0
          },
          dur: op.duration,
          ease: op.ease
        });
      },
      swirl: function(current, next, o2) {
        this.swirlOut(current, o2);
        this.swirlIn(next, o2);
      }
    };
  })(Metro, Dom);

  // source/components/accordion/accordion.js
  (function(Metro2, $3) {
    "use strict";
    let AccordionDefaultConfig = {
      accordionDeferred: 0,
      showMarker: true,
      material: false,
      duration: METRO_ANIMATION_DURATION,
      oneFrame: true,
      showActive: true,
      clsFrame: "",
      clsHeading: "",
      clsContent: "",
      clsAccordion: "",
      clsActiveFrame: "",
      clsActiveFrameHeading: "",
      clsActiveFrameContent: "",
      onFrameOpen: Metro2.noop,
      onFrameBeforeOpen: Metro2.noop_true,
      onFrameClose: Metro2.noop,
      onFrameBeforeClose: Metro2.noop_true,
      onAccordionCreate: Metro2.noop
    };
    Metro2.accordionSetup = function(options) {
      AccordionDefaultConfig = $3.extend({}, AccordionDefaultConfig, options);
    };
    if (typeof globalThis["metroAccordionSetup"] !== void 0) {
      Metro2.accordionSetup(globalThis["metroAccordionSetup"]);
    }
    Metro2.Component("accordion", {
      init: function(options, elem) {
        this._super(elem, options, AccordionDefaultConfig);
        return this;
      },
      _create: function() {
        const element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("accordionCreate", {
          element: element2
        });
      },
      _createStructure: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const frames = element2.children(".frame");
        const active = element2.children(".frame.active");
        let frame_to_open;
        element2.addClass("accordion").addClass(o2.clsAccordion);
        frames.addClass(o2.clsFrame).each(function() {
          const el = $3(this);
          el.children(".heading").addClass(o2.clsHeading);
          el.children(".content").addClass(o2.clsContent);
        });
        if (o2.showMarker === true) {
          element2.addClass("marker-on");
        }
        if (o2.material === true) {
          element2.addClass("material");
        }
        if (active.length === 0) {
          frame_to_open = frames[0];
        } else {
          frame_to_open = active[0];
        }
        this._hideAll();
        if (o2.showActive === true) {
          if (o2.oneFrame === true) {
            this._openFrame(frame_to_open);
          } else {
            $3.each(active, function() {
              that._openFrame(this);
            });
          }
        }
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const active = element2.children(".frame.active");
        element2.on(Metro2.events.click, ".heading", function() {
          const heading2 = $3(this);
          const frame2 = heading2.parent();
          if (heading2.closest(".accordion")[0] !== element2[0]) {
            return false;
          }
          if (frame2.hasClass("active")) {
            if (active.length === 1 && o2.oneFrame) {
            } else {
              that._closeFrame(frame2);
            }
          } else {
            that._openFrame(frame2);
          }
        });
      },
      _openFrame: function(f3) {
        const element2 = this.element, o2 = this.options;
        const frame2 = $3(f3);
        if (Metro2.utils.exec(o2.onFrameBeforeOpen, [frame2[0]], element2[0]) === false) {
          return false;
        }
        if (o2.oneFrame === true) {
          this._closeAll(frame2[0]);
        }
        frame2.addClass("active").addClass(o2.clsActiveFrame);
        frame2.children(".heading").addClass(o2.clsActiveFrameHeading);
        frame2.children(".content").addClass(o2.clsActiveFrameContent).slideDown(o2.duration);
        this._fireEvent("frameOpen", {
          frame: frame2[0]
        });
      },
      _closeFrame: function(f3) {
        const element2 = this.element, o2 = this.options;
        const frame2 = $3(f3);
        if (!frame2.hasClass("active")) {
          return;
        }
        if (Metro2.utils.exec(o2.onFrameBeforeClose, [frame2[0]], element2[0]) === false) {
          return;
        }
        frame2.removeClass("active").removeClass(o2.clsActiveFrame);
        frame2.children(".heading").removeClass(o2.clsActiveFrameHeading);
        frame2.children(".content").removeClass(o2.clsActiveFrameContent).slideUp(o2.duration);
        this._fireEvent("frameClose", {
          frame: frame2[0]
        });
      },
      _closeAll: function(skip) {
        const that = this, element2 = this.element;
        const frames = element2.children(".frame");
        $3.each(frames, function() {
          if (skip === this) return;
          that._closeFrame(this);
        });
      },
      _hideAll: function() {
        const element2 = this.element;
        const frames = element2.children(".frame");
        $3.each(frames, function() {
          $3(this).children(".content").hide();
        });
      },
      _openAll: function() {
        const that = this, element2 = this.element;
        const frames = element2.children(".frame");
        $3.each(frames, function() {
          that._openFrame(this);
        });
      },
      open: function(i3) {
        const frame2 = this.element.children(".frame").eq(i3);
        this._openFrame(frame2);
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attr, newVal) {
      },
      destroy: function() {
        const element2 = this.element;
        element2.off(Metro2.events.click, ".heading");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/dialog/dialog.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var DialogDefaultConfig = {
      dialogDeferred: 0,
      closeButton: false,
      leaveOverlayOnClose: false,
      toTop: false,
      toBottom: false,
      title: "",
      content: "",
      customButtons: null,
      actionsAlign: "right",
      defaultActions: true,
      defaultActionButtons: "ok, cancel, help",
      overlay: true,
      overlayColor: "#000000",
      overlayAlpha: 0.5,
      overlayClickClose: false,
      width: "auto",
      height: "auto",
      closeAction: true,
      clsDialog: "",
      clsTitle: "",
      clsContent: "",
      clsAction: "",
      clsDefaultAction: "",
      clsOverlay: "",
      autoHide: 0,
      removeOnClose: false,
      show: false,
      _runtime: false,
      onOk: Metro2.noop,
      onCancel: Metro2.noop,
      onHelp: Metro2.noop,
      onShow: Metro2.noop,
      onHide: Metro2.noop,
      onOpen: Metro2.noop,
      onClose: Metro2.noop,
      onDialogCreate: Metro2.noop
    };
    Metro2.dialogSetup = function(options) {
      DialogDefaultConfig = $3.extend({}, DialogDefaultConfig, options);
    };
    if (typeof globalThis["metroDialogSetup"] !== void 0) {
      Metro2.dialogSetup(globalThis["metroDialogSetup"]);
    }
    Metro2.Component("dialog", {
      _counter: 0,
      init: function(options, elem) {
        this._super(elem, options, DialogDefaultConfig, {
          interval: null,
          overlay: null,
          id: Utils.elementId("dialog")
        });
        return this;
      },
      _create: function() {
        this._build();
      },
      _build: function() {
        var that = this, element2 = this.element, o2 = this.options, strings = this.strings;
        var body2 = $3("body");
        var overlay;
        element2.addClass("dialog");
        if (o2.title !== "") {
          this.setTitle(o2.title);
        }
        if (o2.content !== "") {
          this.setContent(o2.content);
        }
        if (o2.defaultActions === true || o2.customButtons) {
          var buttons = element2.find(".dialog-actions");
          var button2;
          if (buttons.length === 0) {
            buttons = $3("<div>").addClass("dialog-actions").addClass("text-" + o2.actionsAlign).appendTo(element2);
          }
          if (o2.defaultActions === true && element2.find(".dialog-actions > *").length === 0) {
            for (let b2 of o2.defaultActionButtons.toArray(",")) {
              button2 = $3("<button>").addClass(b2 !== "help" ? ".js-dialog-close" : "").addClass(o2.clsDefaultAction).html(strings[`label_${b2}`]);
              button2.appendTo(buttons);
              if (b2 === "ok") {
                button2.on(Metro2.events.click, function() {
                  Utils.exec(o2.onOk, [element2]);
                });
              }
              if (b2 === "help") {
                button2.on(Metro2.events.click, function() {
                  Utils.exec(o2.onHelp, [element2]);
                });
              }
              if (b2 === "cancel") {
                button2.on(Metro2.events.click, function() {
                  Utils.exec(o2.onCancel, [element2]);
                });
              }
            }
          }
          const customButtons = Utils.isObject(o2.customButtons);
          if (Array.isArray(customButtons))
            $3.each(customButtons, function() {
              var item = this;
              button2 = $3("<button>").addClass("button").addClass(item.cls).html(item.text);
              if (item.onclick !== void 0)
                button2.on(Metro2.events.click, function() {
                  Utils.exec(item.onclick, [element2]);
                });
              button2.appendTo(buttons);
            });
        }
        if (o2.overlay === true) {
          overlay = this._overlay();
          this.overlay = overlay;
        }
        if (o2.closeAction === true) {
          element2.on(Metro2.events.click, ".js-dialog-close", function() {
            that.close();
          });
        }
        var closer = element2.find("closer");
        if (closer.length === 0) {
          closer = $3("<span>").addClass("closer js-dialog-close");
          closer.appendTo(element2);
        }
        if (o2.closeButton !== true) {
          closer.hide();
        }
        element2.css({
          height: o2.height,
          visibility: "hidden",
          top: "100%"
        });
        if (o2.width !== "auto") {
          element2.css({
            width: o2.width
          });
        }
        element2.addClass(o2.clsDialog);
        element2.find(".dialog-title").addClass(o2.clsTitle);
        element2.find(".dialog-content").addClass(o2.clsContent);
        element2.find(".dialog-actions").addClass(o2.clsAction);
        element2.appendTo(body2);
        if (o2.show) {
          this.open();
        }
        $3(globalThis).on(
          Metro2.events.resize,
          function() {
            that.setPosition();
          },
          { ns: this.id }
        );
        this._fireEvent("dialog-create", {
          element: element2
        });
      },
      _overlay: function() {
        var o2 = this.options;
        var overlay = $3("<div>");
        overlay.addClass("overlay").addClass(o2.clsOverlay);
        if (o2.overlayColor === "transparent") {
          overlay.addClass("transparent");
        } else {
          overlay.css({
            background: Farbe.Routines.toRGBA(Farbe.Routines.parse(o2.overlayColor), o2.overlayAlpha)
          });
        }
        return overlay;
      },
      hide: function(callback) {
        var element2 = this.element, o2 = this.options;
        var timeout = 0;
        if (o2.onHide !== Metro2.noop) {
          timeout = 500;
          this._fireEvent("hide");
        }
        setTimeout(function() {
          Utils.exec(callback, null, element2[0]);
          element2.css({
            visibility: "hidden",
            top: "100%"
          });
        }, timeout);
      },
      show: function(callback) {
        var element2 = this.element;
        this.setPosition();
        element2.css({
          visibility: "visible"
        });
        this._fireEvent("show");
        Utils.exec(callback, null, element2[0]);
      },
      setPosition: function() {
        var element2 = this.element, o2 = this.options;
        var top, bottom;
        if (o2.toTop !== true && o2.toBottom !== true) {
          top = ($3(globalThis).height() - element2.outerHeight()) / 2;
          if (top < 0) {
            top = 0;
          }
          bottom = "auto";
        } else {
          if (o2.toTop === true) {
            top = 0;
            bottom = "auto";
          }
          if (o2.toTop !== true && o2.toBottom === true) {
            bottom = 0;
            top = "auto";
          }
        }
        element2.css({
          top,
          bottom,
          left: ($3(globalThis).width() - element2.outerWidth()) / 2
        });
      },
      setContent: function(c) {
        var element2 = this.element;
        var content = element2.find(".dialog-content");
        if (content.length === 0) {
          content = $3("<div>").addClass("dialog-content");
          content.appendTo(element2);
        }
        if (!Utils.isQ(c) && Utils.isFunc(c)) {
          c = Utils.exec(c);
        }
        if (Utils.isQ(c)) {
          c.appendTo(content);
        } else {
          content.html(c);
        }
      },
      setTitle: function(t) {
        var element2 = this.element;
        var title3 = element2.find(".dialog-title");
        if (title3.length === 0) {
          title3 = $3("<div>").addClass("dialog-title");
          title3.appendTo(element2);
        }
        title3.html(t);
      },
      close: function() {
        var that = this, element2 = this.element, o2 = this.options;
        if (!Utils.bool(o2.leaveOverlayOnClose)) {
          $3("body").find(".overlay").remove();
        }
        this.hide(function() {
          element2.data("open", false);
          that._fireEvent("close");
          if (o2.removeOnClose === true) {
            element2.remove();
          }
        });
      },
      open: function() {
        var that = this, element2 = this.element, o2 = this.options;
        if (o2.overlay === true && $3(".overlay").length === 0) {
          this.overlay.appendTo($3("body"));
          if (o2.overlayClickClose === true) {
            this.overlay.on(Metro2.events.click, function() {
              that.close();
            });
          }
        }
        this.show(function() {
          that._fireEvent("open");
          element2.data("open", true);
          if (parseInt(o2.autoHide) > 0) {
            setTimeout(function() {
              that.close();
            }, parseInt(o2.autoHide));
          }
        });
      },
      toggle: function() {
        var element2 = this.element;
        if (element2.data("open")) {
          this.close();
        } else {
          this.open();
        }
      },
      isOpen: function() {
        return this.element.data("open") === true;
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".js-dialog-close");
        element2.find(".button").off(Metro2.events.click);
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
    Metro2.dialog = {
      isDialog: function(el) {
        return Utils.isMetroObject(el, "dialog");
      },
      open: function(el, content, title3) {
        if (!this.isDialog(el)) {
          return false;
        }
        var dialog2 = Metro2.getPlugin(el, "dialog");
        if (title3 !== void 0) {
          dialog2.setTitle(title3);
        }
        if (content !== void 0) {
          dialog2.setContent(content);
        }
        dialog2.open();
      },
      close: function(el) {
        if (!this.isDialog(el)) {
          return false;
        }
        Metro2.getPlugin($3(el)[0], "dialog").close();
      },
      toggle: function(el) {
        if (!this.isDialog(el)) {
          return false;
        }
        Metro2.getPlugin($3(el)[0], "dialog").toggle();
      },
      isOpen: function(el) {
        if (!this.isDialog(el)) {
          return false;
        }
        Metro2.getPlugin($3(el)[0], "dialog").isOpen();
      },
      remove: function(el) {
        if (!this.isDialog(el)) {
          return false;
        }
        var dialog2 = Metro2.getPlugin($3(el)[0], "dialog");
        dialog2.options.removeOnClose = true;
        dialog2.close();
      },
      create: function(options) {
        var dlg;
        dlg = $3("<div>").appendTo($3("body"));
        var dlg_options = $3.extend(
          {},
          {
            show: true,
            closeAction: true,
            removeOnClose: true
          },
          options !== void 0 ? options : {}
        );
        dlg_options._runtime = true;
        return Metro2.makePlugin(dlg, "dialog", dlg_options);
      }
    };
  })(Metro, Dom);

  // source/components/activity/activity.js
  (function(Metro2, $3) {
    "use strict";
    var ActivityDefaultConfig = {
      activityDeferred: 0,
      type: "ring",
      style: "",
      size: 64,
      radius: 20,
      onActivityCreate: Metro2.noop
    };
    Metro2.activitySetup = function(options) {
      ActivityDefaultConfig = $3.extend({}, ActivityDefaultConfig, options);
    };
    if (typeof globalThis["metroActivitySetup"] !== void 0) {
      Metro2.activitySetup(globalThis["metroActivitySetup"]);
    }
    Metro2.Component("activity", {
      init: function(options, elem) {
        this._super(elem, options, ActivityDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        var i3, wrap2;
        element2.html("").addClass(o2.style === "dark" ? "dark-side" : o2.style === "color" ? "color-style" : "").addClass("activity-" + o2.type);
        function _metro() {
          for (i3 = 0; i3 < 5; i3++) {
            $3("<div/>").addClass("circle").appendTo(element2);
          }
        }
        function _square() {
          for (i3 = 0; i3 < 4; i3++) {
            $3("<div/>").addClass("square").appendTo(element2);
          }
        }
        function _cycle() {
          $3("<div/>").addClass("cycle").appendTo(element2);
        }
        function _ring() {
          for (i3 = 0; i3 < 5; i3++) {
            wrap2 = $3("<div/>").addClass("wrap").appendTo(element2);
            $3("<div/>").addClass("circle").appendTo(wrap2);
          }
        }
        function _simple() {
          $3('<svg class="circular"><circle class="path" cx="' + o2.size / 2 + '" cy="' + o2.size / 2 + '" r="' + o2.radius + '" fill="none" stroke-width="2" stroke-miterlimit="10"/></svg>').appendTo(element2);
        }
        function _atom() {
          for (i3 = 0; i3 < 3; i3++) {
            $3("<span/>").addClass("electron").appendTo(element2);
          }
        }
        function _bars() {
          for (i3 = 0; i3 < 6; i3++) {
            $3("<span/>").addClass("bar").appendTo(element2);
          }
        }
        switch (o2.type) {
          case "metro":
            _metro();
            break;
          case "square":
            _square();
            break;
          case "cycle":
            _cycle();
            break;
          case "simple":
            _simple();
            break;
          case "atom":
            _atom();
            break;
          case "bars":
            _bars();
            break;
          default:
            _ring();
        }
        this._fireEvent("activity-create", {
          element: element2
        });
      },
      /*eslint-disable-next-line*/
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        return this.element;
      }
    });
    Metro2.activity = {
      open: function(options) {
        var o2 = options || {};
        var activity = '<div data-role="activity" data-type="' + (o2.type ? o2.type : "cycle") + '" data-style="' + (o2.style ? o2.style : "color") + '"></div>';
        var text = o2.text ? '<div class="text-center">' + o2.text + "</div>" : "";
        return Metro2.dialog.create({
          content: activity + text,
          defaultActions: false,
          clsContent: "d-flex flex-column flex-justify-center flex-align-center bg-transparent no-shadow w-auto",
          clsDialog: "no-border no-shadow bg-transparent global-dialog",
          autoHide: o2.autoHide ? o2.autoHide : 0,
          overlayClickClose: o2.overlayClickClose === true,
          overlayColor: o2.overlayColor ? o2.overlayColor : "#000000",
          overlayAlpha: o2.overlayAlpha ? o2.overlayAlpha : 0.5,
          clsOverlay: "global-overlay"
        });
      },
      close: function(a2) {
        Metro2.dialog.close(a2);
      }
    };
  })(Metro, Dom);

  // source/components/adblock/adblock.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var AdblockDefaultConfig = {
      adblockDeferred: 0,
      checkInterval: 1e3,
      fireOnce: true,
      checkStop: 10,
      localhost: false,
      onAlert: Metro2.noop,
      onFishingStart: Metro2.noop,
      onFishingDone: Metro2.noop
    };
    Metro2.adblockSetup = function(options) {
      AdblockDefaultConfig = $3.extend({}, AdblockDefaultConfig, options);
    };
    if (typeof globalThis["metroAdblockSetup"] !== void 0) {
      Metro2.adblockSetup(globalThis["metroAdblockSetup"]);
    }
    var Adblock = {
      bite: function() {
        var classes = "adblock-bite adsense google-adsense dblclick advert topad top_ads topAds textads sponsoredtextlink_container show_ads right-banner rekl mpu module-ad mid_ad mediaget horizontal_ad headerAd contentAd brand-link bottombanner bottom_ad_block block_ad bannertop banner-right banner-body b-banner b-article-aside__banner b-advert adwrapper adverts advertisment advertisement:not(body) advertise advert_list adtable adsense adpic adlist adleft adinfo adi adholder adframe addiv ad_text ad_space ad_right ad_links ad_body ad_block ad_Right adTitle adText";
        $3("<div>").addClass(classes.split(" ").shuffle().join(" ")).css({
          position: "fixed",
          height: 1,
          width: 1,
          overflow: "hidden",
          visibility: "visible",
          top: 0,
          left: 0
        }).append($3("<a href='https://dblclick.net'>").html("dblclick.net")).appendTo("body");
        if (Adblock.options.adblockDeferred) {
          setTimeout(function() {
            Adblock.fishing();
          }, Adblock.options.adblockDeferred);
        } else this.fishing();
      },
      fishing: function() {
        var o2 = Adblock.options;
        var checks = typeof o2.fireOnce === "number" ? o2.fireOnce : 0;
        var checkStop = o2.checkStop;
        var interval = false;
        var run = function() {
          var a2 = $3(".adsense.google-adsense.dblclick.advert.adblock-bite");
          var b2 = a2.find("a");
          var done = function() {
            clearInterval(interval);
            Utils.exec(o2.onFishingDone);
            $3(globalThis).fire("fishing-done");
            a2.remove();
          };
          if (!o2.localhost && $3.localhost) {
            done();
            return;
          }
          if (!a2.length || !b2.length || a2.css("display").indexOf("none") > -1 || b2.css("display").indexOf("none") > -1) {
            Utils.exec(Adblock.options.onAlert);
            $3(globalThis).fire("adblock-alert");
            if (Adblock.options.fireOnce === true) {
              done();
            } else {
              checks--;
              if (checks === 0) {
                done();
              }
            }
          } else {
            if (checkStop !== false) {
              checkStop--;
              if (checkStop === 0) {
                done();
              }
            }
          }
        };
        Utils.exec(o2.onFishingStart);
        $3(globalThis).fire("fishing-start");
        interval = setInterval(function() {
          run();
        }, Adblock.options.checkInterval);
        run();
      }
    };
    Metro2.Adblock = Adblock;
    $3(function() {
      Adblock.options = $3.extend({}, AdblockDefaultConfig);
      $3(globalThis).on("metro-initiated", function() {
        Adblock.bite();
      });
    });
  })(Metro, Dom);

  // source/components/analog-clock/analog-clock.js
  (function(Metro2, $3) {
    "use strict";
    var AnalogClockDefaultConfig = {
      icon: null,
      showNumbers: false,
      showMoon: true,
      showDay: true,
      showDigitalClock: true,
      timeFormat: 24,
      onAnalogClockCreate: Metro2.noop
    };
    Metro2.analogClockSetup = function(options) {
      AnalogClockDefaultConfig = $3.extend({}, AnalogClockDefaultConfig, options);
    };
    if (typeof window["metroAnalogClockSetup"] !== void 0) {
      Metro2.analogClockSetup(window["metroAnalogClockSetup"]);
    }
    Metro2.Component("analog-clock", {
      init: function(options, elem) {
        this._super(elem, options, AnalogClockDefaultConfig, {
          // define instance vars here
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        this._createStructure();
        this._createEvents();
        this._fireEvent("analog-clock-create");
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        const now = datetime();
        element2.addClass("analog-clock");
        if (o2.showNumbers) {
          element2.addClass("show-numbers");
        }
        for (let i3 = 1; i3 <= 12; i3++) {
          element2.append(`<label class="dash" style="--i: ${i3}"><span>${o2.showNumbers ? i3 : "|"}</span></label>`);
        }
        for (let i3 = 1; i3 <= 90; i3++) {
          if (i3 % 5 === 0) {
            continue;
          }
          element2.append(`<label class="secondary-dash" style="--i2: ${i3}"><span>|</span></label>`);
        }
        element2.append(`
                <div class="hands">
                    <div class="hour"></div>                
                    <div class="minute"></div>                
                    <div class="second"></div>                
                </div>
                  
            `);
        element2.append(`
                <div class="day-month">
                    <div class="day-month-inner">
                        <div class="day">${now.format("DD", this.locale)}</div>
                        <div class="month">${now.format("MMM", this.locale)}</div>                    
                    </div>
                    <div class="week-day">${now.format("dddd", this.locale)}</div>
                </div>
            `);
        if (o2.showDay === false) {
          element2.find(".day-month").hide();
        }
        element2.append(`
                <div class="digital-clock">
                    <div class="dc-hour">${now.format(o2.timeFormat === 24 ? "HH" : "hh", this.locale)}</div>
                    <div class="dc-minute">${now.format("mm", this.locale)}</div>
                    <div class="dc-second">${now.format("ss", this.locale)}</div>
                </div>
            `);
        if (o2.showDigitalClock === false) {
          element2.find(".digital-clock").hide();
        }
        if (o2.icon) {
          element2.append(`<div class="icon">${o2.icon}</div>`);
        }
        if (o2.showMoon === true) {
          element2.append(`<div class="moon"></div>`);
        }
        this._updateTime();
        setInterval(() => {
          element2.toggleClass("tick");
        }, 500);
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
      },
      _updateTime: function() {
        const element2 = this.element, o2 = this.options;
        const secondHand = element2.find(".second");
        const minuteHand = element2.find(".minute");
        const hourHand = element2.find(".hour");
        const secondDig = element2.find(".dc-second");
        const minuteDig = element2.find(".dc-minute");
        const hourDig = element2.find(".dc-hour");
        const dayEl = element2.find(".day");
        const monthEl = element2.find(".month");
        const moonEl = element2.find(".moon");
        const updateTime = () => {
          let date = datetime(), sec = date.second() / 60 * 360, min = date.minute() / 60 * 360, hr3 = date.hour12() / 12 * 360, day = date.format("DD", this.locale), month = date.format("MMM", this.locale), moon = date.moon();
          secondHand[0].style.transform = `rotate(${sec}deg)`;
          minuteHand[0].style.transform = `rotate(${min}deg)`;
          hourHand[0].style.transform = `rotate(${hr3}deg)`;
          dayEl.html(day);
          monthEl.html(month);
          moonEl.removeClass("").addClass(`${moon.name}`);
          hourDig[0].innerHTML = date.format(o2.timeFormat === 24 ? "HH" : "hh", this.locale);
          minuteDig[0].innerHTML = date.format("mm", this.locale);
          secondDig[0].innerHTML = date.format("ss", this.locale);
        };
        updateTime();
        setInterval(updateTime, 1e3);
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/app-bar/app-bar.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var AppBarDefaultConfig = {
      appbarDeferred: 0,
      expand: false,
      expandPoint: null,
      duration: 100,
      onMenuOpen: Metro2.noop,
      onMenuClose: Metro2.noop,
      onBeforeMenuOpen: Metro2.noop,
      onBeforeMenuClose: Metro2.noop,
      onMenuCollapse: Metro2.noop,
      onMenuExpand: Metro2.noop,
      onAppBarCreate: Metro2.noop
    };
    Metro2.appBarSetup = function(options) {
      AppBarDefaultConfig = $3.extend({}, AppBarDefaultConfig, options);
    };
    if (typeof globalThis["metroAppBarSetup"] !== void 0) {
      Metro2.appBarSetup(globalThis["metroAppBarSetup"]);
    }
    Metro2.Component("app-bar", {
      init: function(options, elem) {
        this._super(elem, options, AppBarDefaultConfig, {
          id: Utils.elementId("app-bar")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("app-bar-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var hamburger, menu, elementColor = Utils.getStyleOne(element2, "background-color");
        element2.addClass("app-bar");
        hamburger = element2.find(".hamburger");
        if (hamburger.length === 0) {
          hamburger = $3("<button>").attr("type", "button").addClass("hamburger menu-down");
          for (var i3 = 0; i3 < 3; i3++) {
            $3("<span>").addClass("line").appendTo(hamburger);
          }
        }
        element2.prepend(hamburger);
        menu = element2.find(".app-bar-menu");
        if (menu.length === 0) {
          hamburger.css("display", "none");
        } else {
          Utils.addCssRule(Metro2.sheet, ".app-bar-menu li", "list-style: none!important;");
        }
        if (hamburger.css("display") === "block") {
          menu.hide().addClass("collapsed");
          hamburger.removeClass("hidden");
        } else {
          hamburger.addClass("hidden");
        }
        if (o2.expand === true) {
          element2.addClass("app-bar-expand");
          hamburger.addClass("hidden");
        } else {
          if (Utils.isValue(o2.expandPoint) && Utils.mediaExist(o2.expandPoint)) {
            element2.addClass("app-bar-expand");
            hamburger.addClass("hidden");
          }
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var menu = element2.find(".app-bar-menu");
        var hamburger = element2.find(".hamburger");
        element2.on(Metro2.events.click, ".hamburger", function() {
          if (menu.length === 0) return;
          var collapsed = menu.hasClass("collapsed");
          if (collapsed) {
            that.open();
          } else {
            that.close();
          }
        });
        $3(globalThis).on(
          Metro2.events.resize,
          function() {
            if (o2.expand !== true) {
              if (Utils.isValue(o2.expandPoint) && Utils.mediaExist(o2.expandPoint)) {
                element2.addClass("app-bar-expand");
                that._fireEvent("menu-expand");
              } else {
                element2.removeClass("app-bar-expand");
                that._fireEvent("menu-collapse");
              }
            }
            if (menu.length === 0) {
              hamburger.addClass("hidden");
              return;
            }
            menu.removeClass("opened").removeClass("collapsed");
            if (hamburger.css("display") !== "block") {
              hamburger.addClass("hidden");
              menu.show();
            } else {
              hamburger.removeClass("hidden");
              if (hamburger.hasClass("active")) {
                menu.removeClass("collapsed").addClass("opened");
              } else {
                menu.addClass("collapsed").removeClass("opened");
              }
            }
          },
          { ns: this.id }
        );
      },
      close: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var menu = element2.find(".app-bar-menu");
        var hamburger = element2.find(".hamburger");
        that._fireEvent("before-menu-close", {
          menu: menu[0]
        });
        menu.slideUp(o2.duration, function() {
          menu.addClass("collapsed").removeClass("opened");
          hamburger.removeClass("active");
          that._fireEvent("menu-close", {
            menu: menu[0]
          });
        });
      },
      open: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var menu = element2.find(".app-bar-menu");
        var hamburger = element2.find(".hamburger");
        that._fireEvent("before-menu-open", {
          menu: menu[0]
        });
        menu.slideDown(o2.duration, function() {
          menu.removeClass("collapsed").addClass("opened");
          hamburger.addClass("active");
          that._fireEvent("menu-open", {
            menu: menu[0]
          });
        });
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".hamburger");
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/audio-button/audio-button.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var AudioButtonDefaultConfig = {
      audioVolume: 0.5,
      audioSrc: "",
      onAudioStart: Metro2.noop,
      onAudioEnd: Metro2.noop,
      onAudioButtonCreate: Metro2.noop
    };
    Metro2.audioButtonSetup = function(options) {
      AudioButtonDefaultConfig = $3.extend({}, AudioButtonDefaultConfig, options);
    };
    if (typeof globalThis["metroAudioButtonSetup"] !== void 0) {
      Metro2.audioButtonSetup(globalThis["metroAudioButtonSetup"]);
    }
    Metro2.Component("audio-button", {
      init: function(options, elem) {
        this._super(elem, options, AudioButtonDefaultConfig, {
          audio: null,
          canPlay: null,
          id: Utils.elementId("audioButton")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("audioButtonCreate", {
          element: element2
        });
      },
      _createStructure: function() {
        var o2 = this.options;
        this.audio = new Audio(o2.audioSrc);
        this.audio.volume = o2.audioVolume;
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var audio2 = this.audio;
        audio2.addEventListener("loadeddata", function() {
          that.canPlay = true;
        });
        audio2.addEventListener("ended", function() {
          that._fireEvent("audioEnd", {
            src: o2.audioSrc,
            audio: audio2
          });
        });
        element2.on(Metro2.events.click, function() {
          that.play();
        }, { ns: this.id });
      },
      play: function(cb) {
        var element2 = this.element, o2 = this.options;
        var audio2 = this.audio;
        if (o2.audioSrc !== "" && this.audio.duration && this.canPlay) {
          this._fireEvent("audioStart", {
            src: o2.audioSrc,
            audio: audio2
          });
          audio2.pause();
          audio2.currentTime = 0;
          audio2.play();
          Utils.exec(cb, [audio2], element2[0]);
        }
      },
      stop: function(cb) {
        var element2 = this.element, o2 = this.options;
        var audio2 = this.audio;
        audio2.pause();
        audio2.currentTime = 0;
        this._fireEvent("audioEnd", {
          src: o2.audioSrc,
          audio: audio2
        });
        Utils.exec(cb, [audio2], element2[0]);
      },
      changeAttribute: function(attributeName) {
        var element2 = this.element, o2 = this.options;
        var audio2 = this.audio;
        var changeSrc = function() {
          var src = element2.attr("data-audio-src");
          if (src && src.trim() !== "") {
            o2.audioSrc = src;
            audio2.src = src;
          }
        };
        var changeVolume = function() {
          var volume = parseFloat(element2.attr("data-audio-volume"));
          if (isNaN(volume)) {
            return;
          }
          o2.audioVolume = volume;
          audio2.volume = volume;
        };
        if (attributeName === "data-audio-src") {
          changeSrc();
        }
        if (attributeName === "data-audio-volume") {
          changeVolume();
        }
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, { ns: this.id });
      }
    });
    Metro2["playSound"] = function(data2) {
      var audio2;
      var src = typeof data2 === "string" ? data2 : data2.audioSrc;
      var volume = data2 && data2.audioVolume ? data2.audioVolume : 0.5;
      if (!src) {
        return;
      }
      audio2 = new Audio(src);
      audio2.volume = parseFloat(volume);
      audio2.addEventListener("loadeddata", function() {
        if (data2 && data2.onAudioStart)
          Utils.exec(data2.onAudioStart, [src], this);
        this.play();
      });
      audio2.addEventListener("ended", function() {
        if (data2 && data2.onAudioEnd)
          Utils.exec(data2.onAudioEnd, [null], this);
      });
    };
  })(Metro, Dom);

  // source/components/slider/slider.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var SliderDefaultConfig = {
      sliderDeferred: 0,
      roundValue: true,
      min: 0,
      max: 100,
      accuracy: 0,
      showMinMax: false,
      minMaxPosition: Metro2.position.TOP,
      value: 0,
      buffer: 0,
      hint: false,
      hintAlways: false,
      hintPosition: Metro2.position.TOP,
      hintMask: "$1",
      vertical: false,
      target: null,
      returnType: "value",
      // value or percent
      size: 0,
      label: null,
      clsSlider: "",
      clsBackside: "",
      clsComplete: "",
      clsBuffer: "",
      clsMarker: "",
      clsHint: "",
      clsMinMax: "",
      clsMin: "",
      clsMax: "",
      onStart: Metro2.noop,
      onStop: Metro2.noop,
      onMove: Metro2.noop,
      onSliderClick: Metro2.noop,
      onChange: Metro2.noop,
      onChangeValue: Metro2.noop,
      onChangeBuffer: Metro2.noop,
      onFocus: Metro2.noop,
      onBlur: Metro2.noop,
      onSliderCreate: Metro2.noop
    };
    Metro2.sliderSetup = function(options) {
      SliderDefaultConfig = $3.extend({}, SliderDefaultConfig, options);
    };
    if (typeof globalThis["metroSliderSetup"] !== void 0) {
      Metro2.sliderSetup(globalThis["metroSliderSetup"]);
    }
    Metro2.Component("slider", {
      init: function(options, elem) {
        this._super(elem, options, SliderDefaultConfig, {
          slider: null,
          value: 0,
          percent: 0,
          pixel: 0,
          buffer: 0,
          keyInterval: false,
          id: Utils.elementId("slider")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this._createSlider();
        this._createEvents();
        this.buff(o2.buffer);
        this.val(o2.value);
        this._fireEvent("slider-create", {
          element: element2
        });
      },
      _createSlider: function() {
        var element2 = this.element, o2 = this.options;
        var backside = $3("<div>").addClass("backside").addClass(o2.clsBackside);
        var complete = $3("<div>").addClass("complete").addClass(o2.clsComplete);
        var buffer = $3("<div>").addClass("buffer").addClass(o2.clsBuffer);
        var marker = $3("<button>").attr("type", "button").addClass("marker").addClass(o2.clsMarker);
        var hint = $3("<div>").addClass("hint").addClass(o2.hintPosition + "-side").addClass(o2.clsHint);
        var i3;
        var slider = element2.wrap("<div>").addClass("slider").addClass(element2[0].className).addClass(o2.clsSlider);
        if (o2.size > 0) {
          if (o2.vertical === true) {
            slider.outerHeight(o2.size);
          } else {
            slider.outerWidth(o2.size);
          }
        }
        if (o2.vertical === true) {
          slider.addClass("vertical-slider");
        }
        if (o2.hintAlways === true) {
          hint.css({
            display: "block"
          }).addClass("permanent-hint");
        }
        if (o2.label) {
          const label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(slider);
          if (element2.id()) {
            label2.attr("for", element2.id());
          }
        }
        backside.appendTo(slider);
        complete.appendTo(slider);
        buffer.appendTo(slider);
        marker.appendTo(slider);
        hint.appendTo(marker);
        if (o2.showMinMax === true) {
          var min_max_wrapper = $3("<div>").addClass("slider-min-max").addClass(o2.clsMinMax);
          $3("<span>").addClass("slider-text-min").addClass(o2.clsMin).html(o2.min).appendTo(min_max_wrapper);
          $3("<span>").addClass("slider-text-max").addClass(o2.clsMax).html(o2.max).appendTo(min_max_wrapper);
          if (o2.minMaxPosition === Metro2.position.TOP) {
            min_max_wrapper.insertBefore(slider);
          } else {
            min_max_wrapper.insertAfter(slider);
          }
        }
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          for (i3 = 0; i3 < element2[0].style.length; i3++) {
            slider.css(element2[0].style[i3], element2.css(element2[0].style[i3]));
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this.slider = slider;
      },
      _createEvents: function() {
        var that = this, slider = this.slider, o2 = this.options;
        var marker = slider.find(".marker");
        var hint = slider.find(".hint");
        marker.on(Metro2.events.startAll, function() {
          if (o2.hint === true && o2.hintAlways !== true) {
            hint.fadeIn(300);
          }
          $3(document).on(Metro2.events.moveAll, function(e) {
            if (e.cancelable) e.preventDefault();
            that._move(e);
            that._fireEvent("move", {
              val: that.value,
              percent: that.percent
            });
          }, { ns: that.id, passive: false });
          $3(document).on(Metro2.events.stopAll, function() {
            $3(document).off(Metro2.events.moveAll, { ns: that.id });
            $3(document).off(Metro2.events.stopAll, { ns: that.id });
            if (o2.hintAlways !== true) {
              hint.fadeOut(300);
            }
            that._fireEvent("stop", {
              val: that.value,
              percent: that.percent
            });
          }, { ns: that.id });
          that._fireEvent("start", {
            val: that.value,
            percent: that.percent
          });
        });
        marker.on(Metro2.events.focus, function() {
          that._fireEvent("focus", {
            val: that.value,
            percent: that.percent
          });
        });
        marker.on(Metro2.events.blur, function() {
          that._fireEvent("blur", {
            val: that.value,
            percent: that.percent
          });
        });
        marker.on(Metro2.events.keydown, function(e) {
          var key = e.keyCode ? e.keyCode : e.which;
          if ([37, 38, 39, 40].indexOf(key) === -1) {
            return;
          }
          var step = o2.accuracy === 0 ? 1 : o2.accuracy;
          if (that.keyInterval) {
            return;
          }
          that.keyInterval = setInterval(function() {
            var val = that.value;
            if (e.keyCode === 37 || e.keyCode === 40) {
              if (val - step < o2.min) {
                val = o2.min;
              } else {
                val -= step;
              }
            }
            if (e.keyCode === 38 || e.keyCode === 39) {
              if (val + step > o2.max) {
                val = o2.max;
              } else {
                val += step;
              }
            }
            that.value = that._correct(val);
            that.percent = that._convert(that.value, "val2prc");
            that.pixel = that._convert(that.percent, "prc2pix");
            that._redraw();
          }, 100);
          e.preventDefault();
        });
        marker.on(Metro2.events.keyup, function() {
          clearInterval(that.keyInterval);
          that.keyInterval = false;
        });
        slider.on(Metro2.events.click, function(e) {
          that._move(e);
          that._fireEvent("slider-click", {
            val: that.value,
            percent: that.percent
          });
          that._fireEvent("stop", {
            val: that.value,
            percent: that.percent
          });
        });
        $3(globalThis).on(Metro2.events.resize, function() {
          that.val(that.value);
          that.buff(that.buffer);
        }, { ns: that.id });
      },
      _convert: function(v2, how) {
        var slider = this.slider, o2 = this.options;
        var length = (o2.vertical === true ? slider.outerHeight() : slider.outerWidth()) - slider.find(".marker").outerWidth();
        switch (how) {
          case "pix2prc":
            return v2 * 100 / length;
          case "pix2val":
            return this._convert(v2, "pix2prc") * ((o2.max - o2.min) / 100) + o2.min;
          case "val2prc":
            return (v2 - o2.min) / ((o2.max - o2.min) / 100);
          case "prc2pix":
            return v2 / (100 / length);
          case "val2pix":
            return this._convert(this._convert(v2, "val2prc"), "prc2pix");
        }
        return 0;
      },
      _correct: function(value) {
        var res = value;
        var accuracy = this.options.accuracy;
        var min = this.options.min, max = this.options.max;
        if (accuracy === 0 || isNaN(accuracy)) {
          return res;
        }
        res = Math.round(value / accuracy) * accuracy;
        if (res < min) {
          res = min;
        }
        if (res > max) {
          res = max;
        }
        return res.toFixed(Utils.decCount(accuracy));
      },
      _move: function(e) {
        var slider = this.slider, o2 = this.options;
        var offset = slider.offset(), marker_size = slider.find(".marker").outerWidth(), length = o2.vertical === true ? slider.outerHeight() : slider.outerWidth(), cPos, cPix, cStart = 0, cStop = length - marker_size;
        cPos = o2.vertical === true ? Utils.pageXY(e).y - offset.top : Utils.pageXY(e).x - offset.left;
        cPix = o2.vertical === true ? length - cPos - marker_size / 2 : cPos - marker_size / 2;
        if (cPix < cStart || cPix > cStop) {
          return;
        }
        this.value = this._correct(this._convert(cPix, "pix2val"));
        this.percent = this._convert(this.value, "val2prc");
        this.pixel = this._convert(this.percent, "prc2pix");
        this._redraw();
      },
      _hint: function() {
        var o2 = this.options, slider = this.slider, hint = slider.find(".hint");
        var value = +this.value || 0;
        var percent = +this.percent || 0;
        if (o2.roundValue) {
          value = (Utils.isValue(value) ? +value : 0).toFixed(Utils.decCount(o2.accuracy));
          percent = (Utils.isValue(percent) ? +percent : 0).toFixed(Utils.decCount(o2.accuracy));
        }
        hint.text(o2.hintMask.replace("$1", value).replace("$2", percent));
      },
      _value: function() {
        var element2 = this.element, o2 = this.options;
        var value = o2.returnType === "value" ? this.value : this.percent;
        var percent = this.percent;
        var buffer = this.buffer;
        if (o2.roundValue) {
          value = (Utils.isValue(value) ? +value : 0).toFixed(Utils.decCount(o2.accuracy));
          percent = (Utils.isValue(percent) ? +percent : 0).toFixed(Utils.decCount(o2.accuracy));
          buffer = (Utils.isValue(buffer) ? +buffer : 0).toFixed(Utils.decCount(o2.accuracy));
        }
        if (element2[0].tagName === "INPUT") {
          element2.val(value);
        }
        if (o2.target !== null) {
          var target = $3(o2.target);
          if (target.length !== 0) {
            $3.each(target, function() {
              var t = $3(this);
              if (this.tagName === "INPUT") {
                t.val(value);
              } else {
                t.text(value);
              }
              t.trigger("change");
            });
          }
        }
        this._fireEvent("change-value", {
          val: value
        });
        this._fireEvent("change", {
          val: value,
          percent,
          buffer
        });
      },
      _marker: function() {
        var slider = this.slider, o2 = this.options;
        var marker = slider.find(".marker"), complete = slider.find(".complete");
        var length = o2.vertical === true ? slider.outerHeight() : slider.outerWidth();
        var marker_size = parseInt(Utils.getStyleOne(marker, "width"));
        var slider_visible = Utils.isVisible(slider);
        if (slider_visible) {
          marker.css({
            "margin-top": 0,
            "margin-left": 0
          });
        }
        if (o2.vertical === true) {
          if (slider_visible) {
            marker.css("top", length - this.pixel);
          } else {
            marker.css("top", 100 - this.percent + "%");
            marker.css("margin-top", marker_size / 2);
          }
          complete.css("height", this.percent + "%");
        } else {
          if (slider_visible) {
            marker.css("left", this.pixel);
          } else {
            marker.css("left", this.percent + "%");
            marker.css("margin-left", this.percent === 0 ? 0 : -1 * marker_size / 2);
          }
          complete.css("width", this.percent + "%");
        }
      },
      _redraw: function() {
        this._marker();
        this._value();
        this._hint();
      },
      _buffer: function() {
        var element2 = this.element, o2 = this.options;
        var buffer = this.slider.find(".buffer");
        if (o2.vertical === true) {
          buffer.css("height", this.buffer + "%");
        } else {
          buffer.css("width", this.buffer + "%");
        }
        this._fireEvent("change-buffer", {
          val: this.buffer
        });
        this._fireEvent("change", {
          val: element2.val(),
          percent: this.percent,
          buffer: this.buffer
        });
      },
      val: function(v2) {
        var o2 = this.options;
        if (v2 === void 0 || isNaN(v2)) {
          return this.value;
        }
        if (v2 < o2.min) {
          v2 = o2.min;
        }
        if (v2 > o2.max) {
          v2 = o2.max;
        }
        this.value = this._correct(v2);
        this.percent = this._convert(this.value, "val2prc");
        this.pixel = this._convert(this.percent, "prc2pix");
        this._redraw();
      },
      buff: function(v2) {
        var slider = this.slider;
        var buffer = slider.find(".buffer");
        if (v2 === void 0 || isNaN(v2)) {
          return this.buffer;
        }
        if (buffer.length === 0) {
          return false;
        }
        v2 = parseInt(v2);
        if (v2 > 100) {
          v2 = 100;
        }
        if (v2 < 0) {
          v2 = 0;
        }
        this.buffer = v2;
        this._buffer();
      },
      changeValue: function() {
        var element2 = this.element, o2 = this.options;
        var val = element2.attr("data-value");
        if (val < o2.min) {
          val = o2.min;
        }
        if (val > o2.max) {
          val = o2.max;
        }
        this.val(val);
      },
      changeBuffer: function() {
        var element2 = this.element;
        var val = parseInt(element2.attr("data-buffer"));
        if (val < 0) {
          val = 0;
        }
        if (val > 100) {
          val = 100;
        }
        this.buff(val);
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-value":
            this.changeValue();
            break;
          case "data-buffer":
            this.changeBuffer();
            break;
          case "disabled":
            this.toggleState();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, slider = this.slider;
        var marker = slider.find(".marker");
        marker.off(Metro2.events.startAll);
        marker.off(Metro2.events.focus);
        marker.off(Metro2.events.blur);
        marker.off(Metro2.events.keydown);
        marker.off(Metro2.events.keyup);
        slider.off(Metro2.events.click);
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/audio-player/audio-player.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var AudioPlayerDefaultConfig = {
      audioDeferred: 0,
      playlist: null,
      src: null,
      volume: 0.5,
      loop: false,
      autoplay: false,
      showLoop: true,
      showPlay: true,
      showStop: true,
      showMute: true,
      showFull: true,
      showStream: true,
      showVolume: true,
      showInfo: true,
      showPlaylist: true,
      showNext: true,
      showPrev: true,
      showFirst: true,
      showLast: true,
      showForward: true,
      showBackward: true,
      showShuffle: true,
      showRandom: true,
      loopIcon: "\u{1F501}",
      stopIcon: "\u23F9",
      playIcon: "\u25B6",
      pauseIcon: "\u23F8",
      muteIcon: "\u{1F507}",
      volumeLowIcon: "\u{1F508}",
      volumeMediumIcon: "\u{1F509}",
      volumeHighIcon: "\u{1F50A}",
      playlistIcon: "\u{1F4C3}",
      nextIcon: "\u2192",
      prevIcon: "\u2190",
      firstIcon: "\u21E4",
      lastIcon: "\u21E5",
      forwardIcon: "\u21C9",
      backwardIcon: "\u21C7",
      shuffleIcon: "\u{1F500}",
      randomIcon: "\u{1F3B2}",
      onPlay: Metro2.noop,
      onPause: Metro2.noop,
      onStop: Metro2.noop,
      onEnd: Metro2.noop,
      onMetadata: Metro2.noop,
      onTime: Metro2.noop,
      onAudioPlayerCreate: Metro2.noop
    };
    Metro2.audioPlayerSetup = function(options) {
      AudioPlayerDefaultConfig = $3.extend({}, AudioPlayerDefaultConfig, options);
    };
    if (typeof globalThis["metroAudioPlayerSetup"] !== void 0) {
      Metro2.audioPlayerSetup(globalThis["metroAudioPlayerSetup"]);
    }
    Metro2.Component("audio-player", {
      init: function(options, elem) {
        this._super(elem, options, AudioPlayerDefaultConfig, {
          preloader: null,
          player: null,
          audio: elem,
          stream: null,
          volume: null,
          volumeBackup: 0,
          muted: false
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this._createPlayer();
        this._createEvents();
        if (o2.autoplay === true) {
          this.play();
        }
        this._fireEvent("audio-player-create", {
          element: element2,
          player: this.player
        });
      },
      _createPlayer: function() {
        var element2 = this.element, o2 = this.options, audio2 = this.audio;
        const player = element2.wrap("<div>").addClass("media-player audio-player " + element2[0].className);
        $3.each(["muted", "autoplay", "controls", "height", "width", "loop", "poster", "preload"], function() {
          element2.removeAttr(this);
        });
        element2.attr("preload", "auto");
        audio2.volume = o2.volume;
        if (o2.src !== null) {
          this._setSource(o2.src);
        }
        element2[0].className = "";
        this.player = player;
        this._createControls();
      },
      _setSource: function(src) {
        var element2 = this.element;
        element2.find("source").remove();
        element2.removeAttr("src");
        if (Array.isArray(src)) {
          $3.each(src, function() {
            var item = this;
            if (item.src === void 0) return;
            $3("<source>").attr("src", item.src).attr("type", item.type !== void 0 ? item.type : "").appendTo(element2);
          });
        } else {
          element2.attr("src", src);
        }
      },
      _createControls: function() {
        var that = this, element2 = this.element, o2 = this.options, audio2 = this.elem;
        var controls = $3("<div>").addClass("controls").addClass(o2.clsControls).insertAfter(element2);
        var stream = $3("<div>").addClass("stream").appendTo(controls);
        var streamSlider = $3("<input>").addClass("stream-slider ultra-thin cycle-marker").appendTo(stream);
        var preloader = $3("<div>").addClass("load-audio").appendTo(stream);
        var volume = $3("<div>").addClass("volume").appendTo(controls);
        var volumeSlider = $3("<input>").addClass("volume-slider ultra-thin cycle-marker").appendTo(volume);
        var infoBox = $3("<div>").addClass("info-box").appendTo(controls);
        if (o2.showInfo !== true) {
          infoBox.hide();
        }
        preloader.activity({
          type: "metro",
          style: "color"
        });
        preloader.hide(0);
        this.preloader = preloader;
        Metro2.makePlugin(streamSlider, "slider", {
          clsMarker: "bg-red",
          clsHint: "bg-cyan fg-white",
          clsComplete: "bg-cyan",
          hint: true,
          onStart: function() {
            if (!audio2.paused) audio2.pause();
          },
          onStop: function(val) {
            if (audio2.seekable.length > 0) {
              audio2.currentTime = (that.duration * val / 100).toFixed(0);
            }
            if (audio2.paused && audio2.currentTime > 0) {
              audio2.play();
            }
          }
        });
        this.stream = streamSlider;
        if (o2.showStream !== true) {
          stream.hide();
        }
        Metro2.makePlugin(volumeSlider, "slider", {
          clsMarker: "bg-red",
          clsHint: "bg-cyan fg-white",
          hint: true,
          value: o2.volume * 100,
          onChangeValue: function(val) {
            audio2.volume = val / 100;
          }
        });
        this.volume = volumeSlider;
        if (o2.showVolume !== true) {
          volume.hide();
        }
        var loop;
        if (o2.showLoop === true) loop = $3("<button>").attr("type", "button").addClass("button square loop").html(o2.loopIcon).appendTo(controls);
        if (o2.showPlay === true) $3("<button>").attr("type", "button").addClass("button square play").html(o2.playIcon).appendTo(controls);
        if (o2.showStop === true) $3("<button>").attr("type", "button").addClass("button square stop").html(o2.stopIcon).appendTo(controls);
        if (o2.showMute === true) $3("<button>").attr("type", "button").addClass("button square mute").html(o2.muteIcon).appendTo(controls);
        if (o2.loop === true) {
          loop.addClass("active");
          element2.attr("loop", "loop");
        }
        this._setVolume();
        if (o2.muted) {
          that.volumeBackup = audio2.volume;
          Metro2.getPlugin(that.volume, "slider").val(0);
          audio2.volume = 0;
        }
        infoBox.html("00:00 / 00:00");
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options, audio2 = this.elem, player = this.player;
        element2.on("loadstart", function() {
          that.preloader.fadeIn();
        });
        element2.on("loadedmetadata", function() {
          that.duration = audio2.duration.toFixed(0);
          that._setInfo(0, that.duration);
          Utils.exec(o2.onMetadata, [audio2, player], element2[0]);
        });
        element2.on("canplay", function() {
          that._setBuffer();
          that.preloader.fadeOut();
        });
        element2.on("progress", function() {
          that._setBuffer();
        });
        element2.on("timeupdate", function() {
          var position = Math.round(audio2.currentTime * 100 / that.duration);
          that._setInfo(audio2.currentTime, that.duration);
          Metro2.getPlugin(that.stream, "slider").val(position);
          Utils.exec(o2.onTime, [audio2.currentTime, that.duration, audio2, player], element2[0]);
        });
        element2.on("waiting", function() {
          that.preloader.fadeIn();
        });
        element2.on("loadeddata", function() {
        });
        element2.on("play", function() {
          player.find(".play").html(o2.pauseIcon);
          Utils.exec(o2.onPlay, [audio2, player], element2[0]);
        });
        element2.on("pause", function() {
          player.find(".play").html(o2.playIcon);
          Utils.exec(o2.onPause, [audio2, player], element2[0]);
        });
        element2.on("stop", function() {
          Metro2.getPlugin(that.stream, "slider").val(0);
          Utils.exec(o2.onStop, [audio2, player], element2[0]);
        });
        element2.on("ended", function() {
          Metro2.getPlugin(that.stream, "slider").val(0);
          Utils.exec(o2.onEnd, [audio2, player], element2[0]);
        });
        element2.on("volumechange", function() {
          that._setVolume();
        });
        player.on(Metro2.events.click, ".play", function() {
          if (audio2.paused) {
            that.play();
          } else {
            that.pause();
          }
        });
        player.on(Metro2.events.click, ".stop", function() {
          that.stop();
        });
        player.on(Metro2.events.click, ".mute", function() {
          that._toggleMute();
        });
        player.on(Metro2.events.click, ".loop", function() {
          that._toggleLoop();
        });
      },
      _toggleLoop: function() {
        var loop = this.player.find(".loop");
        if (loop.length === 0) return;
        loop.toggleClass("active");
        if (loop.hasClass("active")) {
          this.element.attr("loop", "loop");
        } else {
          this.element.removeAttr("loop");
        }
      },
      _toggleMute: function() {
        this.muted = !this.muted;
        if (this.muted === false) {
          this.audio.volume = this.volumeBackup;
        } else {
          this.volumeBackup = this.audio.volume;
          this.audio.volume = 0;
        }
        Metro2.getPlugin(this.volume, "slider").val(this.muted === false ? this.volumeBackup * 100 : 0);
      },
      _setInfo: function(a2, b2) {
        this.player.find(".info-box").html(Utils.secondsToFormattedString(Math.round(a2)) + " / " + Utils.secondsToFormattedString(Math.round(b2)));
      },
      _setBuffer: function() {
        var buffer = this.audio.buffered.length ? Math.round(Math.floor(this.audio.buffered.end(0)) / Math.floor(this.audio.duration) * 100) : 0;
        Metro2.getPlugin(this.stream, "slider").buff(buffer);
      },
      _setVolume: function() {
        var audio2 = this.audio, player = this.player, o2 = this.options;
        var volumeButton = player.find(".mute");
        var volume = audio2.volume * 100;
        if (volume > 1 && volume < 30) {
          volumeButton.html(o2.volumeLowIcon);
        } else if (volume >= 30 && volume < 60) {
          volumeButton.html(o2.volumeMediumIcon);
        } else if (volume >= 60 && volume <= 100) {
          volumeButton.html(o2.volumeHighIcon);
        } else {
          volumeButton.html(o2.muteIcon);
        }
      },
      play: function(src) {
        if (src !== void 0) {
          this._setSource(src);
        }
        if (this.element.attr("src") === void 0 && this.element.find("source").length === 0) {
          return;
        }
        this.audio.play();
      },
      pause: function() {
        this.audio.pause();
      },
      resume: function() {
        if (this.audio.paused) {
          this.play();
        }
      },
      stop: function() {
        this.audio.pause();
        this.audio.currentTime = 0;
        Metro2.getPlugin(this.stream, "slider").val(0);
      },
      setVolume: function(v2) {
        if (v2 === void 0) {
          return this.audio.volume;
        }
        if (v2 > 1) {
          v2 /= 100;
        }
        this.audio.volume = v2;
        Metro2.getPlugin(this.volume, "slider").val(v2 * 100);
      },
      loop: function() {
        this._toggleLoop();
      },
      mute: function() {
        this._toggleMute();
      },
      changeSource: function() {
        var src = JSON.parse(this.element.attr("data-src"));
        this.play(src);
      },
      changeVolume: function() {
        var volume = this.element.attr("data-volume");
        this.setVolume(volume);
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-src":
            this.changeSource();
            break;
          case "data-volume":
            this.changeVolume();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, player = this.player;
        element2.off("all");
        player.off("all");
        Metro2.getPlugin(this.stream, "slider").destroy();
        Metro2.getPlugin(this.volume, "slider").destroy();
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/bottom-sheet/bottom-sheet.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var BottomSheetDefaultConfig = {
      bottomsheetDeferred: 0,
      mode: "list",
      toggle: null,
      onOpen: Metro2.noop,
      onClose: Metro2.noop,
      onBottomSheetCreate: Metro2.noop
    };
    Metro2.bottomSheetSetup = function(options) {
      BottomSheetDefaultConfig = $3.extend({}, BottomSheetDefaultConfig, options);
    };
    if (typeof globalThis["metroBottomSheetSetup"] !== void 0) {
      Metro2.bottomSheetSetup(globalThis["metroBottomSheetSetup"]);
    }
    Metro2.Component("bottom-sheet", {
      init: function(options, elem) {
        this._super(elem, options, BottomSheetDefaultConfig, {
          toggle: null
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("bottom-sheet-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("bottom-sheet").addClass(o2.mode + "-list");
        if (Utils.isValue(o2.toggle) && $3(o2.toggle).length > 0) {
          this.toggle = $3(o2.toggle);
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element;
        if (Utils.isValue(this.toggle)) {
          this.toggle.on(Metro2.events.click, function() {
            that.toggle();
          });
        }
        element2.on(Metro2.events.click, "li", function() {
          that.close();
        });
      },
      isOpen: function() {
        return this.element.hasClass("opened");
      },
      open: function(mode) {
        var element2 = this.element;
        if (Utils.isValue(mode)) {
          element2.removeClass("list-style grid-style").addClass(mode + "-style");
        }
        this.element.addClass("opened");
        this._fireEvent("open", {
          element: element2
        });
      },
      close: function() {
        var element2 = this.element;
        element2.removeClass("opened");
        this._fireEvent("close", {
          element: element2
        });
      },
      toggle: function(mode) {
        if (this.isOpen()) {
          this.close();
        } else {
          this.open(mode);
        }
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element;
        if (Utils.isValue(this.toggle)) {
          this.toggle.off(Metro2.events.click);
        }
        element2.off(Metro2.events.click, "li");
        return element2;
      }
    });
    Metro2["bottomsheet"] = {
      isBottomSheet: function(el) {
        return Utils.isMetroObject(el, "bottom-sheet");
      },
      open: function(el, as) {
        if (!this.isBottomSheet(el)) {
          return false;
        }
        Metro2.getPlugin(el, "bottom-sheet").open(as);
      },
      close: function(el) {
        if (!this.isBottomSheet(el)) {
          return false;
        }
        Metro2.getPlugin(el, "bottom-sheet").close();
      },
      toggle: function(el, as) {
        if (!this.isBottomSheet(el)) {
          return false;
        }
        if (this.isOpen(el)) {
          this.close(el);
        } else {
          this.open(el, as);
        }
      },
      isOpen: function(el) {
        if (!this.isBottomSheet(el)) {
          return false;
        }
        return Metro2.getPlugin(el, "bottom-sheet").isOpen();
      }
    };
  })(Metro, Dom);

  // source/components/button-group/button-group.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ButtonGroupDefaultConfig = {
      buttongroupDeferred: 0,
      targets: "button",
      clsActive: "",
      requiredButton: false,
      mode: Metro2.groupMode.ONE,
      onButtonClick: Metro2.noop,
      onButtonGroupCreate: Metro2.noop
    };
    Metro2.buttonGroupSetup = function(options) {
      ButtonGroupDefaultConfig = $3.extend({}, ButtonGroupDefaultConfig, options);
    };
    if (typeof globalThis["metroButtonGroupSetup"] !== void 0) {
      Metro2.buttonGroupSetup(globalThis["metroButtonGroupSetup"]);
    }
    Metro2.Component("button-group", {
      init: function(options, elem) {
        this._super(elem, options, ButtonGroupDefaultConfig, {
          active: null,
          id: Utils.elementId("button-group")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createGroup();
        this._createEvents();
        this._fireEvent("button-group-create", {
          element: element2
        });
      },
      _createGroup: function() {
        var element2 = this.element, o2 = this.options;
        var buttons, buttons_active;
        element2.addClass("button-group");
        buttons = element2.find(o2.targets);
        buttons_active = element2.find(".active");
        if (o2.mode === Metro2.groupMode.ONE && buttons_active.length === 0 && o2.requiredButton === true) {
          $3(buttons[0]).addClass("active");
        }
        if (o2.mode === Metro2.groupMode.ONE && buttons_active.length > 1) {
          buttons.removeClass("active").removeClass(o2.clsActive);
          $3(buttons[0]).addClass("active");
        }
        element2.find(".active").addClass("js-active").addClass(o2.clsActive);
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.click, o2.targets, function() {
          var el = $3(this);
          that._fireEvent("button-click", {
            button: this
          });
          if (o2.mode === Metro2.groupMode.ONE && el.hasClass("active")) {
            return;
          }
          if (o2.mode === Metro2.groupMode.ONE) {
            element2.find(o2.targets).removeClass(o2.clsActive).removeClass("active js-active");
            el.addClass("active").addClass(o2.clsActive).addClass("js-active");
          } else {
            el.toggleClass("active").toggleClass(o2.clsActive).toggleClass("js-active");
          }
        });
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        element2.off(Metro2.events.click, o2.targets);
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/spinner/spinner.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var SpinnerDefaultConfig = {
      spinnerDeferred: 0,
      label: "",
      step: 1,
      plusIcon: "+",
      minusIcon: "-",
      buttonsPosition: "default",
      defaultValue: 0,
      minValue: null,
      maxValue: null,
      fixed: 0,
      repeatThreshold: 2e3,
      hideCursor: false,
      clsSpinner: "",
      clsSpinnerInput: "",
      clsSpinnerButton: "",
      clsSpinnerButtonPlus: "",
      clsSpinnerButtonMinus: "",
      clsLabel: "",
      onBeforeChange: Metro2.noop_true,
      onChange: Metro2.noop,
      onPlusClick: Metro2.noop,
      onMinusClick: Metro2.noop,
      onArrowUp: Metro2.noop,
      onArrowDown: Metro2.noop,
      onButtonClick: Metro2.noop,
      onArrowClick: Metro2.noop,
      onSpinnerCreate: Metro2.noop
    };
    Metro2.spinnerSetup = function(options) {
      SpinnerDefaultConfig = $3.extend({}, SpinnerDefaultConfig, options);
    };
    if (typeof globalThis["metroSpinnerSetup"] !== void 0) {
      Metro2.spinnerSetup(globalThis["metroSpinnerSetup"]);
    }
    Metro2.Component("spinner", {
      init: function(options, elem) {
        this._super(elem, options, SpinnerDefaultConfig, {
          repeat_timer: false
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("spinner-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var spinner = $3("<div>").addClass("spinner").addClass("buttons-" + o2.buttonsPosition).addClass(element2[0].className).addClass(o2.clsSpinner);
        var button_plus = $3("<button>").attr("type", "button").addClass("button spinner-button spinner-button-plus").addClass(o2.clsSpinnerButton + " " + o2.clsSpinnerButtonPlus).html(o2.plusIcon);
        var button_minus = $3("<button>").attr("type", "button").addClass("button spinner-button spinner-button-minus").addClass(o2.clsSpinnerButton + " " + o2.clsSpinnerButtonMinus).html(o2.minusIcon);
        var init_value = element2.val().trim();
        if (!Utils.isValue(init_value)) {
          element2.val(0);
        }
        element2[0].className = "";
        spinner.insertBefore(element2);
        element2.appendTo(spinner).addClass(o2.clsSpinnerInput);
        element2.addClass("metro-input");
        button_plus.appendTo(spinner);
        button_minus.appendTo(spinner);
        if (o2.hideCursor === true) {
          spinner.addClass("hide-cursor");
        }
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(spinner);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (o2.disabled === true || element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var spinner = element2.closest(".spinner");
        var spinner_buttons = spinner.find(".spinner-button");
        var value, repeat_timer;
        var spinnerButtonClick = function(plus) {
          var events = [plus ? "plus-click" : "minus-click", plus ? "arrow-up" : "arrow-down", "button-click", "arrow-click"];
          var curr = +element2.val();
          var val = +element2.val();
          var step = +o2.step;
          if (plus) {
            val += step;
          } else {
            val -= step;
          }
          that._setValue(val.toFixed(o2.fixed), true);
          that._fireEvents(events, {
            curr,
            val,
            elementVal: element2.val(),
            button: plus ? "plus" : "minus"
          });
        };
        spinner.on(Metro2.events.startAll, ".spinner-button", function(e) {
          var plus = $3(this).hasClass("spinner-button-plus");
          repeat_timer = setInterval(function() {
            spinnerButtonClick(plus);
          }, 100);
        }, { passive: true });
        spinner.on(Metro2.events.stopAll, ".spinner-button", function(e) {
          clearInterval(repeat_timer);
        }, { passive: true });
        spinner.on(Metro2.events.click, ".spinner-button", function(e) {
          var plus = $3(this).hasClass("spinner-button-plus");
          spinnerButtonClick(plus);
        }, { passive: true });
        spinner.on(Metro2.events.click, function(e) {
          $3(".focused").removeClass("focused");
          spinner.addClass("focused");
          e.preventDefault();
          e.stopPropagation();
        });
      },
      _setValue: function(val, trigger_change) {
        var element2 = this.element, o2 = this.options;
        if (Utils.exec(o2.onBeforeChange, [val], element2[0]) !== true) {
          return;
        }
        if (Utils.isValue(o2.maxValue) && val > Number(o2.maxValue)) {
          val = Number(o2.maxValue);
        }
        if (Utils.isValue(o2.minValue) && val < Number(o2.minValue)) {
          val = Number(o2.minValue);
        }
        element2.val(val);
        this._fireEvent("change", { val }, false, true);
        if (trigger_change === true) {
          element2.fire("change", {
            val
          });
        }
      },
      val: function(val) {
        var that = this, element2 = this.element, o2 = this.options;
        if (!Utils.isValue(val)) {
          return element2.val();
        }
        that._setValue(val.toFixed(o2.fixed), true);
      },
      toDefault: function() {
        var o2 = this.options;
        var val = Utils.isValue(o2.defaultValue) ? Number(o2.defaultValue) : 0;
        this._setValue(val.toFixed(o2.fixed), true);
        this._fireEvent("change", {
          val
        });
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element;
        var changeValue = function() {
          var val = element2.attr("value").trim();
          if (Utils.isValue(val)) {
            that._setValue(Number(val), false);
          }
        };
        switch (attributeName) {
          case "disabled":
            this.toggleState();
            break;
          case "value":
            changeValue();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var spinner = element2.closest(".spinner");
        var spinner_buttons = spinner.find(".spinner-button");
        spinner.off(Metro2.events.click);
        spinner_buttons.off(Metro2.events.start);
        spinner_buttons.off(Metro2.events.stop);
        element2.off(Metro2.events.keydown);
        spinner.off(Metro2.events.keyup);
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3(".spinner").removeClass("focused");
    });
  })(Metro, Dom);

  // source/components/calendar/calendar.js
  (function(Metro2, $3) {
    "use strict";
    var CalendarDefaultConfig = {
      weekStart: null,
      static: false,
      readonly: false,
      showGhost: false,
      events: null,
      startContent: "days",
      showTime: false,
      initialTime: null,
      initialHours: null,
      initialMinutes: null,
      labelTimeHours: null,
      labelTimeMinutes: null,
      animationContent: true,
      animationSpeed: 10,
      calendarDeferred: 0,
      dayBorder: false,
      excludeDay: null,
      prevMonthIcon: "\u2BC7",
      nextMonthIcon: "\u2BC8",
      prevYearIcon: "\u2BC7",
      nextYearIcon: "\u2BC8",
      compact: false,
      wide: false,
      widePoint: null,
      pickerMode: false,
      show: null,
      outside: true,
      buttons: "cancel, today, clear, done",
      yearsBefore: 100,
      yearsAfter: 100,
      headerFormat: "dddd, MMM DD",
      showHeader: true,
      showFooter: true,
      showWeekNumber: false,
      isDialog: false,
      ripple: false,
      rippleColor: "#cccccc",
      exclude: null,
      preset: null,
      minDate: null,
      maxDate: null,
      weekDayClick: false,
      weekNumberClick: false,
      multiSelect: false,
      special: null,
      format: METRO_DATE_FORMAT,
      inputFormat: null,
      clsCalendar: "",
      clsCalendarHeader: "",
      clsCalendarContent: "",
      clsCalendarFooter: "",
      clsCalendarMonths: "",
      clsCalendarYears: "",
      clsToday: "",
      clsSelected: "",
      clsExcluded: "",
      clsCancelButton: "",
      clsTodayButton: "",
      clsClearButton: "",
      clsDoneButton: "",
      clsEventCounter: "",
      clsWeekend: "",
      clsCurrentWeek: "",
      clsCalendarTime: "",
      clsTime: "",
      clsTimeHours: "",
      clsTimeMinutes: "",
      clsTimeButton: "",
      clsTimeButtonPlus: "",
      clsTimeButtonMinus: "",
      clsSpecial: "",
      clsEvents: "",
      clsEvent: "",
      onCancel: Metro2.noop,
      onToday: Metro2.noop,
      onClear: Metro2.noop,
      onDone: Metro2.noop,
      onDayClick: Metro2.noop,
      onDrawDay: Metro2.noop,
      onDrawMonth: Metro2.noop,
      onDrawYear: Metro2.noop,
      onWeekDayClick: Metro2.noop,
      onWeekNumberClick: Metro2.noop,
      onMonthChange: Metro2.noop,
      onYearChange: Metro2.noop,
      onTimeChange: Metro2.noop,
      onHoursChange: Metro2.noop,
      onMinutesChange: Metro2.noop,
      onCalendarCreate: Metro2.noop
    };
    Metro2.calendarSetup = function(options) {
      CalendarDefaultConfig = $3.extend({}, CalendarDefaultConfig, options);
    };
    if (typeof globalThis["metroCalendarSetup"] !== void 0) {
      Metro2.calendarSetup(globalThis["metroCalendarSetup"]);
    }
    Metro2.Component("calendar", {
      init: function(options, elem) {
        var now = datetime().align("day");
        this._super(elem, options, CalendarDefaultConfig, {
          today: now,
          show: now,
          current: {
            year: now.year(),
            month: now.month(),
            day: now.day()
          },
          preset: [],
          selected: [],
          exclude: [],
          special: [],
          excludeDay: [],
          events: [],
          min: null,
          max: null,
          minYear: null,
          maxYear: null,
          id: Metro2.utils.elementId("calendar"),
          time: [datetime().hour(), datetime().minute()],
          content: "days",
          yearDistance: 11,
          yearGroupStart: now.year()
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this.content = o2.startContent;
        this.minYear = this.current.year - this.options.yearsBefore;
        this.maxYear = this.current.year + this.options.yearsAfter;
        element2.html("").addClass("calendar " + (o2.compact === true ? "compact" : "")).addClass(o2.clsCalendar);
        if (Metro2.utils.isValue(o2.initialTime)) {
          this.time = o2.initialTime.split(":");
        }
        if (Metro2.utils.isValue(o2.initialHours) && Metro2.utils.between(o2.initialHours, 0, 23, true)) {
          this.time[0] = parseInt(o2.initialHours);
        }
        if (Metro2.utils.isValue(o2.initialMinutes) && Metro2.utils.between(o2.initialMinutes, 0, 59, true)) {
          this.time[1] = parseInt(o2.initialMinutes);
        }
        if (o2.dayBorder === true) {
          element2.addClass("day-border");
        }
        if (Metro2.utils.isValue(o2.excludeDay)) {
          this.excludeDay = ("" + o2.excludeDay).toArray(",", "int");
        }
        if (Metro2.utils.isValue(o2.preset)) {
          this._dates2array(o2.preset, "selected");
        }
        if (Metro2.utils.isValue(o2.exclude)) {
          this._dates2array(o2.exclude, "exclude");
        }
        if (Metro2.utils.isValue(o2.special)) {
          this._dates2array(o2.special, "special");
        }
        if (Metro2.utils.isValue(o2.events)) {
          this._dates2array(o2.events, "events");
        }
        if (o2.buttons !== false) {
          if (Array.isArray(o2.buttons) === false) {
            o2.buttons = o2.buttons.split(",").map(function(item) {
              return item.trim();
            });
          }
        }
        this.min = o2.minDate ? (o2.inputFormat ? Datetime.from(o2.minDate, o2.inputFormat) : datetime(o2.minDate)).align("day") : null;
        this.max = o2.maxDate ? (o2.inputFormat ? Datetime.from(o2.maxDate, o2.inputFormat) : datetime(o2.maxDate)).align("day") : null;
        if (o2.show) {
          this.show = (!o2.show ? datetime() : o2.inputFormat ? Datetime.from(o2.show, o2.inputFormat) : datetime(o2.show)).align("day");
          this.current = {
            year: this.show.year(),
            month: this.show.month(),
            day: this.show.day()
          };
        }
        this._drawCalendar();
        this._createEvents();
        if (o2.wide === true) {
          element2.addClass("calendar-wide");
        } else {
          if (!Metro2.utils.isNull(o2.widePoint) && Metro2.utils.mediaExist(o2.widePoint)) {
            element2.addClass("calendar-wide");
          }
        }
        if (o2.ripple === true && Metro2.utils.isFunc(element2.ripple) !== false) {
          element2.ripple({
            rippleTarget: ".button, .prev-month, .next-month, .prev-year, .next-year, .day",
            rippleColor: this.options.rippleColor
          });
        }
        this._fireEvent("calendar-create");
      },
      _dates2array: function(val, category) {
        var that = this, o2 = this.options;
        var dates;
        if (Metro2.utils.isNull(val)) {
          return;
        }
        dates = typeof val === "string" ? val.toArray() : Array.isArray(val) ? val : [];
        $3.each(dates, function() {
          var _d, date = this;
          try {
            _d = (o2.inputFormat ? Datetime.from(date, o2.inputFormat) : datetime(date)).align("day").format("YYYY-MM-DD");
          } catch (e) {
            return;
          }
          that[category].push(_d);
        });
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        $3(globalThis).on(
          Metro2.events.resize,
          function() {
            if (o2.wide !== true) {
              if (!Metro2.utils.isNull(o2.widePoint) && Metro2.utils.mediaExist(o2.widePoint)) {
                element2.addClass("calendar-wide");
              } else {
                element2.removeClass("calendar-wide");
              }
            }
          },
          { ns: this.id }
        );
        element2.on(Metro2.events.click, ".prev-year-group, .next-year-group", function() {
          if (o2.static) {
            return;
          }
          if ($3(this).hasClass("prev-year-group")) {
            that.yearGroupStart -= that.yearDistance;
          } else {
            that.yearGroupStart += that.yearDistance;
          }
          that._drawContent();
        });
        element2.on(Metro2.events.click, ".prev-month, .next-month, .prev-year, .next-year", function() {
          var new_date, el = $3(this);
          if (o2.static) {
            return;
          }
          if (el.hasClass("prev-month")) {
            new_date = datetime(that.current.year, that.current.month - 1, 1).useLocale(that.locale, true);
            if (new_date.year() < that.minYear) {
              return;
            }
          }
          if (el.hasClass("next-month")) {
            new_date = datetime(that.current.year, that.current.month + 1, 1).useLocale(that.locale, true);
            if (new_date.year() > that.maxYear) {
              return;
            }
          }
          if (el.hasClass("prev-year")) {
            new_date = datetime(that.current.year - 1, that.current.month, 1).useLocale(that.locale, true);
            if (new_date.year() < that.minYear) {
              return;
            }
          }
          if (el.hasClass("next-year")) {
            new_date = datetime(that.current.year + 1, that.current.month, 1).useLocale(that.locale, true);
            if (new_date.year() > that.maxYear) {
              return;
            }
          }
          that.current = {
            year: new_date.year(),
            month: new_date.month(),
            day: new_date.day()
          };
          setTimeout(
            function() {
              that._drawContent();
              if (el.hasClass("prev-month") || el.hasClass("next-month")) {
                that._fireEvent("month-change", {
                  current: that.current
                });
              }
              if (el.hasClass("prev-year") || el.hasClass("next-year")) {
                that._fireEvent("year-change", {
                  current: that.current
                });
              }
            },
            o2.ripple ? 300 : 1
          );
        });
        element2.on(Metro2.events.click, ".button-today", function() {
          that.toDay();
          that._fireEvent("today", {
            today: that.today.val(),
            time: that.time
          });
        });
        element2.on(Metro2.events.click, ".button-clear", function() {
          var date = datetime();
          that.selected = [];
          that.time = [date.hour(), date.minute()];
          that.yearGroupStart = date.year();
          that._drawContent();
          that._fireEvent("clear");
        });
        element2.on(Metro2.events.click, ".button-cancel", function() {
          that._drawContent();
          that._fireEvent("cancel");
        });
        element2.on(Metro2.events.click, ".button-done", function() {
          that._drawContent();
          that._fireEvent("done", {
            selected: that.selected,
            time: that.time
          });
        });
        if (o2.weekDayClick === true) {
          element2.on(Metro2.events.click, ".week-days .week-day", function(e) {
            var day, index, days, ii = [];
            if (o2.static || o2.readonly) {
              return;
            }
            day = $3(this);
            index = day.index();
            for (var i3 = 0; i3 < 7; i3++) {
              ii.push(index);
              index += o2.showWeekNumber ? 8 : 7;
            }
            if (o2.multiSelect === true) {
              days = element2.find(".day").filter(function(el) {
                var $el = $3(el);
                return ii.indexOf($el.index()) > -1 && !$el.hasClass("outside disabled excluded");
              });
              $3.each(days, function() {
                var $el = $3(this);
                var day2 = $el.data("day");
                if (that.selected.indexOf(day2) === -1) {
                  that.selected.push(day2);
                  $el.addClass("selected").addClass(o2.clsSelected);
                } else {
                  $el.removeClass("selected").removeClass(o2.clsSelected);
                  Metro2.utils.arrayDelete(that.selected, day2);
                }
              });
            }
            that._fireEvent("week-day-click", {
              selected: that.selected,
              day: day[0]
            });
            e.preventDefault();
            e.stopPropagation();
          });
        }
        if (o2.weekNumberClick) {
          element2.on(Metro2.events.click, ".week-number", function(e) {
            var $el, wn, index, days;
            $el = $3(this);
            wn = $el.text();
            index = $el.index();
            if (wn === "#") {
              return;
            }
            if (o2.static || o2.readonly) {
              return;
            }
            if (o2.multiSelect === true) {
              days = element2.find(".day").filter(function(el) {
                var $el2 = $3(el);
                var elIndex = $el2.index();
                return Metro2.utils.between(elIndex, index, index + 8, false) && !$el2.hasClass("outside disabled excluded");
              });
              $3.each(days, function() {
                var $el2 = $3(this);
                var day = $el2.data("day");
                if (that.selected.indexOf(day) === -1) {
                  that.selected.push(day);
                  $el2.addClass("selected").addClass(o2.clsSelected);
                } else {
                  $el2.removeClass("selected").removeClass(o2.clsSelected);
                  Metro2.utils.arrayDelete(that.selected, day);
                }
              });
            }
            that._fireEvent("week-number-click", {
              selected: that.selected,
              num: wn,
              numElement: $el[0]
            });
            e.preventDefault();
            e.stopPropagation();
          });
        }
        element2.on(Metro2.events.click, ".day", function(e) {
          var day = $3(this);
          var index, date;
          if (o2.static || o2.readonly) {
            return;
          }
          date = day.data("day");
          index = that.selected.indexOf(date);
          if (day.hasClass("outside")) {
            date = datetime(date);
            that.current = {
              year: date.year(),
              month: date.month(),
              day: date.day()
            };
            that._drawContent();
            that._fireEvent("month-change", {
              current: that.current
            });
            return;
          }
          if (!day.hasClass("disabled")) {
            if (o2.pickerMode === true) {
              that.selected = [date];
              that.today = datetime(date);
              that.current.year = that.today.year();
              that.current.month = that.today.month();
              that.current.day = that.today.day();
              that._drawHeader();
              that._drawContent();
            } else {
              if (index === -1) {
                if (o2.multiSelect === false) {
                  element2.find(".day").removeClass("selected").removeClass(o2.clsSelected);
                  that.selected = [];
                }
                that.selected.push(date);
                day.addClass("selected").addClass(o2.clsSelected);
              } else {
                day.removeClass("selected").removeClass(o2.clsSelected);
                Metro2.utils.arrayDelete(that.selected, date);
              }
            }
          }
          that._fireEvent("day-click", {
            selected: that.selected,
            day: day[0],
            time: that.time
          });
          e.preventDefault();
          e.stopPropagation();
        });
        element2.on(Metro2.events.click, ".curr-month", function(e) {
          that.content = "months";
          that._drawContent();
          e.preventDefault();
          e.stopPropagation();
        });
        element2.on(Metro2.events.click, ".month", function(e) {
          that.current.month = parseInt($3(this).attr("data-month"));
          that.content = "days";
          that._drawContent();
          that._fireEvent("month-change", {
            current: that.current
          });
          e.preventDefault();
          e.stopPropagation();
        });
        element2.on(Metro2.events.click, ".curr-year", function(e) {
          if (that.content === "years") {
            return;
          }
          that.content = "years";
          that._drawContent();
          e.preventDefault();
          e.stopPropagation();
        });
        element2.on(Metro2.events.click, ".year", function(e) {
          that.current.year = parseInt($3(this).attr("data-year"));
          that.yearGroupStart = that.current.year;
          that.content = "months";
          that._drawContent();
          that._fireEvent("year-change", {
            current: that.current
          });
          e.preventDefault();
          e.stopPropagation();
        });
      },
      _drawHeader: function() {
        var element2 = this.element, o2 = this.options;
        var header2 = element2.find(".calendar-header");
        if (header2.length === 0) {
          header2 = $3("<div>").addClass("calendar-header").addClass(o2.clsCalendarHeader).appendTo(element2);
        }
        header2.html("");
        $3("<div>").addClass("header-year").html(this.today.year()).appendTo(header2);
        $3("<div>").addClass("header-day").html(this.today.format(o2.headerFormat, this.locale)).appendTo(header2);
        if (o2.showHeader === false) {
          header2.hide();
        }
      },
      _drawFooter: function() {
        var element2 = this.element, o2 = this.options, strings = this.strings;
        var footer2 = element2.find(".calendar-footer");
        if (o2.buttons === false) {
          return;
        }
        if (footer2.length === 0) {
          footer2 = $3("<div>").addClass("calendar-footer").addClass(o2.clsCalendarFooter).appendTo(element2);
        }
        footer2.html("");
        $3.each(o2.buttons, function() {
          var button2 = $3("<button>").attr("type", "button").addClass(`button button-${this} ` + o2["cls" + Str.capitalize(this) + "Button"]).html(strings[`label_${this}`]).appendTo(footer2);
          if (this === "cancel" || this === "done") {
            button2.addClass("js-dialog-close");
          }
        });
        if (o2.showFooter === false) {
          footer2.hide();
        }
      },
      _drawTime: function() {
        var that = this, element2 = this.element, o2 = this.options;
        const strings = this.strings;
        var calendarContent = element2.find(".calendar-content");
        var time2 = $3("<div>").addClass("calendar-time").addClass(o2.clsCalendarTime).appendTo(calendarContent);
        var inner, hours, minutes, row;
        var h7 = "" + this.time[0];
        var m2 = "" + this.time[1];
        var onChange = function(val) {
          var value = parseInt(val);
          if ($3(this).attr("data-time-part") === "hours") {
            that.time[0] = value;
            that._fireEvent("hours-change", {
              time: that.time,
              hours: value
            });
          } else {
            that.time[1] = value;
            that._fireEvent("minutes-change", {
              time: that.time,
              minutes: value
            });
          }
          that._fireEvent("time-change", {
            time: that.time
          });
        };
        time2.append(inner = $3("<div>").addClass("calendar-time__inner"));
        inner.append(row = $3("<div>").addClass("calendar-time__inner-row"));
        row.append($3("<div>").addClass("calendar-time__inner-cell").append($3("<span>").html(strings["label_hours"])));
        row.append($3("<div>").addClass("calendar-time__inner-cell").append($3("<span>").html(strings["label_minutes"])));
        time2.append(inner = $3("<div>").addClass("calendar-time__inner spinners").addClass(o2.clsTime));
        inner.append(
          hours = $3(
            "<input type='text' data-cls-spinner-input='" + o2.clsTimeHours + "' data-time-part='hours' data-buttons-position='right' data-min-value='0' data-max-value='23'>"
          ).addClass("hours").addClass(o2.compact ? "input-small" : "input-normal")
        );
        inner.append(
          minutes = $3(
            "<input type='text' data-cls-spinner-input='" + o2.clsTimeMinutes + "' data-time-part='minutes' data-buttons-position='right' data-min-value='0' data-max-value='59'>"
          ).addClass("minutes").addClass(o2.compact ? "input-small" : "input-normal")
        );
        h7 = Str.lpad(h7, "0", 2);
        m2 = Str.lpad(m2, "0", 2);
        hours.val(h7);
        minutes.val(m2);
        Metro2.makePlugin(inner.find("input[type=text]"), "spinner", {
          onChange,
          clsSpinnerButton: o2.clsTimeButton,
          clsSpinnerButtonPlus: o2.clsTimeButtonPlus,
          clsSpinnerButtonMinus: o2.clsTimeButtonMinus
        });
        if (o2.showTime === false) {
          time2.hide();
        }
      },
      _drawContentDays: function() {
        var that = this, element2 = this.element, o2 = this.options;
        const strings = this.strings;
        var content = element2.find(".calendar-content"), toolbar, weekDays, calendarDays;
        var calendar = datetime(this.current.year, this.current.month, this.current.day).useLocale(this.locale, true).calendar(Metro2.utils.isValue(o2.weekStart) ? o2.weekStart : strings["weekStart"]);
        var showDay = this.show.format("YYYY-MM-DD");
        var now = datetime();
        if (content.length === 0) {
          content = $3("<div>").addClass("calendar-content").addClass(o2.clsCalendarContent).appendTo(element2);
        }
        if (o2.showWeekNumber) {
          content.addClass("-week-numbers");
        }
        content.empty();
        toolbar = $3("<div>").addClass("calendar-toolbar").appendTo(content);
        $3("<span>").addClass("prev-month").html(o2.prevMonthIcon).appendTo(toolbar);
        $3("<span>").addClass("curr-month").html(Datetime.getLocale(this.locale).months[this.current.month]).appendTo(toolbar);
        $3("<span>").addClass("next-month").html(o2.nextMonthIcon).appendTo(toolbar);
        $3("<span>").addClass("prev-year").html(o2.prevYearIcon).appendTo(toolbar);
        $3("<span>").addClass("curr-year").html(this.current.year).appendTo(toolbar);
        $3("<span>").addClass("next-year").html(o2.nextYearIcon).appendTo(toolbar);
        weekDays = $3("<div>").addClass("week-days").appendTo(content);
        if (o2.showWeekNumber) {
          $3("<span>").addClass("week-number").html("#").appendTo(weekDays);
        }
        $3.each(calendar["weekdays"], function() {
          $3("<span>").addClass("week-day").html(this).appendTo(weekDays);
        });
        calendarDays = $3("<div>").addClass("days").appendTo(content);
        $3.each(calendar["days"], function(i3) {
          var day = this;
          var date = datetime(day).addDay(1).align("day").addMinute((/* @__PURE__ */ new Date()).getTimezoneOffset());
          var outsideDate = date.month() !== that.current.month;
          if (o2.showWeekNumber && i3 % 7 === 0) {
            $3("<span>").addClass("week-number").html(`<span class="week-number-content">${date.weekNumber(o2.weekStart)}</span>`).appendTo(calendarDays);
          }
          var _day = date.day(), _data = date.format("YYYY-MM-DD");
          var cell = $3("<span>").addClass("day").html(`<span class="day-content">${_day}</span>`).appendTo(calendarDays);
          cell.attr("data-day", _data);
          if (day === showDay) {
            cell.addClass("showed");
          }
          if (outsideDate) {
            cell.addClass("outside");
            if (!o2.outside) {
              cell.empty();
            }
          }
          if (day === calendar["today"]) {
            cell.addClass("today");
          }
          if (o2.showGhost && date.day() === now.day()) {
            cell.addClass("coincidental");
          }
          if (that.special.length) {
            if (that.special.indexOf(day) === -1) {
              cell.addClass("disabled excluded").addClass(o2.clsExcluded);
            } else {
              cell.addClass(o2.clsSpecial);
            }
          } else {
            if (that.selected.indexOf(day) > -1) {
              cell.addClass("selected").addClass(o2.clsSelected);
            }
            if (that.exclude.indexOf(day) > -1) {
              cell.addClass("disabled excluded").addClass(o2.clsExcluded);
            }
            if (that.min && date.older(that.min)) {
              cell.addClass("disabled excluded").addClass(o2.clsExcluded);
            }
            if (that.max && date.younger(that.max)) {
              cell.addClass("disabled excluded").addClass(o2.clsExcluded);
            }
          }
          if (calendar["weekends"].indexOf(day) !== -1) {
            cell.addClass(o2.clsWeekend);
          }
          if (calendar["week"].indexOf(day) !== -1) {
            cell.addClass(o2.clsCurrentWeek);
          }
          if (that.events.length) {
            var events = $3("<div>").addClass("events").addClass(o2.clsEvents).appendTo(cell);
            $3.each(that.events, function() {
              if (this === day) {
                var event = $3("<div>").addClass("event").addClass(o2.clsEvent).appendTo(events);
                if (!o2.clsEvent) {
                  event.css({
                    backgroundColor: Farbe.Routines.randomColor()
                  });
                }
              }
            });
          }
          if (o2.animationContent) {
            cell.addClass("to-animate");
          }
          that._fireEvent("draw-day", {
            date: date.val(),
            day: date.day(),
            month: date.month(),
            year: date.year(),
            cell: cell[0]
          });
        });
        this._drawTime();
        this._animateContent(".day");
      },
      _drawContentMonths: function() {
        var element2 = this.element, elem = this.elem, o2 = this.options, locale = this.locale;
        var content = element2.find(".calendar-content");
        var toolbar, months, month, yearToday = datetime().year(), monthToday = datetime().month();
        if (content.length === 0) {
          content = $3("<div>").addClass("calendar-content").addClass(o2.clsCalendarContent).appendTo(element2);
        }
        content.clear();
        toolbar = $3("<div>").addClass("calendar-toolbar").appendTo(content);
        $3("<span>").addClass("prev-year").html(o2.prevYearIcon).appendTo(toolbar);
        $3("<span>").addClass("curr-year").html(this.current.year).appendTo(toolbar);
        $3("<span>").addClass("next-year").html(o2.nextYearIcon).appendTo(toolbar);
        content.append(months = $3("<div>").addClass("months"));
        let index = 0;
        for (let m2 of Datetime.getLocale(locale).months) {
          months.append(
            month = $3("<div>").attr("data-month", index).addClass("month").addClass(index === monthToday && this.current.year === yearToday ? "today" : "").html(m2)
          );
          if (o2.animationContent) {
            month.addClass("to-animate");
          }
          this._fireEvent("draw-month", {
            month: index,
            year: this.current.year,
            cell: month[0]
          });
          index++;
        }
        Metro2.i18n.updateUI(elem, locale);
        this._animateContent(".months .month");
      },
      _drawContentYears: function() {
        var element2 = this.element, o2 = this.options;
        var content = element2.find(".calendar-content");
        var toolbar, years, year;
        if (content.length === 0) {
          content = $3("<div>").addClass("calendar-content").addClass(o2.clsCalendarContent).appendTo(element2);
        }
        content.clear();
        toolbar = $3("<div>").addClass("calendar-toolbar").appendTo(content);
        $3("<span>").addClass("prev-year-group").html(o2.prevYearIcon).appendTo(toolbar);
        $3("<span>").addClass("curr-year").html(this.yearGroupStart + " - " + (this.yearGroupStart + this.yearDistance)).appendTo(toolbar);
        $3("<span>").addClass("next-year-group").html(o2.nextYearIcon).appendTo(toolbar);
        content.append(years = $3("<div>").addClass("years"));
        for (var i3 = this.yearGroupStart; i3 <= this.yearGroupStart + this.yearDistance; i3++) {
          years.append(
            year = $3("<div>").attr("data-year", i3).addClass("year").addClass(i3 === this.current.year ? "today" : "").html(i3)
          );
          if (o2.animationContent) {
            year.addClass("to-animate");
          }
          if (i3 < o2.minYear || i3 > o2.maxYear) {
            year.addClass("disabled");
          }
          this._fireEvent("draw-year", {
            year: i3,
            cell: year[0]
          });
        }
        this._animateContent(".years .year");
      },
      _drawContent: function() {
        switch (this.content) {
          case "years":
            this._drawContentYears();
            break;
          case "months":
            this._drawContentMonths();
            break;
          default:
            this._drawContentDays();
        }
        Metro2.i18n.updateUI(this.elem, this.locale);
      },
      _drawCalendar: function() {
        var that = this, element2 = this.elem;
        setTimeout(function() {
          that.element.html("");
          that._drawHeader();
          that._drawContent();
          that._drawFooter();
          Metro2.i18n.updateUI(element2, that.locale);
        }, 0);
      },
      _animateContent: function(target, cls) {
        var element2 = this.element, o2 = this.options;
        var content = element2.find(".calendar-content");
        cls = cls || "to-animate";
        content.find(target).each(function(k2) {
          var day = $3(this);
          setTimeout(function() {
            day.removeClass(cls);
          }, o2.animationSpeed * k2);
        });
      },
      getTime: function(asString) {
        var h7, m2;
        asString = asString || false;
        h7 = Str.lpad(this.time[0], "0", 2);
        m2 = Str.lpad(this.time[1], "0", 2);
        return asString ? h7 + ":" + m2 : this.time;
      },
      setTime: function(time2) {
        if (Array.isArray(time2)) {
          this.time = time2;
        } else {
          this.time = time2.split(":");
        }
        this._drawCalendar();
      },
      getPreset: function() {
        return this.preset;
      },
      getSelected: function() {
        return this.selected;
      },
      getExcluded: function() {
        return this.exclude;
      },
      getToday: function() {
        return this.today;
      },
      getCurrent: function() {
        return this.current;
      },
      clearSelected: function() {
        this.selected = [];
        this._drawContent();
      },
      toDay: function() {
        this.today = datetime().align("day");
        this.current = {
          year: this.today.year(),
          month: this.today.month(),
          day: this.today.day()
        };
        this.time = [datetime().hour(), datetime().minute()];
        this.yearGroupStart = datetime().year();
        this.content = "days";
        this._drawHeader();
        this._drawContent();
      },
      setExclude: function(exclude) {
        var element2 = this.element, o2 = this.options;
        if (Metro2.utils.isNull(exclude) && Metro2.utils.isNull(element2.attr("data-exclude"))) {
          return;
        }
        o2.exclude = !Metro2.utils.isNull(exclude) ? exclude : element2.attr("data-exclude");
        this._dates2array(o2.exclude, "exclude");
        this._drawContent();
      },
      setPreset: function(preset) {
        var element2 = this.element, o2 = this.options;
        if (Metro2.utils.isNull(preset) && Metro2.utils.isNull(element2.attr("data-preset"))) {
          return;
        }
        o2.preset = !Metro2.utils.isNull(preset) ? preset : element2.attr("data-preset");
        this._dates2array(o2.preset, "selected");
        this._drawContent();
      },
      setSpecial: function(special) {
        var element2 = this.element, o2 = this.options;
        if (Metro2.utils.isNull(special) && Metro2.utils.isNull(element2.attr("data-special"))) {
          return;
        }
        o2.special = !Metro2.utils.isNull(special) ? special : element2.attr("data-special");
        this._dates2array(o2.exclude, "special");
        this._drawContent();
      },
      showDate: function(date) {
        return this.setShow(date);
      },
      setShow: function(show) {
        var element2 = this.element, o2 = this.options;
        var attr = element2.attr("data-show");
        if (!show && !attr) {
          return;
        }
        o2.show = show ? show : attr;
        if (!o2.show) {
          this.show = datetime();
        } else {
          if (typeof o2.show === "string" && o2.inputFormat) {
            this.show = Datetime.from(o2.show, o2.inputFormat);
          } else {
            this.show = datetime(o2.show);
          }
        }
        this.show = this.show.align("day");
        this.current = {
          year: this.show.year(),
          month: this.show.month(),
          day: this.show.day()
        };
        this._drawContent();
      },
      setMinDate: function(date) {
        var element2 = this.element, o2 = this.options;
        var attr = element2.attr("data-min-date");
        if (!date && !attr) {
          return;
        }
        o2.minDate = date ? date : attr;
        this.min = o2.minDate ? (o2.inputFormat ? Datetime.from(o2.minDate, o2.inputFormat) : datetime(o2.minDate)).align("day") : null;
        this._drawContent();
      },
      setMaxDate: function(date) {
        var element2 = this.element, o2 = this.options;
        var attr = element2.attr("data-max-date");
        o2.maxDate = date ? date : attr;
        this.max = o2.maxDate ? (o2.inputFormat ? Datetime.from(o2.maxDate, o2.inputFormat) : datetime(o2.maxDate)).align("day") : null;
        this._drawContent();
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-exclude":
            this.setExclude();
            break;
          case "data-preset":
            this.setPreset();
            break;
          case "data-special":
            this.setSpecial();
            break;
          case "data-show":
            this.setShow();
            break;
          case "data-min-date":
            this.setMinDate();
            break;
          case "data-max-date":
            this.setMaxDate();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        element2.off(Metro2.events.click, ".prev-month, .next-month, .prev-year, .next-year");
        element2.off(Metro2.events.click, ".button.today");
        element2.off(Metro2.events.click, ".button.clear");
        element2.off(Metro2.events.click, ".button.cancel");
        element2.off(Metro2.events.click, ".button.done");
        element2.off(Metro2.events.click, ".week-days .day");
        element2.off(Metro2.events.click, ".days-row .day");
        element2.off(Metro2.events.click, ".curr-month");
        element2.off(Metro2.events.click, ".calendar-months li");
        element2.off(Metro2.events.click, ".curr-year");
        element2.off(Metro2.events.click, ".calendar-years li");
        element2.off(Metro2.events.click);
        if (o2.ripple === true) {
          element2.data("ripple").destroy();
        }
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3(".calendar .calendar-years").each(function() {
        $3(this).removeClass("open");
      });
      $3(".calendar .calendar-months").each(function() {
        $3(this).removeClass("open");
      });
    });
    Metro2.defaults.Calendar = CalendarDefaultConfig;
  })(Metro, Dom);

  // source/components/calendarpicker/calendarpicker.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var CalendarPickerDefaultConfig = {
      label: "",
      value: "",
      calendarpickerDeferred: 0,
      nullValue: true,
      useNow: false,
      prepend: "",
      dialogMode: false,
      dialogPoint: 640,
      dialogOverlay: true,
      overlayColor: "#000000",
      overlayAlpha: 0.5,
      size: "100%",
      format: METRO_DATE_FORMAT,
      inputFormat: null,
      clearButton: false,
      calendarButtonIcon: "\u{1F4C5}",
      clearButtonIcon: "\u274C",
      copyInlineStyles: false,
      openMode: "auto",
      clsPicker: "",
      clsInput: "",
      clsPrepend: "",
      clsLabel: "",
      onDayClick: Metro2.noop,
      onCalendarPickerCreate: Metro2.noop,
      onCalendarShow: Metro2.noop,
      onCalendarHide: Metro2.noop,
      onChange: Metro2.noop,
      onPickerChange: Metro2.noop,
      onMonthChange: Metro2.noop,
      onYearChange: Metro2.noop
    };
    Metro2.calendarPickerSetup = function(options) {
      CalendarPickerDefaultConfig = $3.extend({}, CalendarPickerDefaultConfig, options);
    };
    if (typeof globalThis["metroCalendarPickerSetup"] !== void 0) {
      Metro2.calendarPickerSetup(globalThis["metroCalendarPickerSetup"]);
    }
    Metro2.Component("calendar-picker", {
      init: function(options, elem) {
        this._super(elem, options, $3.extend({}, Metro2.defaults.Calendar, {}, CalendarPickerDefaultConfig), {
          value: null,
          value_date: null,
          calendar: null,
          overlay: null,
          id: Utils.elementId("calendar-picker"),
          time: [datetime().hour(), datetime().minute()]
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("calendar-picker-create", {
          element: this.element
        });
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options, locale = this.locale;
        var container = $3("<div>").addClass("input " + element2[0].className + " calendar-picker");
        var buttons = $3("<div>").addClass("button-group");
        var calendarButton, clearButton, cal = $3("<div>");
        var curr, _curr, initTime, initHours, initMinutes, elementValue, h7, m2;
        var body2 = $3("body");
        element2.attr("type", "text");
        element2.attr("autocomplete", "off");
        element2.attr("readonly", true);
        if (Utils.isValue(o2.initialTime)) {
          this.time = o2.initialTime.trim().split(":");
        }
        if (Utils.isValue(o2.initialHours)) {
          this.time[0] = parseInt(o2.initialHours);
        }
        if (Utils.isValue(o2.initialHours)) {
          this.time[1] = parseInt(o2.initialMinutes);
        }
        curr = ("" + o2.value).trim() !== "" ? o2.value : element2.val().trim();
        if (!Utils.isValue(curr)) {
          if (o2.useNow) {
            this.value = datetime();
            this.time = [this.value.hour(), this.value.minute()];
          }
        } else {
          _curr = curr.split(" ");
          this.value = (!o2.inputFormat ? datetime(_curr[0]) : Datetime.from(_curr[0], o2.inputFormat, locale)).align("day");
          if (_curr[1]) {
            this.time = _curr[1].trim().split(":");
          }
        }
        elementValue = !curr && o2.nullValue === true ? "" : datetime(that.value).format(o2.format, locale);
        if (o2.showTime && this.time && elementValue) {
          h7 = Str.lpad(this.time[0], "0", 2);
          m2 = Str.lpad(this.time[1], "0", 2);
          elementValue += " " + h7 + ":" + m2;
        }
        element2.val(elementValue);
        container.insertBefore(element2);
        element2.appendTo(container);
        buttons.appendTo(container);
        cal.appendTo(o2.dialogMode ? body2 : container);
        if (this.time && this.time.length) {
          initHours = this.time[0];
          if (typeof this.time[1] !== "undefined") initMinutes = this.time[1];
        }
        initTime = o2.initialTime;
        if (o2.initialHours) {
          initHours = o2.initialHours;
        }
        if (o2.initialHours) {
          initMinutes = o2.initialMinutes;
        }
        Metro2.makePlugin(cal, "calendar", {
          showTime: o2.showTime,
          initialTime: initTime,
          initialHours: initHours,
          initialMinutes: initMinutes,
          clsCalendarTime: o2.clsCalendarTime,
          clsTime: o2.clsTime,
          clsTimeHours: o2.clsTimeHours,
          clsTimeMinutes: o2.clsTimeMinutes,
          clsTimeButton: o2.clsTimeButton,
          clsTimeButtonPlus: o2.clsTimeButtonPlus,
          clsTimeButtonMinus: o2.clsTimeButtonMinus,
          wide: o2.wide,
          widePoint: o2.widePoint,
          format: o2.format,
          inputFormat: o2.inputFormat,
          pickerMode: true,
          show: o2.value,
          weekStart: o2.weekStart,
          outside: o2.outside,
          buttons: false,
          headerFormat: o2.headerFormat,
          clsCalendar: [o2.clsCalendar, "calendar-for-picker", o2.dialogMode ? "dialog-mode" : ""].join(" "),
          clsCalendarHeader: o2.clsCalendarHeader,
          clsCalendarContent: o2.clsCalendarContent,
          clsCalendarFooter: "d-none",
          clsCalendarMonths: o2.clsCalendarMonths,
          clsCalendarYears: o2.clsCalendarYears,
          clsToday: o2.clsToday,
          clsSelected: o2.clsSelected,
          clsExcluded: o2.clsExcluded,
          ripple: o2.ripple,
          rippleColor: o2.rippleColor,
          exclude: o2.exclude,
          minDate: o2.minDate,
          maxDate: o2.maxDate,
          yearsBefore: o2.yearsBefore,
          yearsAfter: o2.yearsAfter,
          special: o2.special,
          events: o2.events,
          showHeader: false,
          showFooter: false,
          multiSelect: false,
          showWeekNumber: o2.showWeekNumber,
          onDayClick: function(sel, day, time2, el) {
            var date = datetime(sel[0]).align("day");
            var elementValue2, h8, m3;
            that._removeOverlay();
            that.value = date;
            that.time = time2;
            elementValue2 = date.format(o2.format, locale);
            if (o2.showTime) {
              h8 = Str.lpad(time2[0], "0", 2);
              m3 = Str.lpad(time2[1], "0", 2);
              elementValue2 += " " + h8 + ":" + m3;
            }
            element2.val(elementValue2);
            element2.trigger("change");
            cal.removeClass("open open-up");
            cal.hide();
            that._fireEvent("change", {
              val: that.value.val(),
              time: that.time
            });
            that._fireEvent("day-click", {
              sel,
              day,
              time: time2,
              el
            });
            that._fireEvent("picker-change", {
              val: that.value.val(),
              time: that.time
            });
          },
          onTimeChange: function(time2) {
            var elementValue2, h8, m3;
            that.time = time2;
            if (!that.value) {
              that.value = datetime();
            }
            elementValue2 = that.value.format(o2.format, that.locale);
            if (o2.showTime) {
              h8 = Str.lpad(time2[0], "0", 2);
              m3 = Str.lpad(time2[1], "0", 2);
              elementValue2 += " " + h8 + ":" + m3;
            }
            element2.val(elementValue2);
            that._fireEvent("change", {
              val: that.value.val(),
              time: that.time
            });
            that._fireEvent("picker-change", {
              val: that.value.val(),
              time: that.time
            });
          },
          onMonthChange: o2.onMonthChange,
          onYearChange: o2.onYearChange
        });
        this.calendar = cal;
        if (o2.clearButton === true) {
          clearButton = $3("<button>").addClass("button input-clear-button").attr("tabindex", -1).attr("type", "button").html(o2.clearButtonIcon);
          clearButton.appendTo(buttons);
        }
        calendarButton = $3("<button>").addClass("button input-calendar-button").attr("tabindex", -1).attr("type", "button").html(o2.calendarButtonIcon);
        calendarButton.appendTo(buttons);
        if (o2.prepend !== "") {
          var prepend2 = $3("<div>").html(o2.prepend);
          prepend2.addClass("prepend").addClass(o2.clsPrepend).appendTo(container);
        }
        if (element2.attr("dir") === "rtl") {
          container.addClass("rtl");
        }
        if (String(o2.size).indexOf("%") > -1) {
          container.css({
            width: o2.size
          });
        } else {
          container.css({
            width: parseInt(o2.size) + "px"
          });
        }
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          $3.each(Utils.getInlineStyles(element2), function(key, value) {
            container.css(key, value);
          });
        }
        container.addClass(o2.clsPicker);
        element2.addClass(o2.clsInput);
        if (o2.dialogOverlay === true) {
          this.overlay = that._overlay();
        }
        if (o2.dialogMode === true) {
          container.addClass("dialog-mode");
        } else {
          if (Utils.media("(max-width: " + o2.dialogPoint + "px)")) {
            container.addClass("dialog-mode");
            this.calendar.addClass("dialog-mode");
          }
        }
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(container);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var container = element2.parent();
        var clear = container.find(".input-clear-button");
        var cal = this.calendar;
        var cal_plugin = Metro2.getPlugin(cal[0], "calendar");
        var calendar = this.calendar;
        $3(globalThis).on(
          Metro2.events.resize,
          function() {
            if (o2.dialogMode !== true) {
              if (Utils.media("(max-width: " + o2.dialogPoint + "px)")) {
                container.addClass("dialog-mode");
                calendar.appendTo("body").addClass("dialog-mode");
              } else {
                container.removeClass("dialog-mode");
                calendar.appendTo(container).removeClass("dialog-mode");
              }
            }
          },
          { ns: this.id }
        );
        if (clear.length > 0)
          clear.on(Metro2.events.click, function(e) {
            element2.val("").trigger("change").blur();
            that.value = null;
            e.preventDefault();
            e.stopPropagation();
          });
        container.on(Metro2.events.click, "button, input", function(e) {
          var value = that.value ? that.value : datetime();
          var presetValue = o2.inputFormat ? value.format(o2.inputFormat) : value.format("YYYY-MM-DD");
          value.align("day");
          if (cal.hasClass("open") === false && cal.hasClass("open-up") === false) {
            $3(".calendar-picker .calendar").removeClass("open open-up").hide();
            cal_plugin.setPreset([presetValue]);
            cal_plugin.setShow(value);
            if (container.hasClass("dialog-mode")) {
              that.overlay.appendTo($3("body"));
            }
            cal.addClass("open");
            if (o2.openMode === "auto") {
              if (!Metro2.utils.inViewport(cal[0])) {
                cal.addClass("open-up");
              }
            } else {
              if (o2.openMode === "up") {
                cal.addClass("open-up");
              }
            }
            that._fireEvent("calendar-show", {
              calendar: cal
            });
          } else {
            that._removeOverlay();
            cal.removeClass("open open-up");
            that._fireEvent("calendar-hide", {
              calendar: cal
            });
          }
          e.preventDefault();
          e.stopPropagation();
        });
        element2.on(Metro2.events.blur, function() {
          container.removeClass("focused");
        });
        element2.on(Metro2.events.focus, function() {
          container.addClass("focused");
        });
        element2.on(Metro2.events.change, function() {
          Utils.exec(o2.onChange, [that.value.val()], element2[0]);
        });
        container.on(Metro2.events.click, function(e) {
          e.preventDefault();
          e.stopPropagation();
        });
      },
      _overlay: function() {
        var o2 = this.options;
        var overlay = $3("<div>");
        overlay.addClass("overlay for-calendar-picker").addClass(o2.clsOverlay);
        if (o2.overlayColor === "transparent") {
          overlay.addClass("transparent");
        } else {
          overlay.css({
            background: Farbe.Routines.toRGBA(o2.overlayColor, o2.overlayAlpha)
          });
        }
        return overlay;
      },
      _removeOverlay: function() {
        $3("body").find(".overlay.for-calendar-picker").remove();
      },
      clear: function() {
        this.value = datetime();
        this.time = [datetime().hour(), datetime().minute()];
        this.element.val("");
      },
      val: function(v2, f3) {
        var element2 = this.element, o2 = this.options;
        var elementValue, h7, m2;
        if (arguments.length === 0 || Utils.isNull(v2)) {
          return {
            date: this.value.val(),
            time: this.time
          };
        }
        if (v2 === "") {
          return this.clear();
        }
        if (f3) {
          o2.inputFormat = f3;
        }
        var _curr = v2.split(" ");
        this.value = !o2.inputFormat ? datetime(_curr[0]) : Datetime.from(_curr[0], o2.inputFormat, this.locale);
        if (_curr[1]) {
          this.time = _curr[1].trim().split(":");
        }
        this.value.align("day");
        Metro2.getPlugin(this.calendar, "calendar").setTime(this.time);
        elementValue = this.value.format(o2.format);
        if (o2.showTime && this.time && elementValue) {
          h7 = Str.lpad(this.time[0], "0", 2);
          m2 = Str.lpad(this.time[1], "0", 2);
          elementValue += " " + h7 + ":" + m2;
        }
        element2.val(elementValue);
        element2.trigger("change");
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      getTime: function(asString) {
        var h7, m2;
        asString = asString || false;
        h7 = Str.lpad(this.time[0], "0", 2);
        m2 = Str.lpad(this.time[1], "0", 2);
        return asString ? h7 + ":" + m2 : this.time;
      },
      changeAttribute: function(attributeName, newValue) {
        var that = this;
        var cal = Metro2.getPlugin(this.calendar[0], "calendar");
        switch (attributeName) {
          case "value":
            that.val(newValue);
            break;
          case "disabled":
            this.toggleState();
            break;
          case "data-special":
            cal.setSpecial(newValue);
            break;
          case "data-exclude":
            cal.setExclude(newValue);
            break;
          case "data-min-date":
            cal.setMinDate(newValue);
            break;
          case "data-max-date":
            cal.setMaxDate(newValue);
            break;
          case "data-value":
            that.val(newValue);
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var container = element2.parent();
        var clear = container.find(".input-clear-button");
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        clear.off(Metro2.events.click);
        container.off(Metro2.events.click, "button, input");
        element2.off(Metro2.events.blur);
        element2.off(Metro2.events.focus);
        element2.off(Metro2.events.change);
        Metro2.getPlugin(this.calendar, "calendar").destroy();
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, ".overlay.for-calendar-picker", function() {
      $3(this).remove();
      $3(".calendar-for-picker.open").removeClass("open open-up");
    });
    $3(document).on(Metro2.events.click, function() {
      $3(".calendar-picker .calendar").removeClass("open open-up");
    });
  })(Metro, Dom);

  // source/components/carousel/carousel.js
  (function(Metro2, $3) {
    "use strict";
    const effects = [
      "slide",
      "slide-v",
      "fade",
      "switch",
      "zoom",
      "swirl"
    ];
    let CarouselDefaultConfig = {
      carouselDeferred: 0,
      autoStart: false,
      width: "100%",
      height: "16/9",
      // 3/4, 21/9
      effect: effects[0],
      effectFunc: "linear",
      direction: "left",
      //left, right
      duration: 300,
      period: 5e3,
      stopOnMouse: true,
      controls: true,
      controlsOnMouse: false,
      controlsOutside: false,
      controlPrev: "&larr;",
      controlNext: "&rarr;",
      bullets: true,
      bulletsStyle: "square",
      // square, circle, rect, diamond
      bulletsSize: "default",
      // default, mini, small, large
      bulletsPosition: "default",
      // default, left, right
      clsCarousel: "",
      clsSlides: "",
      clsSlide: "",
      clsControls: "",
      clsControlNext: "",
      clsControlPrev: "",
      clsBullets: "",
      clsBullet: "",
      clsBulletOn: "",
      clsThumbOn: "",
      onStop: Metro2.noop,
      onStart: Metro2.noop,
      onPlay: Metro2.noop,
      onSlideClick: Metro2.noop,
      onBulletClick: Metro2.noop,
      onThumbClick: Metro2.noop,
      onMouseEnter: Metro2.noop,
      onMouseLeave: Metro2.noop,
      onNextClick: Metro2.noop,
      onPrevClick: Metro2.noop,
      onSlideShow: Metro2.noop,
      onSlideHide: Metro2.noop,
      onCarouselCreate: Metro2.noop
    };
    Metro2.carouselSetup = function(options) {
      CarouselDefaultConfig = $3.extend({}, CarouselDefaultConfig, options);
    };
    if (typeof globalThis["metroCarouselSetup"] !== void 0) {
      Metro2.carouselSetup(globalThis["metroCarouselSetup"]);
    }
    Metro2.Component("carousel", {
      init: function(options, elem) {
        this._super(elem, options, CarouselDefaultConfig, {
          height: 0,
          width: 0,
          slides: [],
          current: null,
          currentIndex: null,
          dir: "left",
          interval: false,
          isAnimate: false,
          id: Metro2.utils.elementId("carousel")
        });
        return this;
      },
      _create: function() {
        const element2 = this.element, o2 = this.options;
        const slides = element2.find(".slide");
        let slides_container = element2.find(".slides");
        this.dir = this.options.direction;
        element2.addClass("carousel").addClass(o2.clsCarousel);
        element2.css({
          maxWidth: o2.width
        });
        if (o2.controlsOutside === true) {
          element2.addClass("controls-outside");
        }
        if (slides_container.length === 0) {
          slides_container = $3("<div>").addClass("slides").appendTo(element2);
          slides.appendTo(slides_container);
        }
        slides.addClass(o2.clsSlides);
        if (slides.length > 0) {
          this._createSlides();
          this._createControls();
          this._createBullets();
          this._createEvents();
          this._resize();
          if (o2.controlsOnMouse === true) {
            element2.find("[class*=carousel-switch]").fadeOut(0);
            element2.find(".carousel-bullets").fadeOut(0);
          }
          if (o2.autoStart === true) {
            this._start();
          } else {
            this._fireEvent("slide-show", {
              current: this.slides[this.currentIndex][0],
              prev: void 0
            });
          }
        }
        this._fireEvent("carousel-create", {
          element: element2
        });
      },
      _start: function() {
        const that = this, element2 = this.element, o2 = this.options;
        let period = o2.period;
        const current = this.slides[this.currentIndex];
        if (current.data("period") !== void 0) {
          period = current.data("period");
        }
        if (this.slides.length <= 1) {
          return;
        }
        if (this.interval === false) this.interval = setTimeout(function run() {
          const t = o2.direction === "left" ? "next" : "prior";
          that._slideTo(t, true);
        }, period);
        this._fireEvent("start", {
          element: element2
        });
      },
      _stop: function() {
        clearInterval(this.interval);
        this.interval = false;
      },
      _resize: function() {
        const element2 = this.element, o2 = this.options;
        const width = element2.outerWidth();
        let height;
        let medias = [];
        if (["16/9", "21/9", "4/3"].indexOf(o2.height) > -1) {
          height = Metro2.utils.aspectRatioH(width, o2.height);
        } else {
          if (String(o2.height).indexOf("@") > -1) {
            medias = o2.height.substring(1).toArray("|");
            $3.each(medias, function() {
              const media = this.toArray(",");
              if (globalThis.matchMedia(media[0]).matches) {
                if (["16/9", "21/9", "4/3"].indexOf(media[1]) > -1) {
                  height = Metro2.utils.aspectRatioH(width, media[1]);
                } else {
                  height = parseInt(media[1]);
                }
              }
            });
          } else {
            height = parseInt(o2.height);
          }
        }
        element2.css({
          height
        });
      },
      _createSlides: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const slides = element2.find(".slide");
        $3.each(slides, function(i3) {
          const slide = $3(this);
          if (slide.data("cover") !== void 0) {
            slide.css({
              backgroundImage: "url(" + slide.data("cover") + ")"
            });
          }
          if (i3 !== 0) {
            switch (o2.effect) {
              case "switch":
              case "slide":
                slide.css("left", "100%");
                break;
              case "slide-v":
                slide.css("top", "100%");
                break;
              case "fade":
              case "zoom":
              case "swirl":
                slide.css("opacity", "0");
                break;
            }
          } else {
            slide.addClass("active-slide");
          }
          slide.addClass(o2.clsSlide);
          that.slides.push(slide);
        });
        this.currentIndex = 0;
        this.current = this.slides[this.currentIndex];
      },
      _createControls: function() {
        const element2 = this.element, o2 = this.options;
        let next, prev;
        if (o2.controls === false) {
          return;
        }
        next = $3("<span>").addClass("carousel-switch-next").addClass(o2.clsControls).addClass(o2.clsControlNext).html(`<div></div>`);
        prev = $3("<span>").addClass("carousel-switch-prev").addClass(o2.clsControls).addClass(o2.clsControlPrev).html(`<div></div>`);
        if (o2.controlNext) {
          next.children("div").html(o2.controlNext);
        }
        if (o2.controlPrev) {
          prev.children("div").html(o2.controlPrev);
        }
        next.appendTo(element2);
        prev.appendTo(element2);
      },
      _createBullets: function() {
        const element2 = this.element, o2 = this.options;
        let bullets, i3;
        if (o2.bullets === false) {
          return;
        }
        bullets = $3("<div>").addClass("carousel-bullets").addClass(o2.bulletsSize + "-size").addClass("bullet-style-" + o2.bulletsStyle).addClass(o2.clsBullets);
        if (o2.bulletsPosition === "default" || o2.bulletsPosition === "center") {
          bullets.addClass("flex-justify-center");
        } else if (o2.bulletsPosition === "left") {
          bullets.addClass("flex-justify-start");
        } else {
          bullets.addClass("flex-justify-end");
        }
        for (i3 = 0; i3 < this.slides.length; i3++) {
          const bullet = $3("<span>").addClass("carousel-bullet").addClass(o2.clsBullet).data("slide", i3);
          if (i3 === 0) {
            bullet.addClass("bullet-on").addClass(o2.clsBulletOn);
          }
          bullet.appendTo(bullets);
        }
        bullets.appendTo(element2);
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.click, ".carousel-bullet", function() {
          const bullet = $3(this);
          if (that.isAnimate === false) {
            that._slideToSlide(bullet.data("slide"));
            that._fireEvent("bullet-click", {
              bullet
            });
          }
        });
        element2.on(Metro2.events.click, ".carousel-switch-next", function() {
          if (that.isAnimate === false) {
            that._slideTo("next", false);
            that._fireEvent("next-click", {
              button: this
            });
          }
        });
        element2.on(Metro2.events.click, ".carousel-switch-prev", function() {
          if (that.isAnimate === false) {
            that._slideTo("prev", false);
            that._fireEvent("prev-click", {
              button: this
            });
          }
        });
        if (o2.stopOnMouse === true && o2.autoStart === true) {
          element2.on(Metro2.events.enter, function() {
            that._stop();
            that._fireEvent("mouse-enter", {
              element: element2
            }, false, true);
          });
          element2.on(Metro2.events.leave, function() {
            that._start();
            that._fireEvent("mouse-leave", {
              element: element2
            }, false, true);
          });
        }
        if (o2.controlsOnMouse === true) {
          element2.on(Metro2.events.enter, function() {
            element2.find("[class*=carousel-switch]").fadeIn();
            element2.find(".carousel-bullets").fadeIn();
          });
          element2.on(Metro2.events.leave, function() {
            element2.find("[class*=carousel-switch]").fadeOut();
            element2.find(".carousel-bullets").fadeOut();
          });
        }
        element2.on(Metro2.events.click, ".slide", function() {
          const slide = $3(this);
          that._fireEvent("slide-click", {
            slide
          });
        });
        $3(globalThis).on(Metro2.events.resize, function() {
          that._resize();
        }, { ns: this.id });
      },
      _slideToSlide: function(index) {
        const element2 = this.element, o2 = this.options;
        let current, next, to;
        if (this.slides[index] === void 0) {
          return;
        }
        if (this.currentIndex === index) {
          return;
        }
        to = index > this.currentIndex ? "next" : "prev";
        current = this.slides[this.currentIndex];
        next = this.slides[index];
        this.currentIndex = index;
        this._effect(current, next, o2.effect, to);
        element2.find(".carousel-bullet").removeClass("bullet-on").removeClass(o2.clsBulletOn);
        element2.find(".carousel-bullet:nth-child(" + (this.currentIndex + 1) + ")").addClass("bullet-on").addClass(o2.clsBulletOn);
      },
      _slideTo: function(to, interval) {
        const element2 = this.element, o2 = this.options;
        let current, next;
        if (to === void 0) {
          to = "next";
        }
        current = this.slides[this.currentIndex];
        if (to === "next") {
          this.currentIndex++;
          if (this.currentIndex >= this.slides.length) {
            this.currentIndex = 0;
          }
        } else {
          this.currentIndex--;
          if (this.currentIndex < 0) {
            this.currentIndex = this.slides.length - 1;
          }
        }
        next = this.slides[this.currentIndex];
        this._effect(current, next, o2.effect, to, interval);
        element2.find(".carousel-bullet").removeClass("bullet-on").removeClass(o2.clsBulletOn);
        element2.find(".carousel-bullet:nth-child(" + (this.currentIndex + 1) + ")").addClass("bullet-on").addClass(o2.clsBulletOn);
      },
      _effect: function(current, next, effect, to, interval) {
        const that = this, o2 = this.options;
        let duration = o2.duration;
        let func, effectFunc = o2.effectFunc;
        let period = o2.period;
        const run = function(f3, c, n2, o3) {
          Metro2.Effects[f3](c[0], n2[0], o3);
        };
        if (next.data("duration") !== void 0) {
          duration = next.data("duration");
        }
        if (next.data("effectFunc") !== void 0) {
          effectFunc = next.data("effectFunc");
        }
        if (effect === "switch") {
          duration = 0;
        }
        current.stop(true);
        next.stop(true);
        this.isAnimate = true;
        setTimeout(function() {
          that.isAnimate = false;
        }, duration + 100);
        if (effect === "slide") {
          func = to === "next" ? "slideLeft" : "slideRight";
        } else if (effect === "slide-v") {
          func = to === "next" ? "slideUp" : "slideDown";
        } else {
          func = effect;
        }
        if (!effects.includes(effect)) {
          func = "switch";
        }
        run(func, current, next, { duration, ease: effectFunc });
        current.removeClass("active-slide");
        next.addClass("active-slide");
        setTimeout(function() {
          that._fireEvent("slide-show", {
            current: next[0],
            prev: current[0]
          });
        }, duration);
        setTimeout(function() {
          that._fireEvent("slide-hide", {
            current: current[0],
            next: next[0]
          });
        }, duration);
        if (interval === true) {
          if (next.data("period") !== void 0) {
            period = next.data("period");
          }
          this.interval = setTimeout(function run2() {
            const t = o2.direction === "left" ? "next" : "prior";
            that._slideTo(t, true);
          }, period);
        }
      },
      toSlide: function(index) {
        this._slideToSlide(index);
      },
      next: function() {
        this._slideTo("next");
      },
      prev: function() {
        this._slideTo("prev");
      },
      stop: function() {
        clearInterval(this.interval);
        this._fireEvent("stop");
      },
      play: function() {
        this._start();
        this._fireEvent("play");
      },
      setEffect: function(effect) {
        const element2 = this.element, o2 = this.options;
        const slides = element2.find(".slide");
        if (!effects.includes(effect)) return;
        o2.effect = effect;
        slides.removeStyleProperty("transform").css({
          top: 0,
          left: 0
        });
      },
      changeAttribute: function(attributeName, newValue) {
        if (attributeName === "data-effect") {
          this.setEffect(newValue);
        }
      },
      destroy: function() {
        const element2 = this.element, o2 = this.options;
        element2.off(Metro2.events.click, ".carousel-bullet");
        element2.off(Metro2.events.click, ".carousel-switch-next");
        element2.off(Metro2.events.click, ".carousel-switch-prev");
        if (o2.stopOnMouse === true && o2.autoStart === true) {
          element2.off(Metro2.events.enter);
          element2.off(Metro2.events.leave);
        }
        if (o2.controlsOnMouse === true) {
          element2.off(Metro2.events.enter);
          element2.off(Metro2.events.leave);
        }
        element2.off(Metro2.events.click, ".slide");
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/charms/charms.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var CharmsDefaultConfig = {
      charmsDeferred: 0,
      position: "right",
      opacity: 1,
      clsCharms: "",
      onCharmCreate: Metro2.noop,
      onOpen: Metro2.noop,
      onClose: Metro2.noop,
      onToggle: Metro2.noop
    };
    Metro2.charmsSetup = function(options) {
      CharmsDefaultConfig = $3.extend({}, CharmsDefaultConfig, options);
    };
    if (typeof globalThis["metroCharmsSetup"] !== void 0) {
      Metro2.charmsSetup(globalThis["metroCharmsSetup"]);
    }
    Metro2.Component("charms", {
      init: function(options, elem) {
        this._super(elem, options, CharmsDefaultConfig, {
          origin: {
            background: ""
          }
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("charm-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("charms").addClass(o2.position + "-side").addClass(o2.clsCharms);
        this.origin.background = element2.css("background-color");
        element2.css({
          backgroundColor: Farbe.Routines.toRGBA(Utils.getStyleOne(element2, "background-color"), o2.opacity)
        });
      },
      _createEvents: function() {
      },
      open: function() {
        var element2 = this.element;
        element2.addClass("open");
        this._fireEvent("open");
      },
      close: function() {
        var element2 = this.element;
        element2.removeClass("open");
        this._fireEvent("close");
      },
      toggle: function() {
        var element2 = this.element;
        if (element2.hasClass("open") === true) {
          this.close();
        } else {
          this.open();
        }
        this._fireEvent("toggle");
      },
      opacity: function(v2) {
        var element2 = this.element, o2 = this.options;
        if (v2 === void 0) {
          return o2.opacity;
        }
        var opacity = Math.abs(parseFloat(v2));
        if (opacity < 0 || opacity > 1) {
          return;
        }
        o2.opacity = opacity;
        element2.css({
          backgroundColor: Farbe.Routines.toRGBA(Utils.getStyleOne(element2, "background-color"), opacity)
        });
      },
      changeOpacity: function() {
        var element2 = this.element;
        this.opacity(element2.attr("data-opacity"));
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-opacity":
            this.changeOpacity();
            break;
        }
      },
      destroy: function() {
        return this.element;
      }
    });
    Metro2["charms"] = {
      check: function(el) {
        if (Utils.isMetroObject(el, "charms") === false) {
          console.warn("Element is not a charms component");
          return false;
        }
        return true;
      },
      isOpen: function(el) {
        if (this.check(el) === false) return;
        return $3(el).hasClass("open");
      },
      open: function(el) {
        if (this.check(el) === false) return;
        Metro2.getPlugin(el, "charms").open();
      },
      close: function(el) {
        if (this.check(el) === false) return;
        Metro2.getPlugin(el, "charms").close();
      },
      toggle: function(el) {
        if (this.check(el) === false) return;
        Metro2.getPlugin(el, "charms").toggle();
      },
      closeAll: function() {
        $3("[data-role*=charms]").each(function() {
          Metro2.getPlugin(this, "charms").close();
        });
      },
      opacity: function(el, opacity) {
        if (this.check(el) === false) return;
        Metro2.getPlugin(el, "charms").opacity(opacity);
      }
    };
  })(Metro, Dom);

  // source/components/dropdown/dropdown.js
  (function(Metro2, $3) {
    "use strict";
    let DropdownDefaultConfig = {
      dropdownDeferred: 0,
      dropFilter: null,
      toggleElement: null,
      noClose: false,
      duration: 50,
      openMode: "auto",
      onDrop: Metro2.noop,
      onUp: Metro2.noop,
      onDropdownCreate: Metro2.noop
    };
    Metro2.dropdownSetup = function(options) {
      DropdownDefaultConfig = $3.extend({}, DropdownDefaultConfig, options);
    };
    if (typeof globalThis["metroDropdownSetup"] !== void 0) {
      Metro2.dropdownSetup(globalThis["metroDropdownSetup"]);
    }
    Metro2.Component("dropdown", {
      init: function(options, elem) {
        this._super(elem, options, DropdownDefaultConfig, {
          _toggle: null,
          displayOrigin: null,
          isOpen: false
        });
        return this;
      },
      _create: function() {
        const that = this, element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("dropdown-create", {
          element: element2
        });
        if (element2.hasClass("open")) {
          element2.removeClass("open");
          setTimeout(function() {
            that.open(true);
          }, 0);
        }
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        let toggle;
        if (o2.openMode !== "auto" && o2.openMode === "up") {
          element2.addClass("drop-up");
        }
        toggle = o2.toggleElement !== null ? $3(o2.toggleElement) : element2.siblings(".dropdown-toggle").length > 0 ? element2.siblings(".dropdown-toggle") : element2.prev();
        this.displayOrigin = Metro2.utils.getStyleOne(element2, "display");
        element2.css("display", "none");
        this._toggle = toggle;
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const toggle = this._toggle, parent2 = element2.parent();
        toggle.on(Metro2.events.click, function(e) {
          $3(".active-container").removeClass("active-container");
          if (element2.css("display") !== "none" && !element2.hasClass("keep-open")) {
            that._close(element2);
          } else {
            $3("[data-role*=dropdown]").each(function(i3, el) {
              if (!element2.parents("[data-role*=dropdown]").is(el) && !$3(el).hasClass("keep-open") && $3(el).css("display") !== "none") {
                if (!Metro2.utils.isValue(o2.dropFilter)) {
                  that._close(el);
                } else {
                  if ($3(el).closest(o2.dropFilter).length > 0) {
                    that._close(el);
                  }
                }
              }
            });
            if (element2.hasClass("horizontal")) {
              element2.css({
                "visibility": "hidden",
                "display": "block"
              });
              let children_width = 0;
              $3.each(element2.children("li"), function() {
                children_width += $3(this).outerWidth(true);
              });
              element2.css({
                "visibility": "visible",
                "display": "none"
              });
              element2.css("width", children_width + 2);
            }
            that._open(element2);
            parent2.addClass("active-container");
          }
          e.preventDefault();
          e.stopPropagation();
        });
        if (o2.noClose === true) {
          element2.addClass("keep-open").on(Metro2.events.click, function(e) {
            e.stopPropagation();
          });
        }
        $3(element2).find("li.disabled a").on(Metro2.events.click, function(e) {
          e.preventDefault();
        });
      },
      _close: function(el, immediate) {
        el = $3(el);
        const dropdown = Metro2.getPlugin(el, "dropdown");
        const toggle = dropdown._toggle;
        const options = dropdown.options;
        let func = "slideUp";
        toggle.removeClass("active-toggle").removeClass("active-control");
        dropdown.element.parent().removeClass("active-container");
        if (immediate) {
          func = "hide";
        }
        el[func](immediate ? 0 : options.duration, function() {
          dropdown._fireEvent("close");
          dropdown._fireEvent("up");
          if (options.openMode === "auto") {
            dropdown.element.removeClass("drop-up drop-as-dialog");
          }
        });
        this.isOpen = false;
      },
      // TODO Add control: if no space for drop-down and no space for drop-up, element will must drop-down
      _open: function(el, immediate) {
        el = $3(el);
        const dropdown = Metro2.getPlugin(el, "dropdown");
        const toggle = dropdown._toggle;
        const options = dropdown.options;
        const func = "slideDown";
        toggle.addClass("active-toggle").addClass("active-control");
        el[func](immediate ? 0 : options.duration, function() {
          if (options.openMode === "auto") {
            if (!Metro2.utils.inViewport(dropdown.element[0])) {
              dropdown.element.addClass("drop-up");
            }
            if (!Metro2.utils.inViewport(dropdown.element[0])) {
              dropdown.element.removeClass("drop-up").addClass("drop-as-dialog");
            }
          }
          dropdown._fireEvent("open");
          dropdown._fireEvent("drop");
        });
        this.isOpen = true;
      },
      close: function(immediate) {
        this._close(this.element, immediate);
      },
      open: function(immediate) {
        this._open(this.element, immediate);
      },
      toggle: function() {
        if (this.isOpen)
          this.close();
        else
          this.open();
      },
      changeAttribute: function() {
      },
      destroy: function() {
        this._toggle.off(Metro2.events.click);
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3("[data-role*=dropdown]").each(function() {
        const el = $3(this);
        if (el.css("display") !== "none" && !el.hasClass("keep-open") && !el.hasClass("stay-open") && !el.hasClass("ignore-document-click")) {
          Metro2.getPlugin(el, "dropdown").close();
        }
      });
    });
  })(Metro, Dom);

  // source/components/select/select.js
  (function(Metro2, $3) {
    "use strict";
    let SelectDefaultConfig = {
      id: "",
      label: "",
      size: "normal",
      selectDeferred: 0,
      clearButton: false,
      clearButtonIcon: "\u274C",
      usePlaceholder: false,
      placeholder: "",
      addEmptyValue: false,
      emptyValue: "",
      duration: 0,
      prepend: "",
      append: "",
      filterPlaceholder: "",
      filter: false,
      dropHeight: 200,
      dropWidth: null,
      dropFullSize: false,
      openMode: "auto",
      showGroupName: false,
      shortTag: true,
      // tag with name max width 120px
      source: null,
      sourceMethod: "GET",
      clsSelect: "",
      clsSelectInput: "",
      clsPrepend: "",
      clsAppend: "",
      clsOption: "",
      clsOptionActive: "",
      clsOptionGroup: "",
      clsDropList: "",
      clsDropContainer: "",
      clsSelectedItem: "",
      clsSelectedItemAction: "",
      clsLabel: "",
      clsGroupName: "",
      clsFilterInput: "",
      onClear: Metro2.noop,
      onChange: Metro2.noop,
      onUp: Metro2.noop,
      onDrop: Metro2.noop,
      onItemSelect: Metro2.noop,
      onItemDeselect: Metro2.noop,
      onSelectCreate: Metro2.noop
    };
    Metro2.selectSetup = function(options) {
      SelectDefaultConfig = $3.extend({}, SelectDefaultConfig, options);
    };
    if (typeof globalThis["metroSelectSetup"] !== void 0) {
      Metro2.selectSetup(globalThis["metroSelectSetup"]);
    }
    Metro2.Component("select", {
      init: function(options, elem) {
        this._super(elem, options, SelectDefaultConfig, {
          list: null,
          placeholder: null,
          observer: null
        });
        return this;
      },
      _create: function() {
        const element2 = this.element;
        this._createSelect();
        this._createEvents();
        this._fireEvent("select-create", {
          element: element2
        });
      },
      _setPlaceholder: function() {
        const element2 = this.element, o2 = this.options;
        const input2 = element2.siblings(".select-input");
        if (o2.usePlaceholder === true && (!Metro2.utils.isValue(element2.val()) || element2.val() == o2.emptyValue)) {
          input2.html(o2.placeholder || this.strings.label_select_more);
        }
      },
      _addTag: function(val, data2) {
        const element2 = this.element, o2 = this.options;
        let tag, tagSize, container = element2.closest(".select");
        let html2 = "<span class='title'>" + val + "</span>";
        tag = $3("<div>").addClass("tag").addClass(o2.shortTag ? "short-tag" : "").addClass(o2.clsSelectedItem).html(html2).data("option", data2);
        $3("<span>").addClass("action unselect-option").addClass(o2.clsSelectedItemAction).html("&times;").appendTo(tag);
        if (container.hasClass("input-large")) {
          tagSize = "large";
        } else if (container.hasClass("input-small")) {
          tagSize = "small";
        }
        tag.addClass(tagSize);
        return tag;
      },
      _addOption: function(item, parent2, input2, multiple, group) {
        const option2 = $3(item);
        let l2, a2;
        const element2 = this.element, o2 = this.options;
        let html2 = Metro2.utils.isValue(option2.attr("data-template")) ? option2.attr("data-template").replace("$1", item.text) : item.text;
        const displayValue = option2.attr("data-display");
        l2 = $3("<li>").addClass(o2.clsOption).data("option", item).attr("data-text", item.text).attr("data-value", item.value ? item.value : "");
        a2 = $3("<a>").html(html2);
        const optionIcon = option2.attr("data-icon");
        if (optionIcon) {
          a2.prepend($3("<span>").addClass("icon").html(optionIcon));
        }
        if (displayValue) {
          l2.attr("data-display", displayValue);
          html2 = displayValue;
        }
        l2.addClass(item.className);
        l2.data("group", group);
        if (option2.is(":disabled")) {
          l2.addClass("disabled");
        }
        if (option2.is(":selected")) {
          let g2 = "";
          if (o2.showGroupName && group) {
            g2 = `&nbsp;<span class='selected-item__group-name ${o2.clsGroupName}'>${group}</span>`;
          }
          if (multiple) {
            l2.addClass("d-none");
            input2.append(this._addTag(a2.html() + g2, l2));
          } else {
            html2 = a2.html() + g2;
            element2.val(item.value);
            input2.html(html2);
            element2.fire("change", {
              val: item.value
            });
            l2.addClass("active");
          }
        }
        l2.append(a2).appendTo(parent2);
      },
      _addOptionGroup: function(item, parent2, input2, multiple) {
        const that = this, o2 = this.options;
        const group = $3(item);
        $3("<li>").html(item.label).addClass("group-title").addClass(o2.clsOptionGroup).appendTo(parent2);
        $3.each(group.children(), function() {
          that._addOption(this, parent2, input2, multiple, item.label);
        });
      },
      _createOptions: function() {
        const that = this, element2 = this.element, o2 = this.options, select2 = element2.parent();
        const list = select2.find("ul").empty();
        const selected = element2.find("option[selected]").length > 0;
        const multiple = element2[0].multiple;
        const input2 = element2.siblings(".select-input");
        element2.siblings(".select-input").empty();
        if (o2.addEmptyValue === true) {
          element2.prepend(
            $3(
              "<option " + (!selected ? "selected" : "") + " value='" + o2.emptyValue + "' class='d-none'></option>"
            )
          );
        }
        $3.each(element2.children(), function() {
          if (this.tagName === "OPTION") {
            that._addOption(this, list, input2, multiple, null);
          } else if (this.tagName === "OPTGROUP") {
            that._addOptionGroup(this, list, input2, multiple);
          }
        });
      },
      _createSelect: async function() {
        const that = this, element2 = this.element, o2 = this.options;
        const container = element2.wrap("<label>");
        const multiple = element2[0].multiple;
        const select_id = Metro2.utils.elementId("select");
        const buttons = $3("<div>").addClass("button-group");
        let input2, drop_container, drop_container_input, list, filter_input, dropdown_toggle;
        const checkboxID = Metro2.utils.elementId("select-focus-trigger");
        const checkbox = $3("<input type='checkbox'>").addClass("select-focus-trigger").attr("id", checkboxID);
        this.placeholder = $3("<span>").addClass("placeholder").html(o2.placeholder);
        container.attr("id", o2.id ? o2.id : select_id).attr("for", checkboxID);
        container[0].className = Metro2.utils.classNames(
          element2[0].className,
          "input-" + o2.size,
          "select",
          o2.clsSelect
        );
        dropdown_toggle = $3("<span>").addClass("dropdown-toggle");
        dropdown_toggle.appendTo(container);
        if (multiple) {
          container.addClass("multiple");
        }
        buttons.appendTo(container);
        checkbox.appendTo(container);
        input2 = $3("<div>").addClass("select-input").addClass(o2.clsSelectInput).attr("name", "__" + select_id + "__");
        drop_container = $3("<div>").addClass("drop-container").addClass(o2.clsDropContainer);
        if (o2.dropFullSize === false) {
          if (o2.dropWidth) {
            drop_container.css({
              width: +o2.dropWidth
            });
          }
        } else {
          container.addClass("drop-full-size");
        }
        drop_container_input = $3("<div>").appendTo(drop_container);
        list = $3("<ul>").addClass("option-list").addClass(o2.clsDropList).css({
          "max-height": o2.dropHeight
        });
        filter_input = $3(
          `<input type='text' data-role='input' data-clear-button-icon="${o2.clearButtonIcon}">`
        ).attr("placeholder", o2.filterPlaceholder || this.strings.label_filter + "...").appendTo(drop_container_input);
        filter_input.addClass(o2.clsFilterInput);
        container.append(input2);
        container.append(drop_container);
        drop_container.append(drop_container_input);
        if (o2.filter !== true) {
          drop_container_input.hide();
        }
        drop_container.append(list);
        if (o2.source) {
          await this.fetch(o2.source, {
            method: o2.sourceMethod || "GET"
          });
        }
        this._createOptions();
        this._setPlaceholder();
        this._createDroppable(drop_container);
        this.list = list;
        if (o2.clearButton === true && !element2[0].readOnly) {
          const clearButton = $3("<button>").addClass("button input-clear-button").addClass(o2.clsClearButton).attr("tabindex", -1).attr("type", "button").html(o2.clearButtonIcon);
          clearButton.appendTo(buttons);
        } else {
          buttons.addClass("d-none");
        }
        if (o2.prepend !== "" && !multiple) {
          const prepend2 = $3("<div>").html(o2.prepend);
          prepend2.addClass("prepend").addClass(o2.clsPrepend).appendTo(container);
        }
        if (o2.append !== "" && !multiple) {
          const append2 = $3("<div>").html(o2.append);
          append2.addClass("append").addClass(o2.clsAppend).appendTo(container);
        }
        if (element2.attr("dir") === "rtl") {
          container.addClass("rtl").attr("dir", "rtl");
        }
        if (o2.label) {
          const label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(container);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this.observer = new MutationObserver(this._updateSelect.bind(this));
        this.observer.observe(element2[0], {
          childList: true,
          subtree: true
        });
      },
      _createDroppable: function(drop_container) {
        const that = this, o2 = this.options;
        const filter_input = drop_container.find("input");
        const dropdown_toggle = drop_container.siblings(".dropdown-toggle");
        const container = this.element.closest(".select");
        const list = drop_container.find("ul");
        Metro2.makePlugin(drop_container, "dropdown", {
          dropFilter: ".select",
          duration: o2.duration,
          toggleElement: [container],
          openMode: o2.openMode,
          onDrop: function() {
            let dropped, target;
            dropdown_toggle.addClass("active-toggle");
            dropped = $3(".select .drop-container");
            $3.each(dropped, function() {
              const drop = $3(this);
              if (drop.is(drop_container)) {
                return;
              }
              const dataDrop = Metro2.getPlugin(drop, "dropdown");
              if (dataDrop && dataDrop.close) {
                dataDrop.close();
              }
            });
            filter_input.val("").trigger(Metro2.events.keyup);
            target = list.find("li.active").length > 0 ? $3(list.find("li.active")[0]) : void 0;
            if (target !== void 0) {
              list[0].scrollTop = target.position().top - (list.height() - target.height()) / 2;
            }
            that._fireEvent("drop", {
              list: list[0]
            });
          },
          onUp: function() {
            dropdown_toggle.removeClass("active-toggle");
            that._fireEvent("up", {
              list: list[0]
            });
          }
        });
      },
      _updateSelect: function(mutation) {
        for (let record of mutation) {
          if (record.type === "childList") {
            if (record.addedNodes.length || record.removedNodes.length) {
              this._createOptions();
            }
          }
        }
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const container = element2.closest(".select");
        const drop_container = container.find(".drop-container");
        const input2 = element2.siblings(".select-input");
        const filter_input = drop_container.find("input");
        const list = drop_container.find("ul");
        const clearButton = container.find(".input-clear-button");
        const checkbox = container.find(".select-focus-trigger");
        checkbox.on("focus", function() {
          container.addClass("focused");
        });
        checkbox.on("blur", function() {
          container.removeClass("focused");
        });
        clearButton.on(Metro2.events.click, function(e) {
          element2.val(o2.emptyValue);
          if (element2[0].multiple) {
            list.find("li").removeClass("d-none");
          }
          input2.clear();
          that._setPlaceholder();
          e.preventDefault();
          e.stopPropagation();
          that._fireEvent("clear");
          that._fireEvent("change", {
            selected: that.getSelected()
          });
        });
        element2.on(Metro2.events.change, function() {
          that._setPlaceholder();
        });
        container.on(Metro2.events.click, function() {
          $3(".focused").removeClass("focused");
          container.addClass("focused");
        });
        input2.on(Metro2.events.click, function() {
          $3(".focused").removeClass("focused");
          container.addClass("focused");
        });
        list.on(Metro2.events.click, "li", function(e) {
          if ($3(this).hasClass("group-title")) {
            e.preventDefault();
            e.stopPropagation();
            return;
          }
          const leaf = $3(this);
          const displayValue = leaf.attr("data-display");
          const val = leaf.data("value");
          const group = leaf.data("group");
          let html2 = displayValue ? displayValue : leaf.children("a").html();
          let selected;
          const option2 = leaf.data("option");
          const options = element2.find("option");
          if (o2.showGroupName && group) {
            html2 += "&nbsp;<span class='selected-item__group-name " + o2.clsGroupName + "'>" + group + "</span>";
          }
          if (element2[0].multiple) {
            leaf.addClass("d-none");
            input2.append(that._addTag(html2, leaf));
          } else {
            list.find("li.active").removeClass("active").removeClass(o2.clsOptionActive);
            leaf.addClass("active").addClass(o2.clsOptionActive);
            input2.html(html2);
            Metro2.getPlugin(drop_container, "dropdown").close();
          }
          $3.each(options, function() {
            if (this === option2) {
              this.selected = true;
            }
          });
          that._fireEvent("item-select", {
            val,
            option: option2,
            leaf: leaf[0]
          });
          selected = that.getSelected();
          that._fireEvent("change", {
            selected
          });
        });
        input2.on("click", ".tag .action", function(e) {
          const item = $3(this).closest(".tag");
          const leaf = item.data("option");
          const option2 = leaf.data("option");
          let selected;
          leaf.removeClass("d-none");
          $3.each(element2.find("option"), function() {
            if (this === option2) {
              this.selected = false;
            }
          });
          item.remove();
          that._fireEvent("item-deselect", {
            option: option2
          });
          selected = that.getSelected();
          that._fireEvent("change", {
            selected
          });
          e.preventDefault();
          e.stopPropagation();
        });
        filter_input.on(Metro2.events.keyup, function() {
          const filter = this.value.toUpperCase();
          const li2 = list.find("li");
          let i3, a2;
          for (i3 = 0; i3 < li2.length; i3++) {
            if ($3(li2[i3]).hasClass("group-title")) continue;
            a2 = li2[i3].getElementsByTagName("a")[0];
            if (a2.innerHTML.toUpperCase().indexOf(filter) > -1) {
              li2[i3].style.display = "";
            } else {
              li2[i3].style.display = "none";
            }
          }
        });
        filter_input.on(Metro2.events.click, function(e) {
          e.preventDefault();
          e.stopPropagation();
        });
        drop_container.on(Metro2.events.click, function(e) {
          e.preventDefault();
          e.stopPropagation();
        });
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.closest(".select").addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.closest(".select").removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      reset: function(to_default) {
        const element2 = this.element;
        const options = element2.find("option");
        const select2 = element2.closest(".select");
        let selected;
        $3.each(options, function() {
          this.selected = !Metro2.utils.isNull(to_default) ? this.defaultSelected : false;
        });
        this.list.find("li").remove();
        select2.find(".select-input").html("");
        this._createOptions();
        selected = this.getSelected();
        this._fireEvent("change", {
          selected
        });
      },
      getSelected: function() {
        const element2 = this.element;
        const result = [];
        element2.find("option").each(function() {
          if (this.selected) result.push(this.value);
        });
        return result;
      },
      val: function(val) {
        const that = this, element2 = this.element, o2 = this.options;
        const input2 = element2.siblings(".select-input");
        const options = element2.find("option");
        const list_items = this.list.find("li");
        const result = [];
        const multiple = element2.attr("multiple") !== void 0;
        let option2;
        let i3, html2, list_item, option_value, selected, group;
        if (Metro2.utils.isNull(val)) {
          $3.each(options, function() {
            if (this.selected) result.push(this.value);
          });
          return multiple ? result : result[0];
        }
        $3.each(options, function() {
          this.selected = false;
        });
        list_items.removeClass("active").removeClass(o2.clsOptionActive);
        input2.html("");
        if (Array.isArray(val) === false) {
          val = [val];
        }
        $3.each(val, function() {
          for (i3 = 0; i3 < options.length; i3++) {
            option2 = options[i3];
            html2 = Metro2.utils.isValue(option2.getAttribute("data-template")) ? option2.getAttribute("data-template").replace("$1", option2.text) : option2.text;
            if ("" + option2.value === "" + this) {
              option2.selected = true;
              break;
            }
          }
          for (i3 = 0; i3 < list_items.length; i3++) {
            list_item = $3(list_items[i3]);
            group = list_item.data("group");
            option_value = list_item.attr("data-value");
            if ("" + option_value === "" + this) {
              if (o2.showGroupName && group) {
                html2 += "&nbsp;<span class='selected-item__group-name'>" + group + "</span>";
              }
              if (multiple) {
                list_item.addClass("d-none");
                input2.append(that._addTag(html2, list_item));
              } else {
                list_item.addClass("active").addClass(o2.clsOptionActive);
                input2.html(html2);
              }
              break;
            }
          }
        });
        selected = this.getSelected();
        this._fireEvent("change", {
          selected
        });
      },
      options: function(op, selected, delimiter) {
        return this.data(op, selected, delimiter);
      },
      data: function(op, selected, delimiter) {
        const element2 = this.element;
        let option_group, _selected;
        const _delimiter = delimiter || ",";
        if (typeof selected === "string") {
          _selected = selected.toArray(_delimiter).map(function(v2) {
            return isNaN(v2) ? v2 : +v2;
          });
        } else if (Array.isArray(selected)) {
          _selected = selected.slice().map(function(v2) {
            return isNaN(v2) ? v2 : +v2;
          });
        } else {
          _selected = [];
        }
        this.observer.disconnect();
        element2.empty();
        if (typeof op === "string") {
          element2.html(op);
        } else if (Metro2.utils.isObject2(op)) {
          $3.each(op, function(key, val) {
            if (Metro2.utils.isObject2(val)) {
              option_group = $3("<optgroup label=''>").attr("label", key).appendTo(element2);
              $3.each(val, function(key2, val2) {
                const op2 = $3("<option>").attr("value", key2).text(val2).appendTo(option_group);
                if (_selected.indexOf(+key2) > -1) {
                  op2.prop("selected", true);
                }
              });
            } else {
              const op2 = $3("<option>").attr("value", key).text(val).appendTo(element2);
              if (_selected.indexOf(key) > -1) {
                op2.prop("selected", true);
              }
            }
          });
        }
        this._createOptions();
        this.observer.observe(element2[0], {
          childList: true,
          subtree: true
        });
        return this;
      },
      addOption: function(val, title3, selected) {
        const element2 = this.element;
        const option2 = $3("<option>").attr("value", val).text(title3 ? title3 : val);
        element2.append(option2);
        if (selected) {
          if (element2[0].multiple) {
          } else {
            element2.find("option").prop("selected", false);
          }
          option2.prop("selected", true);
        }
        return this;
      },
      addOptions: function(values) {
        const that = this;
        if (!values) {
          return this;
        }
        this.observer.disconnect();
        if (Array.isArray(values)) {
          $3.each(values, function() {
            const o2 = this;
            if (Metro2.utils.isObject2(o2)) {
              that.addOption(o2.val, o2.title, o2.selected);
            } else {
              that.addOption(o2);
            }
          });
        } else if (Metro2.utils.isObject2(values)) {
          $3.each(values, function(key, val) {
            that.addOption(key, val);
          });
        }
        this._createOptions();
        this.observer.observe(element[0], {
          childList: true,
          subtree: true
        });
        return this;
      },
      removeOption: function(val) {
        const element2 = this.element;
        const options = element2.find("option");
        options.each(function() {
          const $el = $3(this);
          if ($el.attr("value") == val) {
            $el.remove();
          }
        });
        this._createOptions();
        return this;
      },
      removeOptions: function(values) {
        const element2 = this.element;
        const options = element2.find("option");
        if (!values || !Array.isArray(values)) {
          return this;
        }
        options.each(function() {
          const $el = $3(this);
          const val = $el.attr("value");
          if (values.indexOf(val) > -1) {
            $el.remove();
          }
        });
        this._createOptions();
        return this;
      },
      fetch: async function(source2, options) {
        const element2 = this.element;
        const _options = Object.assign({
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          }
        }, options);
        const result = await fetch(source2, _options);
        if (result.ok === false) {
          return;
        }
        const data2 = await result.json();
        $3.each(data2, function() {
          const option2 = $3("<option>").attr("value", this.value).html(this.text);
          if (this.icon) {
            option2.attr("data-icon", this.icon);
          }
          option2.appendTo(element2);
        });
      },
      changeAttribute: function(attributeName) {
        if (attributeName === "disabled") {
          this.toggleState();
        }
      },
      destroy: function() {
        const element2 = this.element;
        const container = element2.closest(".select");
        const drop_container = container.find(".drop-container");
        const input2 = element2.siblings(".select-input");
        const filter_input = drop_container.find("input");
        const list = drop_container.find("ul");
        const clearButton = container.find(".input-clear-button");
        container.off(Metro2.events.click);
        container.off(Metro2.events.click, ".input-clear-button");
        input2.off(Metro2.events.click);
        filter_input.off(Metro2.events.blur);
        filter_input.off(Metro2.events.focus);
        list.off(Metro2.events.click, "li");
        filter_input.off(Metro2.events.keyup);
        drop_container.off(Metro2.events.click);
        clearButton.off(Metro2.events.click);
        drop_container.data("dropdown").destroy();
        container.remove();
      }
    });
    $3(document).on(
      Metro2.events.click,
      function() {
        $3(".select").removeClass("focused");
      },
      { ns: "blur-select-elements" }
    );
  })(Metro, Dom);

  // source/components/input/input.js
  (function(Metro2, $3) {
    "use strict";
    let InputDefaultConfig = {
      inputDeferred: 0,
      label: "",
      autocomplete: null,
      autocompleteUrl: null,
      autocompleteUrlMethod: "GET",
      autocompleteUrlKey: null,
      autocompleteDivider: ",",
      autocompleteListHeight: 200,
      history: false,
      historyPreset: "",
      historyDivider: "|",
      preventSubmit: false,
      defaultValue: "",
      size: "default",
      prepend: "",
      append: "",
      searchButton: false,
      clearButton: true,
      revealButton: true,
      randomButton: false,
      clearButtonIcon: "\u274C",
      revealButtonIcon: "\u{1F440}",
      searchButtonIcon: "\u{1F50D}",
      randomButtonIcon: "\u{1F3B2}",
      customButtons: [],
      searchButtonClick: "submit",
      randomSymbols: "0123456789;abcdefghijklmnopqrstuvwxyz;ABCDEFGHIJKLMNOPQRSTUVWXYZ;<>!?@#$%^&*()_+",
      randomLength: 12,
      prependOptions: "",
      prependOptionsSep: ",",
      appendOptions: "",
      appendOptionsSep: ",",
      badge: null,
      clsComponent: "",
      clsInput: "",
      clsPrepend: "",
      clsAppend: "",
      clsClearButton: "",
      clsRevealButton: "",
      clsCustomButton: "",
      clsSearchButton: "",
      clsRandomButton: "",
      clsLabel: "",
      onAutocompleteSelect: Metro2.noop,
      onHistoryChange: Metro2.noop,
      onHistoryUp: Metro2.noop,
      onHistoryDown: Metro2.noop,
      onClearClick: Metro2.noop,
      onRevealClick: Metro2.noop,
      onSearchButtonClick: Metro2.noop,
      onEnterClick: Metro2.noop,
      onInputCreate: Metro2.noop
    };
    Metro2.inputSetup = function(options) {
      InputDefaultConfig = $3.extend({}, InputDefaultConfig, options);
    };
    if (typeof globalThis["metroInputSetup"] !== void 0) {
      Metro2.inputSetup(globalThis["metroInputSetup"]);
    }
    Metro2.Component("input", {
      init: function(options, elem) {
        this._super(elem, options, InputDefaultConfig, {
          history: [],
          historyIndex: -1,
          autocomplete: [],
          prependOptionsList: null,
          appendOptionsList: null
        });
        return this;
      },
      _create: function() {
        const element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("input-create", {
          element: element2
        });
      },
      _createStructure: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const container = $3("<div>").addClass("input " + element2[0].className);
        const buttons = $3("<div>").addClass("button-group");
        let clearButton, revealButton, searchButton, randomButton;
        if (Metro2.utils.isValue(o2.historyPreset)) {
          $3.each(o2.historyPreset.toArray(o2.historyDivider), function() {
            that.history.push(this);
          });
          that.historyIndex = that.history.length - 1;
        }
        if (element2.attr("type") === void 0) {
          element2.attr("type", "text");
        }
        container.insertBefore(element2);
        element2.appendTo(container);
        buttons.appendTo(container);
        if (!Metro2.utils.isValue(element2.val().trim())) {
          element2.val(o2.defaultValue);
        }
        if (o2.clearButton === true && !element2[0].readOnly) {
          clearButton = $3("<button>").addClass("button input-clear-button").addClass(o2.clsClearButton).attr("tabindex", -1).attr("type", "button").html(o2.clearButtonIcon).attr("title", this.strings.label_clear_input);
          clearButton.appendTo(buttons);
        }
        if (element2.attr("type") === "password" && o2.revealButton === true) {
          revealButton = $3("<button>").addClass("button input-reveal-button").addClass(o2.clsRevealButton).attr("tabindex", -1).attr("type", "button").html(o2.revealButtonIcon).attr("title", this.strings.label_reveal_password);
          revealButton.appendTo(buttons);
        }
        if (o2.searchButton === true) {
          searchButton = $3("<button>").addClass("button input-search-button").addClass(o2.clsSearchButton).attr("tabindex", -1).attr("type", o2.searchButtonClick === "submit" ? "submit" : "button").html(o2.searchButtonIcon).attr("title", this.strings.label_search_input);
          searchButton.appendTo(buttons);
        }
        if (o2.randomButton === true) {
          randomButton = $3("<button>").addClass("button input-random-button").addClass(o2.clsRandomButton).attr("tabindex", -1).attr("type", "button").html(o2.randomButtonIcon).attr("title", this.strings.label_generate_random);
          randomButton.appendTo(buttons);
        }
        let opt2, ul2;
        if (o2.prepend) {
          $3("<div>").html(o2.prepend).addClass("prepend").addClass(o2.clsPrepend).appendTo(container);
        }
        if (o2.prependOptions) {
          opt2 = $3("<div>").addClass("prepend-options").appendTo(container);
          opt2.append(ul2 = $3("<select data-role='select'>").addClass("options-list"));
          o2.prependOptions.toArray(o2.prependOptionsSep).forEach(function(item) {
            $3("<option>").attr("value", item).html(item).appendTo(ul2);
          });
          this.prependOptionsList = ul2;
        }
        if (o2.append) {
          $3("<div>").html(o2.append).addClass("append").addClass(o2.clsAppend).appendTo(container);
        }
        if (o2.appendOptions) {
          opt2 = $3("<div>").addClass("append-options").appendTo(container);
          opt2.append(ul2 = $3("<select data-role='select'>").addClass("options-list"));
          o2.appendOptions.toArray(o2.appendOptionsSep).forEach(function(item) {
            $3("<option>").attr("value", item).html(item).appendTo(ul2);
          });
          this.appendOptionsList = ul2;
        }
        const customButtons = Metro2.utils.isObject(o2.customButtons);
        if (Array.isArray(customButtons)) {
          $3.each(customButtons, function() {
            const item = this;
            const btn = $3("<button>");
            btn.addClass("button input-custom-button").addClass(o2.clsCustomButton).addClass(item.cls).attr("tabindex", -1).attr("type", "button").html(item.text);
            if (item.attr && typeof item.attr === "object") {
              $3.each(item.attr, function(k2, v2) {
                btn.attr(Str.dashedName(k2), v2);
              });
            }
            if (item.onclick) btn.on("click", () => {
              item.onclick.apply(btn, [element2.valueOf(), element2]);
            });
            btn.appendTo(buttons);
          });
        }
        if (Metro2.utils.isValue(element2.attr("data-exclaim"))) {
          container.attr("data-exclaim", element2.attr("data-exclaim"));
        }
        if (element2.attr("dir") === "rtl") {
          container.addClass("rtl").attr("dir", "rtl");
        }
        element2[0].className = "";
        container.addClass(o2.clsComponent);
        element2.addClass(o2.clsInput);
        if (o2.size !== "default") {
          container.css({
            width: o2.size
          });
        }
        if (!Metro2.utils.isNull(o2.autocomplete) || !Metro2.utils.isNull(o2.autocompleteUrl)) {
          $3("<div>").addClass("autocomplete-list").css({
            maxHeight: o2.autocompleteListHeight,
            display: "none"
          }).appendTo(container);
        }
        if (Metro2.utils.isValue(o2.autocomplete)) {
          const autocomplete_obj = Metro2.utils.isObject(o2.autocomplete);
          if (autocomplete_obj !== false) {
            this.autocomplete = autocomplete_obj;
          } else {
            this.autocomplete = o2.autocomplete.toArray(o2.autocompleteDivider);
          }
        }
        if (Metro2.utils.isValue(o2.autocompleteUrl)) {
          fetch(o2.autocompleteUrl, {
            method: o2.autocompleteUrlMethod
          }).then(function(response) {
            return response.text();
          }).then(function(data2) {
            let newData = [];
            try {
              newData = JSON.parse(data2);
              if (o2.autocompleteUrlKey) {
                newData = newData[o2.autocompleteUrlKey];
              }
            } catch (e) {
              newData = data2.split("\n");
            }
            that.autocomplete = that.autocomplete.concat(newData);
          });
        }
        if (o2.label) {
          const label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(container);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (o2.badge) {
          container.append($3("<div>").addClass("badge").html(o2.badge));
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this.component = container;
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const container = element2.closest(".input");
        const autocompleteList = container.find(".autocomplete-list");
        container.on(Metro2.events.click, ".input-clear-button", function() {
          const curr = element2.val();
          element2.val(Metro2.utils.isValue(o2.defaultValue) ? o2.defaultValue : "").fire("clear").fire("change").fire("keyup").focus();
          if (autocompleteList.length > 0) {
            autocompleteList.css({
              display: "none"
            });
          }
          that._fireEvent("clear-click", {
            prev: curr
          });
        });
        container.on(Metro2.events.click, ".input-reveal-button", function() {
          if (element2.attr("type") === "password") {
            element2.attr("type", "text");
          } else {
            element2.attr("type", "password");
          }
          that._fireEvent("reveal-click", {
            val: element2.val()
          });
        });
        container.on(Metro2.events.click, ".input-search-button", function() {
          if (o2.searchButtonClick !== "submit") {
            console.log("Search button clicked");
            that._fireEvent("search-button-click", {
              val: that.val(),
              button: this
            });
          } else {
            if (this.form) this.form.submit();
          }
        });
        container.on(Metro2.events.click, ".input-random-button", function() {
          const val = that._generateRandomValue();
          element2.val(val).fire("change").fire("keyup").focus();
          that._fireEvent("random-click", {
            val
          });
        });
        element2.on(Metro2.events.keyup, function(e) {
          const val = element2.val().trim();
          if (o2.history && e.keyCode === Metro2.keyCode.ENTER && val !== "") {
            element2.val("");
            that.history.push(val);
            that.historyIndex = that.history.length - 1;
            that._fireEvent("history-change", {
              val,
              history: that.history,
              historyIndex: that.historyIndex
            });
            if (o2.preventSubmit === true) {
              e.preventDefault();
            }
          }
          if (o2.history && e.keyCode === Metro2.keyCode.UP_ARROW) {
            that.historyIndex--;
            if (that.historyIndex >= 0) {
              element2.val("");
              element2.val(that.history[that.historyIndex]);
              that._fireEvent("history-down", {
                val: element2.val(),
                history: that.history,
                historyIndex: that.historyIndex
              });
            } else {
              that.historyIndex = 0;
            }
            e.preventDefault();
          }
          if (o2.history && e.keyCode === Metro2.keyCode.DOWN_ARROW) {
            that.historyIndex++;
            if (that.historyIndex < that.history.length) {
              element2.val("");
              element2.val(that.history[that.historyIndex]);
              that._fireEvent("history-up", {
                val: element2.val(),
                history: that.history,
                historyIndex: that.historyIndex
              });
            } else {
              that.historyIndex = that.history.length - 1;
            }
            e.preventDefault();
          }
        });
        element2.on(Metro2.events.keydown, function(e) {
          if (e.keyCode === Metro2.keyCode.ENTER) {
            that._fireEvent("enter-click", {
              val: element2.val()
            });
          }
        });
        element2.on(Metro2.events.blur, function() {
          container.removeClass("focused");
        });
        element2.on(Metro2.events.focus, function() {
          container.addClass("focused");
        });
        element2.on(Metro2.events.input, function() {
          const val = this.value.toLowerCase();
          that._drawAutocompleteList(val);
        });
        container.on(Metro2.events.click, ".autocomplete-list .item", function() {
          const val = $3(this).attr("data-autocomplete-value");
          element2.val(val);
          autocompleteList.css({
            display: "none"
          });
          element2.trigger("change");
          that._fireEvent("autocomplete-select", {
            value: val
          });
        });
      },
      _generateRandomValue: function() {
        const o2 = this.options;
        const groups = o2.randomSymbols.split(";");
        const symbolsPerGroup = Math.round(o2.randomLength / groups.length);
        let val = [];
        for (const g2 of groups) {
          const symbols = g2.split("");
          const len = symbols.length;
          for (let i3 = 0; i3 < symbolsPerGroup; i3++) {
            val.push(symbols[Math.floor(Math.random() * len)]);
          }
        }
        return val.shuffle().join("");
      },
      _drawAutocompleteList: function(val) {
        const that = this, element2 = this.element;
        const container = element2.closest(".input");
        const autocompleteList = container.find(".autocomplete-list");
        let items;
        if (autocompleteList.length === 0) {
          return;
        }
        autocompleteList.html("");
        items = this.autocomplete.filter(function(item) {
          return item.toLowerCase().indexOf(val) > -1;
        });
        autocompleteList.css({
          display: items.length > 0 ? "block" : "none"
        });
        $3.each(items, function() {
          const v2 = this;
          let index = v2.toLowerCase().indexOf(val), content;
          const item = $3("<div>").addClass("item").attr("data-autocomplete-value", v2);
          if (index === 0) {
            content = "<strong>" + v2.substring(0, val.length) + "</strong>" + v2.substring(val.length);
          } else {
            content = v2.substring(0, index) + "<strong>" + v2.substring(index, val.length) + "</strong>" + v2.substring(index + val.length);
          }
          item.html(content).appendTo(autocompleteList);
          that._fireEvent("draw-autocomplete-item", {
            item
          });
        });
      },
      getHistory: function() {
        return this.history;
      },
      getHistoryIndex: function() {
        return this.historyIndex;
      },
      setHistoryIndex: function(val) {
        this.historyIndex = val >= this.history.length ? this.history.length - 1 : val;
      },
      setHistory: function(history2, append2) {
        const that = this, o2 = this.options;
        if (Metro2.utils.isNull(history2)) return;
        if (!Array.isArray(history2) && typeof history2 === "string") {
          history2 = history2.toArray(o2.historyDivider);
        }
        if (append2 === true) {
          $3.each(history2, function() {
            that.history.push(this);
          });
        } else {
          this.history = history2;
        }
        this.historyIndex = this.history.length - 1;
      },
      clear: function() {
        this.element.val("");
      },
      toDefault: function() {
        this.element.val(Metro2.utils.isValue(this.options.defaultValue) ? this.options.defaultValue : "");
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      setAutocompleteList: function(l2) {
        const autocomplete_list = Metro2.utils.isObject(l2);
        if (autocomplete_list !== false) {
          this.autocomplete = autocomplete_list;
        } else if (typeof l2 === "string") {
          this.autocomplete = l2.toArray(this.options.autocompleteDivider);
        }
      },
      val: function(v2, splitter = ";") {
        const element2 = this.element, o2 = this.options;
        if (!Metro2.utils.isValue(v2)) {
          let val2 = element2.val();
          if (o2.prependOptions) {
            val2 = this.prependOptionsList.val() + val2;
          }
          if (o2.appendOptions) {
            val2 = val2 + this.appendOptionsList.val();
          }
          return val2;
        }
        const groups = v2.split(splitter);
        let prepend2 = "", append2 = "", val;
        if (o2.prependOptions) {
          prepend2 = groups.shift();
          Metro2.getPlugin(this.prependOptionsList, "select").val(prepend2);
          console.log(prepend2);
        }
        if (o2.appendOptions) {
          append2 = groups.pop();
          Metro2.getPlugin(this.appendOptionsList, "select").val(append2);
        }
        val = groups.join("");
        element2.val(val);
      },
      prependOptionsVal: function(v2) {
        if (!this.options.prependOptions) {
          return;
        }
        if (!Metro2.utils.isValue(v2)) {
          this.prependOptionsList.val();
        }
        this.prependOptionsList.val(v2);
      },
      appendOptionsVal: function(v2) {
        if (!this.options.appendOptions) {
          return;
        }
        if (!Metro2.utils.isValue(v2)) {
          return this.appendOptionsList.val();
        }
        this.appendOptionsList.val(v2);
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "disabled":
            this.toggleState();
            break;
        }
      },
      destroy: function() {
        const element2 = this.element;
        const parent2 = element2.parent();
        const clearBtn = parent2.find(".input-clear-button");
        const revealBtn = parent2.find(".input-reveal-button");
        const customBtn = parent2.find(".input-custom-button");
        if (clearBtn.length > 0) {
          clearBtn.off(Metro2.events.click);
        }
        if (revealBtn.length > 0) {
          revealBtn.off(Metro2.events.start);
          revealBtn.off(Metro2.events.stop);
        }
        if (customBtn.length > 0) {
          clearBtn.off(Metro2.events.click);
        }
        element2.off(Metro2.events.blur);
        element2.off(Metro2.events.focus);
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3(".input .autocomplete-list").hide();
    });
  })(Metro, Dom);

  // source/components/chat/chat.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ChatDefaultConfig = {
      chatDeferred: 0,
      inputTimeFormat: null,
      timeFormat: "D MMM hh:mm A",
      name: "John Doe",
      avatar: "<span>\u{1F466}</span>",
      welcome: null,
      welcomeAvatar: "<span>\u{1F47D}</span>",
      title: null,
      width: "100%",
      height: "auto",
      messages: null,
      sendButtonTitle: "",
      sendButtonIcon: "",
      readonly: false,
      clsChat: "",
      clsName: "",
      clsTime: "",
      clsInput: "",
      clsSendButton: "",
      clsMessageLeft: "default",
      clsMessageRight: "default",
      onMessage: Metro2.noop,
      onSend: Metro2.noop,
      onSendButtonClick: Metro2.noop,
      onChatCreate: Metro2.noop
    };
    Metro2.chatSetup = function(options) {
      ChatDefaultConfig = $3.extend({}, ChatDefaultConfig, options);
    };
    if (typeof globalThis["metroChatSetup"] !== void 0) {
      Metro2.chatSetup(globalThis["metroChatSetup"]);
    }
    Metro2.Component("chat", {
      init: function(options, elem) {
        this._super(elem, options, ChatDefaultConfig, {
          input: null,
          classes: "primary secondary success alert warning yellow info dark light".split(" "),
          lastMessage: null
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("chat-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var messages, messageInput, input2;
        var customButtons = [
          {
            html: `${o2.sendButtonTitle || this.strings.label_send}${o2.sendButtonIcon}`,
            cls: o2.clsSendButton + " js-chat-send-button",
            onclick: o2.onSendButtonClick
          }
        ];
        element2.addClass("chat").addClass(o2.clsChat);
        element2.css({
          width: o2.width,
          height: o2.height
        });
        if (Utils.isValue(o2.title)) {
          $3("<div>").addClass("title").html(o2.title).appendTo(element2);
        }
        messages = $3("<div>").addClass("messages");
        messages.appendTo(element2);
        messageInput = $3("<div>").addClass("message-input").appendTo(element2);
        input2 = $3("<input type='text'>").addClass("chat-input");
        input2.appendTo(messageInput);
        setTimeout(() => {
          Metro2.makePlugin(input2[0], "input", {
            customButtons,
            clsInput: o2.clsInput
          });
        });
        if (o2.welcome) {
          this.add({
            text: o2.welcome,
            time: datetime(),
            position: "left",
            name: "Chat Bot",
            avatar: o2.welcomeAvatar
          });
        }
        if (Utils.isValue(o2.messages) && typeof o2.messages === "string") {
          o2.messages = Utils.isObject(o2.messages);
        }
        if (!Utils.isNull(o2.messages) && typeof o2.messages === "object" && Utils.objectLength(o2.messages) > 0) {
          $3.each(o2.messages, function() {
            that.add(this);
          });
        }
        element2.find(".message-input")[o2.readonly ? "addClass" : "removeClass"]("disabled");
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var send = function() {
          var input2 = element2.find(".chat-input input");
          var msg = "" + input2.val(), m2;
          if (msg.trim() === "") {
            return false;
          }
          m2 = {
            id: Utils.elementId("chat-message"),
            name: o2.name,
            avatar: o2.avatar,
            text: msg,
            position: "right",
            time: datetime()
          };
          that.add(m2);
          input2.val("");
          that._fireEvent("send", {
            msg: m2
          });
          input2.focus();
        };
        element2.on(Metro2.events.click, ".js-chat-send-button", function() {
          send();
        });
        element2.on(Metro2.events.keyup, ".chat-input > input", function(e) {
          if (e.keyCode === Metro2.keyCode.ENTER) {
            send();
          }
        });
      },
      add: function(msg) {
        var that = this, element2 = this.element, o2 = this.options, locale = this.locale;
        var message, sender, time2, item, avatar, text;
        var messages = element2.find(".messages");
        var messageDate;
        messageDate = o2.inputTimeFormat ? Datetime.from(msg.time, o2.inputTimeFormat, locale) : datetime(msg.time);
        message = $3("<div>").addClass("message").addClass(msg.position).appendTo(messages);
        item = $3("<div>").addClass("message-item").appendTo(message);
        if (Metro2.utils.isUrl(msg.avatar) || msg.avatar.includes("data:image")) {
          avatar = $3("<img>").attr("src", msg.avatar).attr("alt", msg.avatar).addClass("message-avatar").appendTo(item);
        } else if (msg.avatar) {
          const _el = $3(msg.avatar);
          if (_el.length) {
            avatar = _el.addClass("message-avatar").appendTo(item);
          } else {
            avatar = $3("<span>").addClass("message-avatar").html(msg.avatar).appendTo(item);
          }
        }
        text = $3("<div>").addClass("message-text").append($3("<div>").addClass("message-text-inner").html(Str.escapeHtml(msg.text))).appendTo(item);
        time2 = $3("<div>").addClass("message-time").addClass(o2.clsTime).text(messageDate.format(o2.timeFormat)).appendTo(text);
        sender = $3("<div>").addClass("message-sender").addClass(o2.clsName).text(msg.name).appendTo(text);
        if (Utils.isValue(msg.id)) {
          message.attr("id", msg.id);
        }
        if (msg.position === "left" && Utils.isValue(o2.clsMessageLeft)) {
          text.addClass(o2.clsMessageLeft);
        }
        if (msg.position === "right" && Utils.isValue(o2.clsMessageRight)) {
          text.addClass(o2.clsMessageRight);
        }
        if (this.lastMessage && this.lastMessage.position === msg.position) {
          text.addClass("--next");
          avatar.visible(false);
          sender.hide();
        }
        that._fireEvent("message", {
          msg,
          el: {
            message,
            sender,
            time: time2,
            item,
            avatar,
            text
          }
        });
        messages.animate({
          draw: {
            scrollTop: messages[0].scrollHeight
          },
          dur: 1e3
        });
        this.lastMessage = msg;
        return this;
      },
      addMessages: function(messages) {
        var that = this;
        if (Utils.isValue(messages) && typeof messages === "string") {
          messages = Utils.isObject(messages);
        }
        if (typeof messages === "object" && Utils.objectLength(messages) > 0) {
          $3.each(messages, function() {
            that.add(this);
          });
        }
        return this;
      },
      delMessage: function(id) {
        var element2 = this.element;
        element2.find(".messages").find("#" + id).remove();
        return this;
      },
      updMessage: function(msg) {
        var element2 = this.element;
        var message = element2.find(".messages").find("#" + msg.id);
        const o2 = this.options, locale = this.locale;
        if (message.length === 0) return this;
        let messageDate = o2.inputTimeFormat ? Datetime.from(msg.time, o2.inputTimeFormat, locale) : datetime(msg.time);
        message.find(".message-text-inner").html(msg.text);
        message.find(".message-time").html(messageDate.format(o2.timeFormat));
        return this;
      },
      clear: function() {
        var element2 = this.element;
        var messages = element2.find(".messages");
        messages.html("");
        this.lastMessage = null;
      },
      toggleReadonly: function(readonly) {
        var element2 = this.element, o2 = this.options;
        o2.readonly = typeof readonly === "undefined" ? !o2.readonly : readonly;
        element2.find(".message-input")[o2.readonly ? "addClass" : "removeClass"]("disabled");
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-readonly":
            this.toggleReadonly();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var sendButton = element2.find(".js-chat-send-button");
        var input2 = element2.find("input[type=text]");
        sendButton.off(Metro2.events.click);
        input2.off(Metro2.events.keyup);
        return element2;
      }
    });
    Metro2.defaults.Chat = ChatDefaultConfig;
  })(Metro, Dom);

  // source/components/checkbox/checkbox.js
  (function(Metro2, $3) {
    "use strict";
    globalThis.CHECKBOX_STATE = {
      CHECKED: 1,
      UNCHECKED: -1,
      INDETERMINATE: 0
    };
    let CheckboxDefaultConfig = {
      checkboxDeferred: 0,
      state: CHECKBOX_STATE.UNCHECKED,
      threeState: false,
      prepend: "",
      append: "",
      clsCheckbox: "",
      clsCaption: "",
      clsPrepend: "",
      clsAppend: "",
      onCheckboxCreate: Metro2.noop
    };
    Metro2.metroCheckboxSetup = function(options) {
      CheckboxDefaultConfig = $3.extend({}, CheckboxDefaultConfig, options);
    };
    if (typeof globalThis["metroCheckboxSetup"] !== void 0) {
      Metro2.metroCheckboxSetup(globalThis["metroCheckboxSetup"]);
    }
    Metro2.Component("checkbox", {
      init: function(options, elem) {
        this._super(elem, options, CheckboxDefaultConfig, {
          origin: {
            className: ""
          },
          state: CHECKBOX_STATE.UNCHECKED
        });
        return this;
      },
      _create: function() {
        const o2 = this.options;
        if (o2.threeState === false && o2.state === 0 || o2.state === "indeterminate") {
          o2.state = CHECKBOX_STATE.UNCHECKED;
        }
        if (o2.state === CHECKBOX_STATE.UNCHECKED || o2.state === "unchecked") {
          this.state = CHECKBOX_STATE.UNCHECKED;
        } else if (o2.state === 0 || o2.state === "indeterminate") {
          this.state = CHECKBOX_STATE.INDETERMINATE;
        } else {
          this.state = CHECKBOX_STATE.CHECKED;
        }
        this._createStructure();
        this._createEvents();
        this._fireEvent("checkbox-create");
      },
      _indeterminate: function(v2 = true) {
        const element2 = this.element;
        element2[0].indeterminate = v2;
        element2.attr("data-indeterminate", v2);
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        const container = element2.wrap("<label>").addClass("checkbox").addClass(o2.clsCheckbox);
        element2.attr("type", "checkbox");
        if (o2.prepend) {
          container.prepend($3("<span>").addClass("caption-prepend").addClass(o2.clsPrepend).addClass(o2.clsCaption).html(o2.prepend));
        }
        if (o2.append) {
          container.append($3("<span>").addClass("caption-append").addClass(o2.clsAppend).addClass(o2.clsCaption).html(o2.append));
        }
        if (element2.attr("readonly") !== void 0) {
          element2.on("click", function(e) {
            e.preventDefault();
          });
        }
        if (this.elem.checked && this.state !== CHECKBOX_STATE.INDETERMINATE) {
          this.state = true;
        }
        this._drawState();
      },
      _drawState: function() {
        const elem = this.elem;
        this._indeterminate(false);
        elem.checked = this.state !== CHECKBOX_STATE.UNCHECKED;
        if (this.state === CHECKBOX_STATE.INDETERMINATE) {
          this._indeterminate(true);
        }
      },
      _createEvents: function() {
        const element2 = this.element, o2 = this.options;
        const that = this;
        element2.on("click", function() {
          that.state++;
          if (that.state === 0 && o2.threeState === false) {
            that.state = 1;
          }
          if (that.state === 2) {
            that.state = -1;
          }
          that._drawState();
        });
      },
      check: function() {
        this.setCheckState(CHECKBOX_STATE.CHECKED);
      },
      uncheck: function() {
        this.setCheckState(CHECKBOX_STATE.UNCHECKED);
      },
      indeterminate: function() {
        this.setCheckState(CHECKBOX_STATE.INDETERMINATE);
      },
      setCheckState: function(state2) {
        if (state2 === -1 || state2 === "unchecked") {
          this.state = CHECKBOX_STATE.UNCHECKED;
        } else if (state2 === 0 || state2 === "indeterminate") {
          this.state = CHECKBOX_STATE.INDETERMINATE;
        } else {
          this.state = CHECKBOX_STATE.CHECKED;
        }
        this._drawState();
        return this;
      },
      getCheckState: function(asString = false) {
        if (!asString) {
          return this.state;
        }
        switch (this.state) {
          case -1:
            return "unchecked";
          case 0:
            return "indeterminate";
          case 1:
            return "checked";
        }
      },
      toggle: function() {
        this.state++;
        if (this.state === 2) {
          this.state = -1;
        }
        this._drawState();
      },
      changeAttribute: function(attr, newVal) {
        const changeState = function(val) {
          this.toggle(val);
        };
        switch (attr) {
          case "data-state":
            changeState(newVal);
            break;
        }
      },
      destroy: function() {
        const element2 = this.element;
        element2.off("click");
        element2.parent().remove();
      }
    });
  })(Metro, Dom);

  // source/components/clock/clock.js
  (function(Metro2, $3) {
    "use strict";
    let ClockDefaultConfig = {
      clockDeferred: 0,
      show: "row",
      showTime: true,
      showDate: true,
      dateFormat: "DD.MM.YYYY",
      timeFormat: "HH:mm",
      divider: "&nbsp;&nbsp;",
      twoLines: false,
      onTick: Metro2.noop,
      onSecond: Metro2.noop,
      onClockCreate: Metro2.noop
    };
    Metro2.clockSetup = function(options) {
      ClockDefaultConfig = $3.extend({}, ClockDefaultConfig, options);
    };
    if (typeof globalThis["metroClockSetup"] !== void 0) {
      Metro2.clockSetup(globalThis["metroClockSetup"]);
    }
    Metro2.Component("clock", {
      init: function(options, elem) {
        this._super(elem, options, ClockDefaultConfig, {
          _clockInterval: null
        });
        return this;
      },
      _create: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.addClass("clock");
        if (o2.show === "column") {
          element2.addClass("show-column");
        }
        this._fireEvent("clock-create", {
          element: element2
        });
        this._tick();
        this._clockInterval = setInterval(function() {
          that._tick();
        }, 500);
        this._secondInterval = setInterval(function() {
          that._second();
        }, 1e3);
      },
      _second: function() {
        const timestamp = /* @__PURE__ */ new Date();
        this._fireEvent("second", {
          timestamp
        });
      },
      _tick: function() {
        const element2 = this.element, o2 = this.options;
        const timestamp = datetime();
        let result = "";
        const date = timestamp.format(o2.dateFormat);
        const time2 = timestamp.format(o2.timeFormat);
        if (o2.showTime) {
          result = `<span class="clock-time">${time2}</span>`;
        }
        if (o2.showDate) {
          result += `<span class="clock-date">${date}</span>`;
        }
        element2.html(result);
        this._fireEvent("tick", {
          timestamp
        });
      },
      changeAttribute: function(attr, val) {
        switch (attr) {
          case "data-date-format":
            this.options.dateFormat = val;
            break;
          case "data-time-format":
            this.options.timeFormat = val;
            break;
          case "data-show-date":
            this.options.showDate = JSON.parse(val);
            break;
          case "data-show-time":
            this.options.showTime = JSON.parse(val);
            break;
          case "data-divider":
            this.options.divider = val;
            break;
          case "data-two-lines":
            this.options.twoLines = JSON.parse(val);
            break;
        }
        this._tick();
      },
      destroy: function() {
        clearInterval(this._clockInterval);
        this._clockInterval = null;
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/collapse/collapse.js
  (function(Metro2, $3) {
    "use strict";
    var CollapseDefaultConfig = {
      collapseDeferred: 0,
      collapsed: false,
      toggleElement: false,
      duration: 100,
      onExpand: Metro2.noop,
      onCollapse: Metro2.noop,
      onCollapseCreate: Metro2.noop
    };
    Metro2.collapseSetup = function(options) {
      CollapseDefaultConfig = $3.extend({}, CollapseDefaultConfig, options);
    };
    if (typeof globalThis["metroCollapseSetup"] !== void 0) {
      Metro2.collapseSetup(globalThis["metroCollapseSetup"]);
    }
    Metro2.Component("collapse", {
      init: function(options, elem) {
        this._super(elem, options, CollapseDefaultConfig, {
          toggle: null
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var toggle;
        toggle = o2.toggleElement !== false ? $3(o2.toggleElement) : element2.siblings(".collapse-toggle").length > 0 ? element2.siblings(".collapse-toggle") : element2.siblings("a:nth-child(1)");
        if (o2.collapsed === true || element2.attr("collapsed") === true) {
          element2.hide(0);
        }
        toggle.on(Metro2.events.click, function(e) {
          if (element2.css("display") !== "none" && !element2.hasClass("keep-open")) {
            that._close(element2);
          } else {
            that._open(element2);
          }
          if (["INPUT"].indexOf(e.target.tagName) === -1) {
            e.preventDefault();
          }
          e.stopPropagation();
        });
        this.toggle = toggle;
        this._fireEvent("collapse-create", {
          element: element2
        });
      },
      _close: function(el, immediate) {
        var elem = $3(el);
        var collapsed = elem.data("collapsed");
        if (collapsed) {
          return;
        }
        var dropdown = Metro2.getPlugin(elem[0], "collapse");
        var options = dropdown.options;
        var func = immediate ? "show" : "slideUp";
        var dur = immediate ? 0 : options.duration;
        this.toggle.removeClass("active-toggle");
        elem[func](dur, function() {
          el.trigger("onCollapse", null, el);
          el.data("collapsed", true);
          el.addClass("collapsed");
          dropdown._fireEvent("collapse");
        });
      },
      _open: function(el, immediate) {
        var elem = $3(el);
        var collapsed = elem.data("collapsed");
        if (!collapsed) {
          return;
        }
        var dropdown = Metro2.getPlugin(elem[0], "collapse");
        var options = dropdown.options;
        var func = immediate ? "show" : "slideDown";
        var dur = immediate ? 0 : options.duration;
        this.toggle.addClass("active-toggle");
        elem[func](dur, function() {
          el.trigger("onExpand", null, el);
          el.data("collapsed", false);
          el.removeClass("collapsed");
          dropdown._fireEvent("expand");
        });
      },
      collapse: function(immediate) {
        this._close(this.element, immediate);
      },
      expand: function(immediate) {
        this._open(this.element, immediate);
      },
      close: function(immediate) {
        this._close(this.element, immediate);
      },
      open: function(immediate) {
        this._open(this.element, immediate);
      },
      isCollapsed: function() {
        return this.element.data("collapsed");
      },
      toggleState: function() {
        var element2 = this.element;
        if (element2.attr("collapsed") === true || element2.data("collapsed") === true) {
          this.collapse();
        } else {
          this.expand();
        }
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "collapsed":
          case "data-collapsed":
            this.toggleState();
            break;
        }
      },
      destroy: function() {
        this.toggle.off(Metro2.events.click);
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/color-selector/color-selector.js
  (function(Metro2, $3) {
    "use strict";
    const supportedColorTypes = "hex, rgb, rgba, hsl, hsla, hsv, cmyk";
    let ColorSelectorDefaultConfig = {
      defaultSwatches: "#FFFFFF,#000000,#FFFB0D,#0532FF,#FF9300,#00F91A,#FF2700,#686868,#EE5464,#D27AEE,#5BA8C4,#E64AA9,#1ba1e2,#6a00ff,#bebebe,#f8f8f8",
      userColors: null,
      returnValueType: "hex",
      returnAsString: true,
      showValues: supportedColorTypes,
      showAsString: null,
      showUserColors: true,
      controller: null,
      addUserColorTitle: null,
      userColorsTitle: null,
      hslMode: "percent",
      showAlphaChannel: true,
      inputThreshold: 300,
      initColor: null,
      readonlyInput: false,
      clsSelector: "",
      clsSwatches: "",
      clsSwatch: "",
      clsValue: "",
      clsLabel: "",
      clsInput: "",
      clsUserColorButton: "",
      clsUserColors: "",
      clsUserColorsTitle: "",
      clsUserColor: "",
      onSelectColor: Metro2.noop,
      onColorSelectorCreate: Metro2.noop
    };
    Metro2.colorSelectorSetup = function(options) {
      ColorSelectorDefaultConfig = $3.extend({}, ColorSelectorDefaultConfig, options);
    };
    if (typeof globalThis["metroColorSelectorSetup"] !== void 0) {
      Metro2.colorSelectorSetup(globalThis["metroColorSelectorSetup"]);
    }
    Metro2.Component("color-selector", {
      init: function(options, elem) {
        this._super(elem, options, ColorSelectorDefaultConfig, {
          // define instance vars here
          id: Metro2.utils.elementId("color-selector"),
          defaultSwatches: [],
          showValues: [],
          userColors: [],
          showAsString: [],
          hue: 0,
          saturation: 0,
          lightness: 1,
          alpha: 1,
          hsl: null,
          hsla: null,
          hsv: null,
          rgb: null,
          rgba: null,
          cmyk: null,
          hex: null,
          inputInterval: null,
          controller: null
        });
        return this;
      },
      _create: function() {
        const o2 = this.options;
        if (Metro2.utils.isValue(o2.defaultSwatches))
          this.defaultSwatches = o2.defaultSwatches.toArray(",").map(function(el) {
            return el.toUpperCase();
          });
        if (Metro2.utils.isValue(o2.showValues)) this.showValues = o2.showValues.toArray(",");
        if (Metro2.utils.isValue(o2.userColors))
          this.userColors = o2.userColors.toArray(",").map(function(el) {
            return el.toUpperCase();
          });
        if (Metro2.utils.isValue(o2.showAsString)) this.showAsString = o2.showAsString.toArray(",");
        this._createStructure();
        this._createEvents();
        this._setColorValues();
        this._fireEvent("color-selector-create");
      },
      _createStructure: function() {
        const that = this, element2 = this.element, o2 = this.options, strings = this.strings;
        let colorBox, row, swatches, map2, value, inputs, radios, userColorsActions, hueCanvas, shadeCanvas, hueCursor, shadeCursor, colorBlock, alphaCanvas, alphaCursor;
        element2.addClass("color-selector").addClass(o2.clsSelector);
        element2.append(colorBox = $3("<div>").addClass("color-box"));
        colorBox.append(row = $3("<div>").addClass("row"));
        row.append(swatches = $3("<div>").addClass("default-swatches").addClass(o2.clsSwatches));
        $3.each(this.defaultSwatches, function() {
          swatches.append(
            $3("<button>").attr("data-color", this).attr("type", "button").addClass("swatch").addClass(o2.clsSwatch).css("background-color", this)
          );
        });
        colorBox.append(row = $3("<div>").addClass("row"));
        row.append(map2 = $3("<div>").addClass("color-map"));
        map2.append(shadeCursor = $3("<button>").attr("type", "button").addClass("cursor color-cursor dragging"));
        map2.append(shadeCanvas = $3("<canvas>").addClass("color-canvas"));
        row.append(map2 = $3("<div>").addClass("hue-map"));
        map2.append(hueCursor = $3("<button>").attr("type", "button").addClass("cursor hue-cursor dragging"));
        map2.append(hueCanvas = $3("<canvas>").addClass("hue-canvas"));
        row.append(map2 = $3("<div>").addClass("alpha-map"));
        map2.append(alphaCursor = $3("<button>").attr("type", "button").addClass("cursor alpha-cursor dragging"));
        map2.append(alphaCanvas = $3("<canvas>").addClass("alpha-canvas"));
        colorBox.append(row = $3("<div>").addClass("row color-values-block"));
        row.append(value = $3("<div>").addClass("color-value-hex"));
        value.append($3("<input type='radio' name='returnType' value='hex' checked>").addClass("check-color-value-hex"));
        value.append(colorBlock = $3("<div>").addClass("color-block as-string color-hex"));
        colorBlock.append($3("<input type='text' data-prepend='HEX:'>").addClass("input-small value-hex"));
        row.append(value = $3("<div>").addClass("color-value-rgb"));
        value.append($3("<input type='radio' name='returnType' value='rgb'>").addClass("check-color-value-rgb"));
        value.append(colorBlock = $3("<div>").addClass("color-block color-rgb"));
        colorBlock.append($3("<input type='text' data-prepend='R:'>").addClass("input-small value-r"));
        colorBlock.append($3("<input type='text' data-prepend='G:'>").addClass("input-small value-g"));
        colorBlock.append($3("<input type='text' data-prepend='B:'>").addClass("input-small value-b"));
        value.append(colorBlock = $3("<div>").addClass("color-block as-string color-rgb"));
        colorBlock.append($3("<input type='text' data-prepend='RGB:'>").addClass("input-small value-rgb"));
        if (this.showAsString.indexOf("rgb") > -1) {
          value.find(".value-r,.value-g,.value-b").parent().hide();
        } else {
          value.find(".value-rgb").parent().hide();
        }
        row.append(value = $3("<div>").addClass("color-value-rgba"));
        value.append($3("<input type='radio' name='returnType' value='rgba'>").addClass("check-color-value-rgba"));
        value.append(colorBlock = $3("<div>").addClass("color-block color-rgba"));
        colorBlock.append($3("<input type='text' data-prepend='R:'>").addClass("input-small value-r"));
        colorBlock.append($3("<input type='text' data-prepend='G:'>").addClass("input-small value-g"));
        colorBlock.append($3("<input type='text' data-prepend='B:'>").addClass("input-small value-b"));
        colorBlock.append($3("<input type='text' data-prepend='A:'>").addClass("input-small value-a"));
        value.append(colorBlock = $3("<div>").addClass("color-block as-string color-rgba"));
        colorBlock.append($3("<input type='text' data-prepend='RGBA:'>").addClass("input-small value-rgba"));
        if (this.showAsString.indexOf("rgba") > -1) {
          value.find(".value-r,.value-g,.value-b,.value-a").parent().hide();
        } else {
          value.find(".value-rgba").parent().hide();
        }
        row.append(value = $3("<div>").addClass("color-value-hsl"));
        value.append($3("<input type='radio' name='returnType' value='hsl'>").addClass("check-color-value-hsl"));
        value.append(colorBlock = $3("<div>").addClass("color-block color-hsl"));
        colorBlock.append($3("<input type='text' data-prepend='H:'>").addClass("input-small value-h"));
        colorBlock.append($3("<input type='text' data-prepend='S:'>").addClass("input-small value-s"));
        colorBlock.append($3("<input type='text' data-prepend='L:'>").addClass("input-small value-l"));
        value.append(colorBlock = $3("<div>").addClass("color-block as-string color-hsl"));
        colorBlock.append($3("<input type='text' data-prepend='HSL:'>").addClass("input-small value-hsl"));
        if (this.showAsString.indexOf("hsl") > -1) {
          value.find(".value-h,.value-s,.value-l").parent().hide();
        } else {
          value.find(".value-hsl").parent().hide();
        }
        row.append(value = $3("<div>").addClass("color-value-hsla"));
        value.append($3("<input type='radio' name='returnType' value='hsla'>").addClass("check-color-value-hsla"));
        value.append(colorBlock = $3("<div>").addClass("color-block color-hsla"));
        colorBlock.append($3("<input type='text' data-prepend='H:'>").addClass("input-small value-h"));
        colorBlock.append($3("<input type='text' data-prepend='S:'>").addClass("input-small value-s"));
        colorBlock.append($3("<input type='text' data-prepend='L:'>").addClass("input-small value-l"));
        colorBlock.append($3("<input type='text' data-prepend='A:'>").addClass("input-small value-a"));
        value.append(colorBlock = $3("<div>").addClass("color-block as-string color-hsla"));
        colorBlock.append($3("<input type='text' data-prepend='HSLA:'>").addClass("input-small value-hsla"));
        if (this.showAsString.indexOf("hsla") > -1) {
          value.find(".value-h,.value-s,.value-l,.value-a").parent().hide();
        } else {
          value.find(".value-hsla").parent().hide();
        }
        row.append(value = $3("<div>").addClass("color-value-hsv"));
        value.append($3("<input type='radio' name='returnType' value='hsv'>").addClass("check-color-value-hsl"));
        value.append(colorBlock = $3("<div>").addClass("color-block color-hsv"));
        colorBlock.append($3("<input type='text' data-prepend='H:'>").addClass("input-small value-h"));
        colorBlock.append($3("<input type='text' data-prepend='S:'>").addClass("input-small value-s"));
        colorBlock.append($3("<input type='text' data-prepend='V:'>").addClass("input-small value-v"));
        value.append(colorBlock = $3("<div>").addClass("color-block as-string color-hsv"));
        colorBlock.append($3("<input type='text' data-prepend='HSV:'>").addClass("input-small value-hsv"));
        if (this.showAsString.indexOf("hsv") > -1) {
          value.find(".value-h,.value-s,.value-v").parent().hide();
        } else {
          value.find(".value-hsv").parent().hide();
        }
        row.append(value = $3("<div>").addClass("color-value-cmyk"));
        value.append($3("<input type='radio' name='returnType' value='cmyk'>").addClass("check-color-value-cmyk"));
        value.append(colorBlock = $3("<div>").addClass("color-block color-cmyk"));
        colorBlock.append($3("<input type='text' data-prepend='C:'>").addClass("input-small value-c"));
        colorBlock.append($3("<input type='text' data-prepend='M:'>").addClass("input-small value-m"));
        colorBlock.append($3("<input type='text' data-prepend='Y:'>").addClass("input-small value-y"));
        colorBlock.append($3("<input type='text' data-prepend='K:'>").addClass("input-small value-k"));
        value.append(colorBlock = $3("<div>").addClass("color-block as-string color-cmyk"));
        colorBlock.append($3("<input type='text' data-prepend='CMYK:'>").addClass("input-small value-cmyk"));
        if (this.showAsString.indexOf("cmyk") > -1) {
          value.find(".value-s,.value-m,.value-y,.value-k").parent().hide();
        } else {
          value.find(".value-cmyk").parent().hide();
        }
        colorBox.append(row = $3("<div>").addClass("row user-colors-css-container"));
        row.append(
          $3("<div>").addClass("user-colors-title").addClass(o2.clsUserColorsTitle).html(o2.userColorsTitle || strings["label_user_colors"])
        );
        row.append($3("<div>").addClass("user-colors").addClass(o2.clsUserColors));
        row.append(userColorsActions = $3("<div>").addClass("user-colors-actions"));
        userColorsActions.append(
          $3("<button>").addClass("button add-button").addClass(o2.clsUserColorButton).html("<span class='user-swatch'></span><span>" + (o2.addUserColorTitle || strings["label_add_user_color"]) + "</span>")
        );
        inputs = colorBox.find("input[type=text]");
        Metro2.makePlugin(inputs, "input", {
          clearButton: false,
          clsPrepend: o2.clsLabel,
          clsComponent: o2.clsInput
        });
        inputs.addClass(o2.clsValue);
        if (o2.readonlyInput) {
          inputs.attr("readonly", true);
        }
        radios = colorBox.find("input[type=radio]").each(function() {
          $3(this).attr("name", that.id + "-returnType");
        });
        radios.each(function() {
          if ($3(this).val() === o2.returnValueType) {
            this.checked = true;
          }
        });
        Metro2.makePlugin(radios, "radio");
        $3.each(supportedColorTypes.toArray(","), function() {
          if (that.showValues.indexOf(this) === -1) element2.find(".color-value-" + this).hide();
        });
        if (!o2.showUserColors) {
          element2.find(".user-colors-css-container").hide();
        }
        if (!o2.showAlphaChannel) {
          element2.addClass("no-alpha-channel");
          $3.each(["rgba", "hsla"], function() {
            element2.find(".color-value-" + this).hide();
          });
        }
        this._fillUserColors();
        this.hueCanvas = hueCanvas;
        this.hueCursor = hueCursor;
        this.shadeCanvas = shadeCanvas;
        this.shadeCursor = shadeCursor;
        this.alphaCanvas = alphaCanvas;
        this.alphaCursor = alphaCursor;
        this._createShadeCanvas();
        this._createHueCanvas();
        this._createAlphaCanvas();
        this._setColorValues();
        this._updateCursorsColor();
        if (o2.initColor && Farbe.Routines.isColor(o2.initColor)) {
          this._colorToPos(typeof o2.initColor === "string" ? Farbe.Routines.parse(o2.initColor) : o2.initColor);
        }
        this.controller = o2.controller ? $3(o2.controller) : null;
      },
      _createShadeCanvas: function(color) {
        const canvas2 = this.shadeCanvas[0];
        const ctx = canvas2.getContext("2d");
        ctx.clearRect(0, 0, canvas2.width, canvas2.height);
        if (!color) color = "#f00";
        ctx.clearRect(0, 0, canvas2.width, canvas2.height);
        ctx.fillStyle = color;
        ctx.fillRect(0, 0, canvas2.width, canvas2.height);
        const whiteGradient = ctx.createLinearGradient(0, 0, canvas2.width, 0);
        whiteGradient.addColorStop(0, "#fff");
        whiteGradient.addColorStop(1, "transparent");
        ctx.fillStyle = whiteGradient;
        ctx.fillRect(0, 0, canvas2.width, canvas2.height);
        const blackGradient = ctx.createLinearGradient(0, 0, 0, canvas2.height);
        blackGradient.addColorStop(0, "transparent");
        blackGradient.addColorStop(1, "#000");
        ctx.fillStyle = blackGradient;
        ctx.fillRect(0, 0, canvas2.width, canvas2.height);
      },
      _createHueCanvas: function() {
        const canvas2 = this.hueCanvas[0];
        const ctx = canvas2.getContext("2d");
        const hueGradient = ctx.createLinearGradient(0, 0, 0, canvas2.height);
        hueGradient.addColorStop(0, "hsl(0,100%,50%)");
        hueGradient.addColorStop(0.17, "hsl(298.8, 100%, 50%)");
        hueGradient.addColorStop(0.33, "hsl(241.2, 100%, 50%)");
        hueGradient.addColorStop(0.5, "hsl(180, 100%, 50%)");
        hueGradient.addColorStop(0.67, "hsl(118.8, 100%, 50%)");
        hueGradient.addColorStop(0.83, "hsl(61.2,100%,50%)");
        hueGradient.addColorStop(1, "hsl(360,100%,50%)");
        ctx.clearRect(0, 0, canvas2.width, canvas2.height);
        ctx.fillStyle = hueGradient;
        ctx.fillRect(0, 0, canvas2.width, canvas2.height);
      },
      _createAlphaCanvas: function() {
        const canvas2 = this.alphaCanvas[0];
        const ctx = canvas2.getContext("2d");
        const alphaGradient = ctx.createLinearGradient(0, 0, 0, canvas2.height);
        const startColor = new Farbe.Primitives.HSLA(this.hue, 1, 0.5, 1).toString(), endColor = "rgba(0,0,0,0)";
        alphaGradient.addColorStop(0, startColor);
        alphaGradient.addColorStop(1, endColor);
        ctx.clearRect(0, 0, canvas2.width, canvas2.height);
        ctx.fillStyle = alphaGradient;
        ctx.fillRect(0, 0, canvas2.width, canvas2.height);
      },
      _updateHueCursor: function(y2) {
        this.hueCursor.css({
          top: y2
        });
      },
      _updateAlphaCursor: function(y2) {
        this.alphaCursor.css({
          top: y2
        });
      },
      _getHueColor: function(pageY) {
        const canvas2 = this.hueCanvas;
        const offset = canvas2.offset();
        const height = canvas2.height();
        let y2, percent, color, hue;
        y2 = pageY - offset.top;
        if (y2 > height) y2 = height;
        if (y2 < 0) y2 = 0;
        percent = y2 / height;
        hue = 360 - 360 * percent;
        if (hue === 360) hue = 0;
        color = "hsl(" + hue + ", 100%, 50%)";
        this.hue = hue;
        this._createShadeCanvas(color);
        this._createAlphaCanvas();
        this._updateHueCursor(y2);
        this._updateCursorsColor();
        this._setColorValues();
      },
      _getAlphaValue: function(pageY) {
        const canvas2 = this.alphaCanvas;
        const offset = canvas2.offset();
        const height = canvas2.height();
        let y2, percent;
        y2 = pageY - offset.top;
        if (y2 > height) y2 = height;
        if (y2 < 0) y2 = 0;
        percent = 1 - y2 / height;
        this.alpha = percent.toFixed(2);
        this._updateAlphaCursor(y2);
        this._updateCursorsColor();
        this._setColorValues();
      },
      _getShadeColor: function(pageX, pageY) {
        const canvas2 = this.shadeCanvas;
        const offset = canvas2.offset();
        const width = canvas2.width();
        const height = canvas2.height();
        let x2 = pageX - offset.left;
        let y2 = pageY - offset.top;
        if (x2 > width) x2 = width;
        if (x2 < 0) x2 = 0;
        if (y2 > height) y2 = height;
        if (y2 < 0) y2 = 0.1;
        const xRatio = x2 / width * 100;
        const yRatio = y2 / height * 100;
        const hsvValue = 1 - yRatio / 100;
        const hsvSaturation = xRatio / 100;
        let lightness = hsvValue / 2 * (2 - hsvSaturation);
        let saturation = hsvValue * hsvSaturation / (1 - Math.abs(2 * lightness - 1));
        if (isNaN(lightness)) {
          lightness = 0;
        }
        if (isNaN(saturation)) {
          saturation = 0;
        }
        this.lightness = lightness;
        this.saturation = saturation;
        this._updateShadeCursor(x2, y2);
        this._updateCursorsColor();
        this._setColorValues();
      },
      _updateCursorsColor: function() {
        this.shadeCursor.css({
          backgroundColor: Farbe.Routines.toHEX(new Farbe.Primitives.HSL(this.hue, this.saturation, this.lightness))
        });
        this.hueCursor.css({
          backgroundColor: Farbe.Routines.toHEX(new Farbe.Primitives.HSL(this.hue, 1, 0.5))
        });
        this.alphaCursor.css({
          backgroundColor: Farbe.Routines.toRGBA(new Farbe.Primitives.HSL(this.hue, 1, 0.5), this.alpha).toString()
        });
      },
      _updateShadeCursor: function(x2, y2) {
        this.shadeCursor.css({
          top: y2,
          left: x2
        });
      },
      _colorToPos: function(color) {
        const shadeCanvasRect = this.shadeCanvas[0].getBoundingClientRect();
        const hueCanvasRect = this.hueCanvas[0].getBoundingClientRect();
        const alphaCanvasRect = this.alphaCanvas[0].getBoundingClientRect();
        const hsl = Farbe.Routines.toHSL(color);
        const hsla = Farbe.Routines.toHSLA(color);
        const hsv = Farbe.Routines.toHSV(color);
        const x2 = shadeCanvasRect.width * hsv.s;
        const y2 = shadeCanvasRect.height * (1 - hsv.v);
        const hueY = hueCanvasRect.height - hsl.h / 360 * hueCanvasRect.height;
        const alphaY = (1 - hsla.a) * alphaCanvasRect.height;
        this.hue = hsl.h;
        this.saturation = hsl.s;
        this.lightness = hsl.l;
        this.alpha = hsla.a;
        this._updateHueCursor(hueY);
        this._updateShadeCursor(x2, y2);
        this._updateAlphaCursor(alphaY);
        this._updateCursorsColor();
        this._createShadeCanvas("hsl(" + this.hue + ", 100%, 50%)");
        this._createAlphaCanvas();
        this._setColorValues();
      },
      _setColorValues: function() {
        const element2 = this.element, o2 = this.options;
        const hsl = new Farbe.Primitives.HSL(this.hue, this.saturation, this.lightness);
        const hsla = new Farbe.Primitives.HSLA(this.hue, this.saturation, this.lightness, this.alpha);
        const rgb = Farbe.Routines.toRGB(hsl);
        const rgba = Farbe.Routines.toRGBA(rgb, this.alpha);
        const hsv = Farbe.Routines.toHSV(hsl);
        const cmyk = Farbe.Routines.toCMYK(hsl);
        const hex = Farbe.Routines.toHEX(hsl);
        const controller = this.controller;
        const percent = o2.hslMode === "percent";
        this.hsl = hsl;
        this.hsla = hsla;
        this.hsv = hsv;
        this.rgb = rgb;
        this.rgba = rgba;
        this.hex = hex;
        this.cmyk = cmyk;
        element2.find(".color-value-hex .value-hex input").val(hex);
        element2.find(".color-value-rgb .value-r input").val(rgb.r);
        element2.find(".color-value-rgb .value-g input").val(rgb.g);
        element2.find(".color-value-rgb .value-b input").val(rgb.b);
        element2.find(".color-value-rgb .value-rgb input").val(rgb.toString());
        element2.find(".color-value-rgba .value-r input").val(rgba.r);
        element2.find(".color-value-rgba .value-g input").val(rgba.g);
        element2.find(".color-value-rgba .value-b input").val(rgba.b);
        element2.find(".color-value-rgba .value-a input").val(rgba.a);
        element2.find(".color-value-rgba .value-rgba input").val(rgba.toString());
        element2.find(".color-value-hsl .value-h input").val(hsl.h.toFixed(0));
        element2.find(".color-value-hsl .value-s input").val(percent ? Math.round(hsl.s * 100) + "%" : hsl.s.toFixed(4));
        element2.find(".color-value-hsl .value-l input").val(percent ? Math.round(hsl.l * 100) + "%" : hsl.l.toFixed(4));
        element2.find(".color-value-hsl .value-hsl input").val(hsl.toString());
        element2.find(".color-value-hsla .value-h input").val(hsla.h.toFixed(0));
        element2.find(".color-value-hsla .value-s input").val(percent ? Math.round(hsla.s * 100) + "%" : hsl.s.toFixed(4));
        element2.find(".color-value-hsla .value-l input").val(percent ? Math.round(hsla.l * 100) + "%" : hsl.l.toFixed(4));
        element2.find(".color-value-hsla .value-a input").val(hsla.a);
        element2.find(".color-value-hsla .value-hsla input").val(hsla.toString());
        element2.find(".color-value-hsv .value-h input").val(hsv.h.toFixed(0));
        element2.find(".color-value-hsv .value-s input").val(percent ? Math.round(hsv.s * 100) + "%" : hsv.s.toFixed(4));
        element2.find(".color-value-hsv .value-v input").val(percent ? Math.round(hsv.v * 100) + "%" : hsv.v.toFixed(4));
        element2.find(".color-value-hsv .value-hsv input").val(hsv.toString());
        element2.find(".color-value-cmyk .value-c input").val(cmyk.c.toFixed(0));
        element2.find(".color-value-cmyk .value-m input").val(cmyk.m.toFixed(0));
        element2.find(".color-value-cmyk .value-y input").val(cmyk.y.toFixed(0));
        element2.find(".color-value-cmyk .value-k input").val(cmyk.k.toFixed(0));
        element2.find(".color-value-cmyk .value-cmyk input").val(cmyk.toString());
        element2.find(".user-colors-actions .user-swatch").css({
          backgroundColor: hex
        });
        const value = this.getVal();
        if (controller && controller.length) {
          controller.val(value);
        }
        this._fireEvent("select-color", {
          color: value,
          primitive: {
            hsl: this.hsl,
            hsla: this.hsla,
            rgb: this.rgb,
            rgba: this.rgba,
            hsv: this.hsv,
            cmyk: this.cmyk,
            hex: this.hex
          }
        });
      },
      _clearInputInterval: function() {
        clearInterval(this.inputInterval);
        this.inputInterval = false;
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const hueMap = element2.find(".hue-map");
        const alphaMap = element2.find(".alpha-map");
        const shadeMap = element2.find(".color-map");
        const controller = this.controller;
        const colorValues = element2.find(".color-values-block input[type=text]");
        let onColorValuesChange = (e) => {
          const input2 = $3(e.target);
          const colorGroup = input2.closest(".color-block");
          let colorType2, color, parts;
          if (colorGroup.hasClass("color-hex")) {
            colorType2 = "hex";
          } else if (colorGroup.hasClass("color-rgb")) {
            colorType2 = "rgb";
          } else if (colorGroup.hasClass("color-rgba")) {
            colorType2 = "rgba";
          } else if (colorGroup.hasClass("color-hsl")) {
            colorType2 = "hsl";
          } else if (colorGroup.hasClass("color-hsla")) {
            colorType2 = "hsla";
          } else if (colorGroup.hasClass("color-hsv")) {
            colorType2 = "hsv";
          } else if (colorGroup.hasClass("color-cmyk")) {
            colorType2 = "cmyk";
          }
          if (colorGroup.hasClass("as-string")) {
            color = input2.val();
          } else {
            parts = [];
            $3.each(colorGroup.find("input"), function() {
              parts.push(this.value);
            });
            color = colorType2 + "(" + parts.join(", ") + ")";
          }
          if (color && Farbe.Routines.isColor(color)) {
            that.val(color);
          }
        };
        onColorValuesChange = Hooks.useDebounce(onColorValuesChange, o2.inputThreshold);
        colorValues.on(Metro2.events.inputchange, onColorValuesChange);
        if (controller && controller.length) {
          let onControllerChange = Hooks.useDebounce(() => {
            const val = controller.val();
            if (val && Farbe.Routines.isColor(val)) {
              that.val(val);
            }
          }, o2.inputThreshold);
          controller.on(Metro2.events.inputchange, onControllerChange);
        }
        alphaMap.on(
          Metro2.events.startAll,
          function(e) {
            if (["hsla", "rgba"].includes(o2.returnValueType) === false) {
            }
            that._getAlphaValue(Metro2.utils.pageXY(e).y);
            $3(document).on(
              Metro2.events.moveAll,
              function(e2) {
                e2.preventDefault();
                that._getAlphaValue(Metro2.utils.pageXY(e2).y);
              },
              { ns: that.id }
            );
            $3(document).on(
              Metro2.events.stopAll,
              function() {
                $3(document).off(Metro2.events.moveAll, {
                  ns: that.id
                });
                $3(document).off(Metro2.events.stopAll, {
                  ns: that.id
                });
              },
              { ns: that.id }
            );
          },
          { passive: true }
        );
        hueMap.on(
          Metro2.events.startAll,
          function(e) {
            that._getHueColor(Metro2.utils.pageXY(e).y);
            $3(document).on(
              Metro2.events.moveAll,
              function(e2) {
                e2.preventDefault();
                that._getHueColor(Metro2.utils.pageXY(e2).y);
              },
              { ns: that.id, passive: false }
            );
            $3(document).on(
              Metro2.events.stopAll,
              function() {
                $3(document).off(Metro2.events.moveAll, {
                  ns: that.id
                });
                $3(document).off(Metro2.events.stopAll, {
                  ns: that.id
                });
              },
              { ns: that.id }
            );
          },
          { passive: true }
        );
        shadeMap.on(
          Metro2.events.startAll,
          function(e) {
            that._getShadeColor(Metro2.utils.pageXY(e).x, Metro2.utils.pageXY(e).y);
            $3(document).on(
              Metro2.events.moveAll,
              function(e2) {
                e2.preventDefault();
                that._getShadeColor(Metro2.utils.pageXY(e2).x, Metro2.utils.pageXY(e2).y);
              },
              { ns: that.id, passive: false }
            );
            $3(document).on(
              Metro2.events.stopAll,
              function() {
                $3(document).off(Metro2.events.moveAll, {
                  ns: that.id
                });
                $3(document).off(Metro2.events.stopAll, {
                  ns: that.id
                });
              },
              { ns: that.id }
            );
          },
          { passive: true }
        );
        element2.on("click", ".swatch", function() {
          that._colorToPos($3(this).attr("data-color"));
        });
        element2.on("click", ".add-button", function() {
          const color = Farbe.Routines.toHEX(new Farbe.Primitives.HSL(that.hue, that.saturation, that.lightness)).toUpperCase();
          if (that.userColors.includes(color)) {
            return;
          }
          that.userColors.push(color);
          element2.find(".user-colors").append(
            $3("<button>").attr("data-color", color).attr("type", "button").addClass("swatch user-swatch").css({
              backgroundColor: color
            })
          );
        });
        element2.find("input[type=radio]").on("click", function() {
          o2.returnValueType = $3(this).val();
          that._setColorValues();
        });
      },
      getVal: function() {
        const o2 = this.options;
        let res;
        switch (o2.returnValueType.toLowerCase()) {
          case "rgb":
            res = this.rgb;
            break;
          case "rgba":
            res = this.rgba;
            break;
          case "hsl":
            res = this.hsl;
            break;
          case "hsla":
            res = this.hsla;
            break;
          case "hsv":
            res = this.hsv;
            break;
          case "cmyk":
            res = this.cmyk;
            break;
          default:
            res = this.hex;
        }
        return o2.returnAsString ? res.toString() : res;
      },
      val: function(v2) {
        if (typeof v2 === "undefined") {
          return this.getVal();
        }
        const color = Farbe.Routines.parse(v2);
        this._colorToPos(color);
      },
      user: function(v2) {
        if (!Metro2.utils.isValue(v2)) {
          return this.userColors;
        }
        if (!Array.isArray(v2) && typeof v2 !== "string") {
          return;
        }
        if (typeof v2 === "string") {
          this.userColors = v2.toArray(",").map(function(el) {
            return el.toUpperCase();
          });
        } else {
          this.userColors = v2.map(function(el) {
            return el.toUpperCase();
          });
        }
        this._fillUserColors();
      },
      _fillUserColors: function() {
        const colors = this.element.find(".user-colors-css").clear();
        $3.each(this.userColors, function() {
          const color = this;
          colors.append(
            $3("<button>").attr("data-color", color).attr("type", "button").addClass("swatch user-swatch").css({
              backgroundColor: color
            })
          );
        });
      },
      changeAttribute: function(attr, newValue) {
        const o2 = this.options;
        if (attr === "data-return-value-type") {
          o2.returnValueType = newValue;
        }
        if (attr === "data-return-as-string") {
          o2.returnValueType = Metro2.utils.bool(newValue);
        }
      },
      destroy: function() {
        this.element.remove();
      }
    });
    Metro2.defaults.ColorSelector = ColorSelectorDefaultConfig;
  })(Metro, Dom);

  // source/components/color-picker/color-picker.js
  (function(Metro2, $3) {
    "use strict";
    let ColorPickerDefaultConfig = {
      defaultSwatches: "#FFFFFF,#000000,#FFFB0D,#0532FF,#FF9300,#00F91A,#FF2700,#686868,#EE5464,#D27AEE,#5BA8C4,#E64AA9,#1ba1e2,#6a00ff,#bebebe,#f8f8f8",
      duration: 100,
      prepend: "",
      append: "",
      clearButton: false,
      clearButtonIcon: "&#x274c;",
      pickerButtonIcon: "&#127912;",
      defaultValue: "rgba(0, 0, 0, 0)",
      openMode: "auto",
      resultType: "hex",
      inputThreshold: 500,
      onColorSelected: Metro2.noop,
      onColorPickerCreate: Metro2.noop
    };
    Metro2.colorPickerSetup = function(options) {
      ColorPickerDefaultConfig = $3.extend({}, ColorPickerDefaultConfig, options);
    };
    if (typeof globalThis["metroColorPickerSetup"] !== void 0) {
      Metro2.colorPickerSetup(globalThis["metroColorPickerSetup"]);
    }
    Metro2.Component("color-picker", {
      init: function(options, elem) {
        this._super(
          elem,
          options,
          $3.extend(
            {},
            Metro2.defaults.ColorSelector,
            {
              showUserColors: false,
              showValues: ""
            },
            ColorPickerDefaultConfig
          ),
          {
            value: null,
            picker: null,
            colorSelector: null,
            colorSelectorBox: null,
            colorExample: null,
            inputInterval: null,
            isOpen: false
          }
        );
        return this;
      },
      _create: function() {
        const element2 = this.element, o2 = this.options;
        const current = element2.val();
        if (!Metro2.pluginExists("color-selector")) {
          throw new Error("Color selector component required!");
        }
        this.value = Farbe.Routines.isColor(current) ? current : Farbe.Routines.isColor(o2.defaultValue) ? o2.defaultValue : "rgba(0,0,0,0)";
        this._createStructure();
        this._createEvents();
        this._fireEvent("color-picker-create");
      },
      _createStructure: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const picker = element2.wrap($3("<div>").addClass("color-picker").addClass(element2[0].className));
        let buttons, colorExample, colorSelector, colorSelectorBox;
        colorExample = $3("<div>").addClass("color-example-box").insertBefore(element2);
        buttons = $3("<div>").addClass("buttons").appendTo(picker);
        buttons.append(
          $3("<button>").addClass("button color-picker-button").addClass(o2.clsPickerButton).attr("tabindex", -1).attr("type", "button").html(o2.pickerButtonIcon)
        );
        if (o2.clearButton === true && !element2[0].readOnly) {
          buttons.append(
            $3("<button>").addClass("button input-clear-button").addClass(o2.clsClearButton).attr("tabindex", -1).attr("type", "button").html(o2.clearButtonIcon)
          );
        }
        if (Metro2.utils.isValue(o2.prepend)) {
          picker.prepend($3("<div>").addClass("prepend").addClass(o2.clsPrepend).html(o2.prepend));
        }
        if (Metro2.utils.isValue(o2.append)) {
          picker.append($3("<div>").html(o2.append).addClass("append").addClass(o2.clsAppend));
        }
        colorSelectorBox = $3("<div>").addClass("color-selector-box").appendTo(picker);
        colorSelector = $3("<div>").appendTo(colorSelectorBox);
        this.picker = picker;
        this.colorExample = colorExample;
        this.colorSelector = colorSelector;
        this.colorSelectorBox = colorSelectorBox;
        Metro2.makePlugin(colorSelector, "color-selector", {
          defaultSwatches: o2.defaultSwatches,
          returnValueType: o2.resultType,
          returnAsString: true,
          showUserColors: false,
          showValues: "",
          controller: element2,
          showAlphaChannel: true,
          inputThreshold: o2.inputThreshold,
          initColor: this.value,
          readonlyInput: o2.readonlyInput,
          onSelectColor: (color) => {
            this.colorExample.css({
              backgroundColor: color
            });
          },
          onColorSelectorCreate: o2.onColorSelectorCreate
        });
        Metro2.makePlugin(colorSelectorBox, "dropdown", {
          dropFilter: ".color-picker",
          duration: o2.duration,
          toggleElement: [picker],
          checkDropUp: true,
          onDrop: function() {
            Metro2.getPlugin(colorSelector, "color-selector").val(that.value);
          }
        });
        element2[0].className = "";
        this._setColor();
      },
      _clearInputInterval: function() {
        clearInterval(this.inputInterval);
        this.inputInterval = false;
      },
      _setColor: function() {
        const colorExample = this.colorExample;
        let color = this.value;
        if (this.value.indexOf("cmyk") !== -1 || this.value.indexOf("hsv") !== -1) {
          color = Farbe.Routines.toHEX(this.value);
        }
        console.log(color);
        colorExample.css({
          backgroundColor: color
        });
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const picker = this.picker, colorSelector = this.colorSelector, colorSelectorBox = this.colorSelector;
        picker.on(Metro2.events.click, ".input-clear-button", function(e) {
          e.preventDefault();
          e.stopPropagation();
          element2.val(o2.defaultValue).trigger("change");
          Metro2.getPlugin(colorSelector, "color-selector").val(o2.defaultValue);
        });
        element2.on(Metro2.events.inputchange, function() {
          that.value = this.value;
          that._setColor();
        });
        colorSelectorBox.on(Metro2.events.click, function(e) {
          e.stopPropagation();
        });
      },
      val: function(v2) {
        if (arguments.length === 0 || !Metro2.utils.isValue(v2)) {
          return this.value;
        }
        if (!Farbe.Routines.isColor(v2)) {
          return;
        }
        this.value = v2;
        this.element.val(v2).trigger("change");
        this._setColor();
      },
      // changeAttribute: function(attr, newValue){
      // },
      destroy: function() {
        this.element.remove();
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3(".color-picker").removeClass("open");
    });
  })(Metro, Dom);

  // source/components/cookie/cookie.js
  (function(Metro2, $3) {
    "use strict";
    var CookieDefaultConfig = {
      path: "/",
      expires: null,
      maxAge: null,
      domain: null,
      secure: false,
      samesite: null
    };
    Metro2.cookieSetup = function(options) {
      CookieDefaultConfig = $3.extend({}, CookieDefaultConfig, options);
    };
    if (typeof globalThis["metroCookieSetup"] !== void 0) {
      Metro2.cookieSetup(globalThis["metroCookieSetup"]);
    }
    Metro2.cookie = {
      getCookies: function() {
        var a2 = document.cookie.toArray(";");
        var o2 = {};
        $3.each(a2, function() {
          var i3 = this.split("=");
          o2[i3[0]] = i3[1];
        });
        return o2;
      },
      getCookie: function(name2) {
        var cookieName = encodeURIComponent(name2) + "=";
        var cookies = document.cookie.toArray(";");
        var i3, cookie;
        for (i3 = 0; i3 < cookies.length; i3++) {
          cookie = cookies[i3];
          while (cookie.charAt(0) === " ") {
            cookie = cookie.substring(1, cookie.length);
          }
          if (cookie.indexOf(cookieName) === 0) {
            return decodeURIComponent(cookie.substring(cookieName.length, cookie.length));
          }
        }
        return null;
      },
      setCookie: function(name2, value, options) {
        var date;
        var cookieName = encodeURIComponent(name2);
        var cookieValue = encodeURIComponent(value);
        var opt2, a2 = [];
        if (options && typeof options !== "object") {
          date = /* @__PURE__ */ new Date();
          date.setTime(date.getTime() + parseInt(options));
          opt2 = $3.extend({}, CookieDefaultConfig, {
            expires: date.toUTCString()
          });
        } else {
          opt2 = $3.extend({}, CookieDefaultConfig, options);
        }
        $3.each(opt2, function(key, val) {
          if (key !== "secure" && val) {
            a2.push(Str.dashedName(key) + "=" + val);
          }
          if (key === "secure" && val === true) {
            a2.push("secure");
          }
        });
        document.cookie = cookieName + "=" + cookieValue + "; " + a2.join("; ");
      },
      delCookie: function(name2) {
        this.setCookie(name2, false, {
          maxAge: -1
        });
      }
    };
  })(Metro, Dom);

  // source/components/cookie-disclaimer/cookie-disclaimer.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var cookieDisclaimerDefaults = {
      name: "cookies_accepted",
      templateUrl: null,
      title: "",
      message: "",
      duration: "30days",
      clsContainer: "",
      clsMessage: "",
      clsButtons: "",
      clsAcceptButton: "",
      clsCancelButton: "",
      onAccept: Metro2.noop,
      onDecline: Metro2.noop
    };
    Metro2.cookieDisclaimer = {
      init: function(options) {
        var that = this, cookie = Metro2.cookie;
        this.options = $3.extend({}, cookieDisclaimerDefaults, options);
        this.disclaimer = $3("<div>");
        if (cookie.getCookie(this.options.name)) {
          return;
        }
        this.locale = $3("html").attr("lang") || "en";
        this.strings = $3.extend({}, Metro2.locales["en"], Metro2.locales[this.locale]);
        if (this.options.templateUrl) {
          fetch(this.options.templateUrl).then(Metro2.fetch.text).then(function(data2) {
            that.create(data2);
          });
        } else {
          this.create();
        }
      },
      create: function(html2) {
        var cookie = Metro2.cookie;
        var o2 = this.options, wrapper = this.disclaimer, buttons;
        wrapper.addClass("cookie-disclaimer").addClass(o2.clsContainer);
        if (!html2) {
          wrapper.html(
            $3("<div class='disclaimer-message'>").addClass(o2.clsMessage).html(`
                                <div class="disclaimer-title">${o2.title || this.strings.label_cookies_title}</div>
                                <div class="disclaimer-text">${o2.message || this.strings.label_cookies_text}</div>
                            `)
          );
        } else {
          wrapper.append(html2);
        }
        buttons = $3("<div>").addClass("disclaimer-actions").addClass(o2.clsButtons).append($3("<button>").addClass("button cookie-accept-button").addClass(o2.clsAcceptButton).html(this.strings.label_accept)).append($3("<button>").addClass("button cookie-cancel-button").addClass(o2.clsCancelButton).html(this.strings.label_cancel));
        buttons.appendTo(wrapper);
        if (o2.customButtons) {
          $3.each(o2.customButtons, function() {
            var btn = $3("<button>").addClass("button cookie-custom-button").addClass(this.cls).html(this.text);
            btn.on("click", () => {
              Utils.exec(this.onclick);
            });
            btn.appendTo(buttons);
          });
        }
        wrapper.appendTo($3("body"));
        wrapper.on(Metro2.events.click, ".cookie-accept-button", function() {
          var dur = 0;
          var durations = ("" + o2.duration).toArray(" ");
          $3.each(durations, function() {
            var d2 = "" + this;
            if (d2.includes("day")) {
              dur += parseInt(d2) * 24 * 60 * 60 * 1e3;
            } else if (d2.includes("hour")) {
              dur += parseInt(d2) * 60 * 60 * 1e3;
            } else if (d2.includes("min")) {
              dur += parseInt(d2) * 60 * 1e3;
            } else if (d2.includes("sec")) {
              dur += parseInt(d2) * 1e3;
            } else {
              dur += parseInt(d2);
            }
          });
          cookie.setCookie(o2.name, true, dur);
          Utils.exec(o2.onAccept);
          wrapper.remove();
        });
        wrapper.on(Metro2.events.click, ".cookie-cancel-button", function() {
          Utils.exec(o2.onDecline);
          wrapper.remove();
        });
      }
    };
  })(Metro, Dom);

  // source/components/countdown/countdown.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var CountdownDefaultConfig = {
      countdownDeferred: 0,
      stopOnBlur: true,
      animate: "none",
      ease: "linear",
      duration: 600,
      inputFormat: null,
      days: 0,
      hours: 0,
      minutes: 0,
      seconds: 0,
      date: null,
      start: true,
      clsCountdown: "",
      clsPart: "",
      clsZero: "",
      clsAlarm: "",
      clsDays: "",
      clsHours: "",
      clsMinutes: "",
      clsSeconds: "",
      onAlarm: Metro2.noop,
      onTick: Metro2.noop,
      onZero: Metro2.noop,
      onBlink: Metro2.noop,
      onCountdownCreate: Metro2.noop
    };
    Metro2.countdownSetup = function(options) {
      CountdownDefaultConfig = $3.extend({}, CountdownDefaultConfig, options);
    };
    if (typeof globalThis["metroCountdownSetup"] !== void 0) {
      Metro2.countdownSetup(globalThis["metroCountdownSetup"]);
    }
    Metro2.Component("countdown", {
      init: function(options, elem) {
        this._super(elem, options, CountdownDefaultConfig, {
          breakpoint: (/* @__PURE__ */ new Date()).getTime(),
          blinkInterval: null,
          tickInterval: null,
          zeroDaysFired: false,
          zeroHoursFired: false,
          zeroMinutesFired: false,
          zeroSecondsFired: false,
          fontSize: parseInt(Utils.getStyleOne(elem, "font-size")),
          current: {
            d: 0,
            h: 0,
            m: 0,
            s: 0
          },
          inactiveTab: false,
          id: Utils.elementId("countdown"),
          duration: 600
        });
        return this;
      },
      _create: function() {
        var o2 = this.options;
        this.duration = +o2.duration <= 0 || +o2.duration >= 1e3 ? 600 : +o2.duration;
        this._build();
        this._createEvents();
      },
      _setBreakpoint: function() {
        var o2 = this.options;
        var dm = 864e5, hm = 36e5, mm = 6e4, sm = 1e3;
        this.breakpoint = datetime().time();
        if (o2.date) {
          this.breakpoint = (o2.inputFormat ? Datetime.from(o2.date, o2.inputFormat) : datetime(o2.date)).time();
        }
        if (parseInt(o2.days) > 0) {
          this.breakpoint += parseInt(o2.days) * dm;
        }
        if (parseInt(o2.hours) > 0) {
          this.breakpoint += parseInt(o2.hours) * hm;
        }
        if (parseInt(o2.minutes) > 0) {
          this.breakpoint += parseInt(o2.minutes) * mm;
        }
        if (parseInt(o2.seconds) > 0) {
          this.breakpoint += parseInt(o2.seconds) * sm;
        }
      },
      _build: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var parts = ["days", "hours", "minutes", "seconds"];
        var dm = 24 * 60 * 60 * 1e3;
        var delta_days;
        var now = datetime().time();
        var digit2;
        const strings = this.strings;
        if (!element2.attr("id")) {
          element2.attr("id", Utils.elementId("countdown"));
        }
        if (!Utils.isValue(element2.attr("id"))) {
          element2.attr("id", Utils.elementId("countdown"));
        }
        element2.addClass("countdown").addClass(o2.clsCountdown);
        this._setBreakpoint();
        delta_days = Math.round((that.breakpoint - now) / dm);
        $3.each(parts, function() {
          var part = $3("<div>").addClass("part " + this).addClass(o2.clsPart).attr("data-label", strings[`label_${this}`]).appendTo(element2);
          if (this === "days") {
            part.addClass(o2.clsDays);
          }
          if (this === "hours") {
            part.addClass(o2.clsHours);
          }
          if (this === "minutes") {
            part.addClass(o2.clsMinutes);
          }
          if (this === "seconds") {
            part.addClass(o2.clsSeconds);
          }
          $3("<div>").addClass("digit").appendTo(part);
          $3("<div>").addClass("digit").appendTo(part);
          if (this === "days" && delta_days >= 100) {
            for (var i3 = 0; i3 < String(Math.round(delta_days / 100)).length; i3++) {
              $3("<div>").addClass("digit").appendTo(part);
            }
          }
        });
        digit2 = element2.find(".digit");
        digit2.append($3("<span class='digit-placeholder'>").html("0"));
        digit2.append($3("<span class='digit-value'>").html("0"));
        this._fireEvent("countdown-create", {
          element: element2
        });
        if (o2.start === true) {
          this.start();
        } else {
          this.tick();
        }
      },
      _createEvents: function() {
        var that = this;
        $3(document).on(
          "visibilitychange",
          function() {
            if (document.hidden) {
              that.pause();
            } else {
              that.resume();
            }
          },
          { ns: this.id }
        );
      },
      blink: function() {
        var element2 = this.element;
        element2.toggleClass("blink");
        this._fireEvent("blink", {
          time: this.current
        });
      },
      tick: function() {
        var element2 = this.element, o2 = this.options;
        var dm = 24 * 60 * 60, hm = 60 * 60, mm = 60, sm = 1;
        var left, now = datetime().time();
        var d2, h7, m2, s2;
        var days = element2.find(".days"), hours = element2.find(".hours"), minutes = element2.find(".minutes"), seconds = element2.find(".seconds");
        left = Math.floor((this.breakpoint - now) / 1e3);
        if (left <= -1) {
          this.stop();
          element2.addClass(o2.clsAlarm);
          this._fireEvent("alarm", {
            time: now
          });
          return;
        }
        d2 = Math.floor(left / dm);
        left -= d2 * dm;
        if (this.current.d !== d2) {
          this.current.d = d2;
          this.draw("days", d2);
        }
        if (d2 === 0) {
          if (this.zeroDaysFired === false) {
            this.zeroDaysFired = true;
            days.addClass(o2.clsZero);
            this._fireEvent("zero", {
              part: "days",
              value: days
            });
          }
        }
        h7 = Math.floor(left / hm);
        left -= h7 * hm;
        if (this.current.h !== h7) {
          this.current.h = h7;
          this.draw("hours", h7);
        }
        if (d2 === 0 && h7 === 0) {
          if (this.zeroHoursFired === false) {
            this.zeroHoursFired = true;
            hours.addClass(o2.clsZero);
            this._fireEvent("zero", {
              part: "hours",
              value: hours
            });
          }
        }
        m2 = Math.floor(left / mm);
        left -= m2 * mm;
        if (this.current.m !== m2) {
          this.current.m = m2;
          this.draw("minutes", m2);
        }
        if (d2 === 0 && h7 === 0 && m2 === 0) {
          if (this.zeroMinutesFired === false) {
            this.zeroMinutesFired = true;
            minutes.addClass(o2.clsZero);
            this._fireEvent("zero", {
              part: "minutes",
              value: minutes
            });
          }
        }
        s2 = Math.floor(left / sm);
        if (this.current.s !== s2) {
          this.current.s = s2;
          this.draw("seconds", s2);
        }
        if (d2 === 0 && h7 === 0 && m2 === 0 && s2 === 0) {
          if (this.zeroSecondsFired === false) {
            this.zeroSecondsFired = true;
            seconds.addClass(o2.clsZero);
            this._fireEvent("zero", {
              part: "seconds",
              value: seconds
            });
          }
        }
        this._fireEvent("tick", {
          days: d2,
          hours: h7,
          minutes: m2,
          seconds: s2
        });
      },
      draw: function(part, value) {
        var element2 = this.element, o2 = this.options;
        var digits, digits_length, digit_value, digit_current, digit2;
        var len, i3, duration = this.duration;
        var fontSize = this.fontSize;
        var slideDigit = function(digit3, value2) {
          var digit_copy, height = digit3.height();
          digit3.siblings(".-old-digit").remove();
          digit_copy = digit3.clone().appendTo(digit3.parent());
          digit_copy.css({
            top: -1 * height + "px"
          });
          digit3.addClass("-old-digit").animate({
            draw: {
              top: height,
              opacity: 0
            },
            dur: duration,
            ease: o2.ease,
            onDone: function() {
              $3(this).remove();
            }
          });
          digit_copy.html(value2).animate({
            draw: {
              top: 0,
              opacity: 1
            },
            dur: duration,
            ease: o2.ease
          });
        };
        var fadeDigit = function(digit3, value2) {
          var digit_copy;
          digit3.siblings(".-old-digit").remove();
          digit_copy = digit3.clone().appendTo(digit3.parent());
          digit_copy.css({
            opacity: 0
          });
          digit3.addClass("-old-digit").animate({
            draw: {
              opacity: 0
            },
            dur: duration / 2,
            ease: o2.ease,
            onDone: function() {
              $3(this).remove();
            }
          });
          digit_copy.html(value2).animate({
            draw: {
              opacity: 1
            },
            dur: duration / 2,
            ease: o2.ease
          });
        };
        var zoomDigit = function(digit3, value2) {
          var digit_copy, height = digit3.height(), fs = fontSize;
          digit3.siblings(".-old-digit").remove();
          digit_copy = digit3.clone().appendTo(digit3.parent());
          digit_copy.css({
            top: 0,
            left: 0,
            opacity: 1
          });
          digit3.addClass("-old-digit").animate({
            draw: {
              top: height,
              opacity: 0,
              fontSize: 0
            },
            dur: duration,
            ease: o2.ease,
            onDone: function() {
              $3(this).remove();
            }
          });
          digit_copy.html(value2).animate({
            draw: {
              top: 0,
              opacity: 1,
              fontSize: [0, fs]
            },
            dur: duration,
            ease: o2.ease
          });
        };
        value = "" + value;
        if (value.length === 1) {
          value = "0" + value;
        }
        len = value.length;
        digits = element2.find("." + part + " .digit:not(.-old-digit)");
        digits_length = digits.length;
        element2.find(".-old-digit").remove();
        for (i3 = 0; i3 < len; i3++) {
          digit2 = digits.eq(digits_length - 1).find(".digit-value");
          digit_value = Math.floor(parseInt(value) / Math.pow(10, i3)) % 10;
          digit_current = parseInt(digit2.text());
          digits_length--;
          if (digit_current === digit_value) {
            continue;
          }
          switch (("" + o2.animate).toLowerCase()) {
            case "slide":
              slideDigit(digit2, digit_value);
              break;
            case "fade":
              fadeDigit(digit2, digit_value);
              break;
            case "zoom":
              zoomDigit(digit2, digit_value);
              break;
            default:
              digit2.html(digit_value);
          }
        }
      },
      start: function() {
        var that = this, element2 = this.element;
        if (element2.data("paused") === false) {
          return;
        }
        clearInterval(this.blinkInterval);
        clearInterval(this.tickInterval);
        element2.data("paused", false);
        this._setBreakpoint();
        this.tick();
        this.blinkInterval = setInterval(function() {
          that.blink();
        }, 500);
        this.tickInterval = setInterval(function() {
          that.tick();
        }, 1e3);
      },
      stop: function() {
        var element2 = this.element;
        clearInterval(this.blinkInterval);
        clearInterval(this.tickInterval);
        element2.data("paused", true);
        element2.find(".digit").html("0");
        this.current = {
          d: 0,
          h: 0,
          m: 0,
          s: 0
        };
      },
      pause: function() {
        clearInterval(this.blinkInterval);
        clearInterval(this.tickInterval);
        this.element.data("paused", true);
      },
      resume: function() {
        var that = this;
        this.element.data("paused", false);
        this.blinkInterval = setInterval(function() {
          that.blink();
        }, 500);
        this.tickInterval = setInterval(function() {
          that.tick();
        }, 1e3);
      },
      reset: function() {
        var that = this, element2 = this.element, o2 = this.options;
        clearInterval(this.blinkInterval);
        clearInterval(this.tickInterval);
        element2.find(".part").removeClass(o2.clsZero);
        var digit2 = element2.find(".digit").clear();
        digit2.append($3("<span class='digit-placeholder'>").html("0"));
        digit2.append($3("<span class='digit-value'>").html("0"));
        this._setBreakpoint();
        element2.data("paused", false);
        this.tick();
        this.blinkInterval = setInterval(function() {
          that.blink();
        }, 500);
        this.tickInterval = setInterval(function() {
          that.tick();
        }, 1e3);
      },
      resetWith: function(val) {
        var that = this, element2 = this.element, o2 = this.options;
        if (typeof val === "string") {
          element2.attr("data-date", val);
          o2.date = val;
        } else if (typeof val === "object") {
          var keys = ["days", "hours", "minutes", "seconds"];
          $3.each(keys, function(i3, v2) {
            if (Metro2.utils.isValue(val[v2])) {
              element2.attr("data-" + v2, val[v2]);
              o2[v2] = val[v2];
            }
          });
        }
        this.reset();
      },
      togglePlay: function() {
        if (this.element.attr("data-pause") === true) {
          this.pause();
        } else {
          this.start();
        }
      },
      isPaused: function() {
        return this.element.data("paused");
      },
      getBreakpoint: function(asDate) {
        return asDate === true ? new Date(this.breakpoint) : this.breakpoint;
      },
      getLeft: function() {
        var dm = 24 * 60 * 60 * 1e3, hm = 60 * 60 * 1e3, mm = 60 * 1e3, sm = 1e3;
        var now = (/* @__PURE__ */ new Date()).getTime();
        var left_seconds = Math.floor(this.breakpoint - now);
        return {
          days: Math.round(left_seconds / dm),
          hours: Math.round(left_seconds / hm),
          minutes: Math.round(left_seconds / mm),
          seconds: Math.round(left_seconds / sm)
        };
      },
      changeAttribute: function(attr, newVal) {
        switch (attr) {
          case "data-pause":
            this.togglePlay();
            break;
          case "data-duration":
            this.duration = +newVal <= 0 || +newVal >= 1e3 ? 600 : +newVal;
            break;
        }
      },
      destroy: function() {
        clearInterval(this.blinkInterval);
        clearInterval(this.tickInterval);
        $3(document).off("visibilitychange", { ns: this.id });
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/counter/counter.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var CounterDefaultConfig = {
      startOnViewport: false,
      counterDeferred: 0,
      duration: 2e3,
      value: 0,
      from: 0,
      timeout: 0,
      delimiter: ",",
      prefix: "",
      suffix: "",
      onStart: Metro2.noop,
      onStop: Metro2.noop,
      onTick: Metro2.noop,
      onCounterCreate: Metro2.noop
    };
    Metro2.counterSetup = function(options) {
      CounterDefaultConfig = $3.extend({}, CounterDefaultConfig, options);
    };
    if (typeof globalThis["metroCounterSetup"] !== void 0) {
      Metro2.counterSetup(globalThis["metroCounterSetup"]);
    }
    Metro2.Component("counter", {
      init: function(options, elem) {
        this._super(elem, options, CounterDefaultConfig, {
          numbers: [],
          html: $3(elem).html(),
          started: false,
          id: Utils.elementId("counter")
        });
        return this;
      },
      _create: function() {
        this._createEvents();
        this._fireEvent("counter-create");
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        if (o2.startOnViewport) {
          Hooks.useEvent({
            effect: () => {
              that.start();
            },
            target: that.elem,
            event: Hooks.EVENTS.VIEWPORT
          });
        }
      },
      start: function(val, from) {
        var that = this, elem = this.elem, o2 = this.options;
        if (Utils.isValue(from)) {
          o2.from = +from;
        }
        if (Utils.isValue(val)) {
          o2.value = +val;
        }
        this.started = true;
        this._fireEvent("start");
        $3.animate({
          el: elem,
          draw: {
            innerHTML: [o2.from, o2.value]
          },
          defer: o2.timeout,
          dur: o2.duration,
          onFrame: function() {
            that._fireEvent("tick", {
              value: +this.innerHTML
            });
            this.innerHTML = o2.prefix + Number(this.innerHTML).format(0, 0, o2.delimiter) + o2.suffix;
          },
          onDone: function() {
            this.innerHTML = o2.prefix + Number(o2.value).format(0, 0, o2.delimiter) + o2.suffix;
            that._fireEvent("stop");
          }
        });
      },
      reset: function() {
        this.started = false;
        this.element.html(this.html);
      },
      changeAttribute: function(attr, val) {
        var o2 = this.options;
        if (attr === "data-value") {
          o2.value = +val;
        }
        if (attr === "data-from") {
          o2.from = +val;
        }
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/cube/cube.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var CubeDefaultConfig = {
      cubeDeferred: 0,
      rules: null,
      color: null,
      flashColor: null,
      flashInterval: 1e3,
      numbers: false,
      offBefore: true,
      attenuation: 0.3,
      stopOnBlur: false,
      cells: 4,
      margin: 8,
      showAxis: false,
      axisStyle: "arrow",
      //line
      cellClick: false,
      autoRestart: 5e3,
      clsCube: "",
      clsCell: "",
      clsSide: "",
      clsSideLeft: "",
      clsSideRight: "",
      clsSideTop: "",
      clsSideLeftCell: "",
      clsSideRightCell: "",
      clsSideTopCell: "",
      clsAxis: "",
      clsAxisX: "",
      clsAxisY: "",
      clsAxisZ: "",
      custom: Metro2.noop,
      onTick: Metro2.noop,
      onCubeCreate: Metro2.noop
    };
    Metro2.cubeSetup = function(options) {
      CubeDefaultConfig = $3.extend({}, CubeDefaultConfig, options);
    };
    if (typeof globalThis["metroCubeSetup"] !== void 0) {
      Metro2.cubeSetup(globalThis["metroCubeSetup"]);
    }
    Metro2.cubeDefaultRules = [
      {
        on: { "top": [16], "left": [4], "right": [1] },
        off: { "top": [13, 4], "left": [1, 16], "right": [13, 4] }
      },
      {
        on: { "top": [12, 15], "left": [3, 8], "right": [2, 5] },
        off: { "top": [9, 6, 3], "left": [5, 10, 15], "right": [14, 11, 8] }
      },
      {
        on: { "top": [11], "left": [7], "right": [6] },
        off: { "top": [1, 2, 5], "left": [9, 13, 14], "right": [15, 12, 16] }
      },
      {
        on: { "top": [8, 14], "left": [2, 12], "right": [9, 3] },
        off: { "top": [16], "left": [4], "right": [1] }
      },
      {
        on: { "top": [10, 7], "left": [6, 11], "right": [10, 7] },
        off: { "top": [12, 15], "left": [3, 8], "right": [2, 5] }
      },
      {
        on: { "top": [13, 4], "left": [1, 16], "right": [13, 4] },
        off: { "top": [11], "left": [7], "right": [6] }
      },
      {
        on: { "top": [9, 6, 3], "left": [5, 10, 15], "right": [14, 11, 8] },
        off: { "top": [8, 14], "left": [2, 12], "right": [9, 3] }
      },
      {
        on: { "top": [1, 2, 5], "left": [9, 13, 14], "right": [15, 12, 16] },
        off: { "top": [10, 7], "left": [6, 11], "right": [10, 7] }
      }
    ];
    Metro2.Component("cube", {
      init: function(options, elem) {
        this._super(elem, options, CubeDefaultConfig, {
          id: Utils.elementId("cube"),
          rules: null,
          interval: false,
          ruleInterval: false,
          running: false,
          intervals: []
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        if (o2.rules === null) {
          this.rules = Metro2.cubeDefaultRules;
        } else {
          this._parseRules(o2.rules);
        }
        this._createCube();
        this._createEvents();
        this._fireEvent("cube-create", {
          element: element2
        });
      },
      _parseRules: function(rules) {
        if (rules === void 0 || rules === null) {
          return false;
        }
        if (Utils.isObject(rules)) {
          this.rules = Utils.isObject(rules);
          return true;
        } else {
          try {
            this.rules = JSON.parse(rules);
            return true;
          } catch (err) {
            console.warn("Unknown or empty rules for cell flashing!");
            return false;
          }
        }
      },
      _createCube: function() {
        var element2 = this.element, o2 = this.options;
        var sides = ["left", "right", "top"];
        var id = Utils.elementId("cube");
        var cells_count = Math.pow(o2.cells, 2);
        element2.addClass("cube").addClass(o2.clsCube);
        if (!element2.attr("id")) {
          element2.attr("id", id);
        }
        this.id = element2.attr("id");
        this._createCssForFlashColor();
        this._createCssForCellSize();
        $3.each(sides, function() {
          var side, cell, i3;
          side = $3("<div>").addClass("side " + this + "-side").addClass(o2.clsSide).appendTo(element2);
          if (this === "left") {
            side.addClass(o2.clsSideLeft);
          }
          if (this === "right") {
            side.addClass(o2.clsSideRight);
          }
          if (this === "top") {
            side.addClass(o2.clsSideTop);
          }
          for (i3 = 0; i3 < cells_count; i3++) {
            cell = $3("<div>").addClass("cube-cell").addClass("cell-id-" + (i3 + 1)).addClass(o2.clsCell);
            cell.data("id", i3 + 1).data("side", this);
            cell.appendTo(side);
            if (o2.numbers === true) {
              cell.html(i3 + 1);
            }
          }
        });
        var cells = element2.find(".cube-cell");
        if (o2.color !== null) {
          if (Farbe.Routines.isColor(o2.color)) {
            cells.css({
              backgroundColor: o2.color,
              borderColor: o2.color
            });
          } else {
            cells.addClass(o2.color);
          }
        }
        var axis = ["x", "y", "z"];
        $3.each(axis, function() {
          var axis_name = this;
          var ax = $3("<div>").addClass("axis " + o2.axisStyle).addClass("axis-" + axis_name).addClass(o2.clsAxis);
          if (axis_name === "x") ax.addClass(o2.clsAxisX);
          if (axis_name === "y") ax.addClass(o2.clsAxisY);
          if (axis_name === "z") ax.addClass(o2.clsAxisZ);
          ax.appendTo(element2);
        });
        if (o2.showAxis === false) {
          element2.find(".axis").hide();
        }
        this._run();
      },
      _run: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var interval = 0;
        clearInterval(this.interval);
        element2.find(".cube-cell").removeClass("light");
        if (o2.custom !== Metro2.noop) {
          Utils.exec(o2.custom, [element2]);
        } else {
          element2.find(".cube-cell").removeClass("light");
          that._start();
          interval = Utils.isObject(this.rules) ? Utils.objectLength(this.rules) : 0;
          this.interval = setInterval(function() {
            that._start();
          }, interval * o2.flashInterval);
        }
      },
      _createCssForCellSize: function() {
        var element2 = this.element, o2 = this.options;
        var sheet = Metro2.sheet;
        var width;
        var cell_size;
        if (o2.margin === 8 && o2.cells === 4) {
          return;
        }
        width = parseInt(Utils.getStyleOne(element2, "width"));
        cell_size = Math.ceil((width / 2 - o2.margin * o2.cells * 2) / o2.cells);
        Utils.addCssRule(sheet, "#" + element2.attr("id") + " .side .cube-cell", "width: " + cell_size + "px!important; height: " + cell_size + "px!important; margin: " + o2.margin + "px!important;");
      },
      _createCssForFlashColor: function() {
        var element2 = this.element, o2 = this.options;
        var sheet = Metro2.sheet;
        var rule1;
        var rule2;
        var rules1 = [];
        var rules2 = [];
        var i3;
        if (o2.flashColor === null) {
          return;
        }
        rule1 = "0 0 10px " + Farbe.Routines.toRGBA(Farbe.Routines.parse(o2.flashColor), 1);
        rule2 = "0 0 10px " + Farbe.Routines.toRGBA(Farbe.Routines.parse(o2.flashColor), o2.attenuation);
        for (i3 = 0; i3 < 3; i3++) {
          rules1.push(rule1);
          rules2.push(rule2);
        }
        Utils.addCssRule(sheet, "@keyframes pulsar-cell-" + element2.attr("id"), "0%, 100% { box-shadow: " + rules1.join(",") + "} 50% { box-shadow: " + rules2.join(",") + " }");
        Utils.addCssRule(sheet, "#" + element2.attr("id") + " .side .cube-cell.light", "animation: pulsar-cell-" + element2.attr("id") + " 2.5s 0s ease-out infinite; background-color: " + o2.flashColor + "!important; border-color: " + o2.flashColor + "!important;");
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        $3(globalThis).on(Metro2.events.blur, function() {
          if (o2.stopOnBlur === true && that.running === true) {
            that._stop();
          }
        }, { ns: element2.attr("id") });
        $3(globalThis).on(Metro2.events.focus, function() {
          if (o2.stopOnBlur === true && that.running === false) {
            that._start();
          }
        }, { ns: element2.attr("id") });
        element2.on(Metro2.events.click, ".cube-cell", function() {
          if (o2.cellClick === true) {
            var cell = $3(this);
            cell.toggleClass("light");
          }
        });
      },
      _start: function() {
        var that = this, element2 = this.element;
        element2.find(".cube-cell").removeClass("light");
        this.running = true;
        $3.each(this.rules, function(index, rule) {
          that._execRule(index, rule);
        });
      },
      _stop: function() {
        this.running = false;
        clearInterval(this.interval);
        $3.each(this.intervals, function() {
          clearInterval(this);
        });
      },
      _tick: function(index, speed) {
        var that = this, o2 = this.options;
        if (speed === void 0) {
          speed = o2.flashInterval * index;
        }
        var interval = setTimeout(function() {
          that._fireEvent("tick", {
            index
          });
          clearInterval(interval);
          Utils.arrayDelete(that.intervals, interval);
        }, speed);
        this.intervals.push(interval);
      },
      _toggle: function(cell, func, time2, speed) {
        var that = this;
        if (speed === void 0) {
          speed = this.options.flashInterval * time2;
        }
        var interval = setTimeout(function() {
          cell[func === "on" ? "addClass" : "removeClass"]("light");
          clearInterval(interval);
          Utils.arrayDelete(that.intervals, interval);
        }, speed);
        this.intervals.push(interval);
      },
      start: function() {
        this._start();
      },
      stop: function() {
        this._stop();
      },
      toRule: function(index, speed) {
        var that = this, element2 = this.element, o2 = this.options;
        var rules = this.rules;
        if (rules === null || rules === void 0 || rules[index] === void 0) {
          return;
        }
        clearInterval(this.ruleInterval);
        this.ruleInterval = false;
        this.stop();
        element2.find(".cube-cell").removeClass("light");
        for (var i3 = 0; i3 <= index; i3++) {
          this._execRule(i3, rules[i3], speed);
        }
        if (Utils.isInt(o2.autoRestart) && o2.autoRestart > 0) {
          this.ruleInterval = setTimeout(function() {
            that._run();
          }, o2.autoRestart);
        }
      },
      _execRule: function(index, rule, speed) {
        var that = this, element2 = this.element;
        var sides = ["left", "right", "top"];
        this._tick(index, speed);
        $3.each(sides, function() {
          var side_class = "." + this + "-side";
          var side_name = this;
          var cells_on = rule["on"] !== void 0 && rule["on"][side_name] !== void 0 ? rule["on"][side_name] : false;
          var cells_off = rule["off"] !== void 0 && rule["off"][side_name] !== void 0 ? rule["off"][side_name] : false;
          if (cells_on !== false) $3.each(cells_on, function() {
            var cell_index = this;
            var cell = element2.find(side_class + " .cell-id-" + cell_index);
            that._toggle(cell, "on", index, speed);
          });
          if (cells_off !== false) $3.each(cells_off, function() {
            var cell_index = this;
            var cell = element2.find(side_class + " .cell-id-" + cell_index);
            that._toggle(cell, "off", index, speed);
          });
        });
      },
      rule: function(r) {
        if (r === void 0) {
          return this.rules;
        }
        if (this._parseRules(r) !== true) {
          return;
        }
        this.options.rules = r;
        this.stop();
        this.element.find(".cube-cell").removeClass("light");
        this._run();
      },
      axis: function(show) {
        var func = show === true ? "show" : "hide";
        this.element.find(".axis")[func]();
      },
      changeRules: function() {
        var element2 = this.element, o2 = this.options;
        var rules = element2.attr("data-rules");
        if (this._parseRules(rules) !== true) {
          return;
        }
        this.stop();
        element2.find(".cube-cell").removeClass("light");
        o2.rules = rules;
        this._run();
      },
      changeAxisVisibility: function() {
        var element2 = this.element;
        var visibility = JSON.parse(element2.attr("data-show-axis")) === true;
        var func = visibility ? "show" : "hide";
        element2.find(".axis")[func]();
      },
      changeAxisStyle: function() {
        var element2 = this.element;
        var style = element2.attr("data-axis-style");
        element2.find(".axis").removeClass("arrow line no-style").addClass(style);
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-rules":
            this.changeRules();
            break;
          case "data-show-axis":
            this.changeAxisVisibility();
            break;
          case "data-axis-style":
            this.changeAxisStyle();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        clearInterval(this.interval);
        this.interval = null;
        $3(globalThis).off(Metro2.events.blur, { ns: element2.attr("id") });
        $3(globalThis).off(Metro2.events.focus, { ns: element2.attr("id") });
        element2.off(Metro2.events.click, ".cube-cell");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/datepicker/datepicker.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var DatePickerDefaultConfig = {
      label: "",
      datepickerDeferred: 0,
      gmt: 0,
      format: "YYYY-MM-DD",
      inputFormat: null,
      value: null,
      distance: 3,
      month: true,
      day: true,
      year: true,
      minYear: null,
      maxYear: null,
      defaultYearDistance: 100,
      scrollSpeed: 4,
      copyInlineStyles: false,
      openMode: "auto",
      clsPicker: "",
      clsPart: "",
      clsMonth: "",
      clsDay: "",
      clsYear: "",
      clsLabel: "",
      clsButton: "",
      clsOkButton: "",
      clsCancelButton: "",
      okButtonIcon: "\u2713",
      cancelButtonIcon: "\u{10102}",
      onSet: Metro2.noop,
      onOpen: Metro2.noop,
      onClose: Metro2.noop,
      onScroll: Metro2.noop,
      onDatePickerCreate: Metro2.noop
    };
    Metro2.datePickerSetup = function(options) {
      DatePickerDefaultConfig = $3.extend({}, DatePickerDefaultConfig, options);
    };
    if (typeof globalThis["metroDatePickerSetup"] !== void 0) {
      Metro2.datePickerSetup(globalThis["metroDatePickerSetup"]);
    }
    Metro2.Component("date-picker", {
      init: function(options, elem) {
        this._super(elem, options, DatePickerDefaultConfig, {
          picker: null,
          isOpen: false,
          value: datetime(),
          listTimer: {
            day: null,
            month: null,
            year: null
          }
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options, locale = this.locale;
        var date = datetime();
        if (o2.distance < 1) {
          o2.distance = 1;
        }
        if (Utils.isValue(element2.val())) {
          o2.value = element2.val();
        }
        if (Utils.isValue(o2.value)) {
          this.value = o2.inputFormat ? Datetime.from(o2.value, o2.inputFormat, locale) : datetime(o2.value);
        }
        if (o2.minYear === null) {
          o2.minYear = date.year() - o2.defaultYearDistance;
        }
        if (o2.maxYear === null) {
          o2.maxYear = date.year() + o2.defaultYearDistance;
        }
        this._createStructure();
        this._createEvents();
        this._set();
        this._fireEvent("datepicker-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options, locale = this.locale;
        var picker, month, day, year, i3, j2;
        var dateWrapper, selectWrapper, selectBlock, actionBlock;
        var id = Utils.elementId("datepicker");
        picker = $3("<div>").addClass("wheel-picker date-picker " + element2[0].className).addClass(o2.clsPicker);
        if (!picker.attr("id")) {
          picker.attr("id", id);
        }
        picker.insertBefore(element2);
        element2.appendTo(picker);
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(picker);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        dateWrapper = $3("<div>").addClass("date-wrapper").appendTo(picker);
        if (o2.month === true) {
          month = $3("<div>").addClass("month").addClass(o2.clsPart).addClass(o2.clsMonth).appendTo(dateWrapper);
        }
        if (o2.day === true) {
          day = $3("<div>").addClass("day").addClass(o2.clsPart).addClass(o2.clsDay).appendTo(dateWrapper);
        }
        if (o2.year === true) {
          year = $3("<div>").addClass("year").addClass(o2.clsPart).addClass(o2.clsYear).appendTo(dateWrapper);
        }
        selectWrapper = $3("<div>").addClass("select-wrapper").appendTo(picker);
        selectBlock = $3("<div>").addClass("select-block").appendTo(selectWrapper);
        if (o2.month === true) {
          month = $3("<ul>").addClass("sel-month").appendTo(selectBlock);
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(month);
          for (i3 = 0; i3 < 12; i3++) {
            const month_name = Datetime.getLocale(locale).months[i3];
            $3("<li>").addClass("js-month-" + i3 + " js-month-real-" + month_name.toLowerCase()).html(month_name).data("value", i3).appendTo(month);
          }
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(month);
        }
        if (o2.day === true) {
          day = $3("<ul>").addClass("sel-day").appendTo(selectBlock);
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(day);
          for (i3 = 0; i3 < 31; i3++) {
            $3("<li>").addClass("js-day-" + i3 + " js-day-real-" + (i3 + 1)).html(i3 + 1).data("value", i3 + 1).appendTo(day);
          }
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(day);
        }
        if (o2.year === true) {
          year = $3("<ul>").addClass("sel-year").appendTo(selectBlock);
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(year);
          for (i3 = o2.minYear, j2 = 0; i3 <= o2.maxYear; i3++, j2++) {
            $3("<li>").addClass("js-year-" + j2 + " js-year-real-" + i3).html(i3).data("value", i3).appendTo(year);
          }
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(year);
        }
        selectBlock.height((o2.distance * 2 + 1) * 40);
        actionBlock = $3("<div>").addClass("action-block").appendTo(selectWrapper);
        $3("<button>").attr("type", "button").addClass("button action-today").addClass(o2.clsButton).addClass(o2.clsTodayButton).html(`<span class="caption">${this.strings.label_today}</span>`).appendTo(actionBlock);
        $3("<button>").attr("type", "button").addClass("button action-ok").addClass(o2.clsButton).addClass(o2.clsOkButton).html(`<span class="icon">${o2.okButtonIcon}</span>`).appendTo(actionBlock);
        $3("<button>").attr("type", "button").addClass("button action-cancel").addClass(o2.clsButton).addClass(o2.clsCancelButton).html(`<span class="icon">${o2.cancelButtonIcon}</span>`).appendTo(actionBlock);
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          for (i3 = 0; i3 < element2[0].style.length; i3++) {
            picker.css(element2[0].style[i3], element2.css(element2[0].style[i3]));
          }
        }
        if (element2.prop("disabled")) {
          picker.addClass("disabled");
        }
        this.picker = picker;
      },
      _createEvents: function() {
        var that = this, o2 = this.options;
        var picker = this.picker;
        picker.on("touchstart", ".select-block ul", function(e) {
          if (e.changedTouches) {
            return;
          }
          var target = this;
          var pageY = Utils.pageXY(e).y;
          $3(document).on(
            "touchmove",
            function(e2) {
              target.scrollTop -= o2.scrollSpeed * (pageY > Utils.pageXY(e2).y ? -1 : 1);
              pageY = Utils.pageXY(e2).y;
            },
            { ns: picker.attr("id") }
          );
          $3(document).on(
            "touchend",
            function() {
              $3(document).off(Metro2.events.move, { ns: picker.attr("id") });
              $3(document).off(Metro2.events.stop, { ns: picker.attr("id") });
            },
            { ns: picker.attr("id") }
          );
        });
        picker.on(Metro2.events.click, function(e) {
          if (that.isOpen === false) that.open();
          e.stopPropagation();
        });
        picker.on(Metro2.events.click, ".action-ok", function(e) {
          var m2, d2, y2;
          var sm = picker.find(".sel-month li.active"), sd = picker.find(".sel-day li.active"), sy = picker.find(".sel-year li.active");
          m2 = sm.length === 0 ? that.value.value.getMonth() : sm.data("value");
          d2 = sd.length === 0 ? that.value.value.getDate() : sd.data("value");
          y2 = sy.length === 0 ? that.value.value.getFullYear() : sy.data("value");
          that.value = datetime(y2, m2, d2);
          that._set();
          that.close();
          e.preventDefault();
          e.stopPropagation();
        });
        picker.on(Metro2.events.click, ".action-cancel", function(e) {
          that.close();
          e.preventDefault();
          e.stopPropagation();
        });
        var scrollLatency = 150;
        $3.each(["month", "day", "year"], function() {
          var part = this, list = picker.find(".sel-" + part);
          const scrollFn = Hooks.useDebounce(function(e) {
            var target, targetElement, scrollTop;
            that.listTimer[part] = null;
            target = Math.round(Math.ceil(list.scrollTop()) / 40);
            targetElement = list.find(".js-" + part + "-" + target);
            scrollTop = targetElement.position().top - o2.distance * 40;
            list.find(".active").removeClass("active");
            list[0].scrollTop = scrollTop;
            targetElement.addClass("active");
            Utils.exec(o2.onScroll, [targetElement, list, picker], list[0]);
          }, scrollLatency);
          list.on("scroll", scrollFn);
        });
        picker.on(Metro2.events.click, "ul li", function(e) {
          const target = $3(this);
          const list = target.closest("ul");
          const scrollTop = target.position().top - o2.distance * 40;
          list.find(".active").removeClass("active");
          $3.animate({
            el: list[0],
            draw: {
              scrollTop
            },
            dur: 300
          });
          list[0].scrollTop = scrollTop;
          target.addClass("active");
          Utils.exec(o2.onScroll, [target, list, picker], list[0]);
        });
        picker.on(Metro2.events.click, ".action-today", function(e) {
          const now = datetime();
          const month = now.month();
          const day = now.day();
          const year = now.year();
          picker.find(`.sel-month li.js-month-${month}`).click();
          picker.find(`.sel-day li.js-day-real-${day}`).click();
          picker.find(`.sel-year li.js-year-real-${year}`).click();
          e.preventDefault();
          e.stopPropagation();
        });
      },
      _correct: function() {
        var m2 = this.value.month(), d2 = this.value.day(), y2 = this.value.year();
        this.value = datetime(y2, m2, d2);
      },
      _set: function() {
        var element2 = this.element, o2 = this.options;
        var picker = this.picker;
        var m2 = Datetime.getLocale(this.locale).months[this.value.month()], d2 = this.value.day(), y2 = this.value.year();
        if (o2.month === true) {
          picker.find(".month").html(m2);
        }
        if (o2.day === true) {
          picker.find(".day").html(d2);
        }
        if (o2.year === true) {
          picker.find(".year").html(y2);
        }
        element2.val(this.value.format(o2.format, this.locale)).trigger("change");
        this._fireEvent("set", {
          value: this.value.val(),
          elementValue: element2.val(),
          picker
        });
      },
      open: function() {
        var o2 = this.options;
        var picker = this.picker;
        var m2 = this.value.month(), d2 = this.value.day() - 1, y2 = this.value.year();
        var m_list, d_list, y_list;
        var select_wrapper = picker.find(".select-wrapper");
        $3.each($3(".date-picker"), function() {
          $3(this).find("input").each(function() {
            Metro2.getPlugin(this, "datepicker").close();
          });
        });
        select_wrapper.show(0);
        picker.find("li").removeClass("active");
        if (o2.openMode === "auto") {
          if (!Metro2.utils.inViewport(select_wrapper[0])) {
            select_wrapper.parent().addClass("drop-up-select");
          }
          if (!Metro2.utils.inViewport(select_wrapper[0])) {
            select_wrapper.parent().removeClass("drop-up-select");
            select_wrapper.parent().addClass("drop-as-dialog");
          }
        } else {
          if (o2.openMode === "dialog") {
            select_wrapper.parent().addClass("drop-as-dialog");
          } else if (o2.openMode === "up") {
            select_wrapper.parent().addClass("drop-up-select");
          }
        }
        if (o2.month === true) {
          m_list = picker.find(".sel-month");
          m_list.scrollTop(0).animate({
            draw: {
              scrollTop: m_list.find("li.js-month-" + m2).addClass("active").position().top - 40 * o2.distance
            },
            dur: 100
          });
        }
        if (o2.day === true) {
          d_list = picker.find(".sel-day");
          d_list.scrollTop(0).animate({
            draw: {
              scrollTop: d_list.find("li.js-day-" + d2).addClass("active").position().top - 40 * o2.distance
            },
            dur: 100
          });
        }
        if (o2.year === true) {
          y_list = picker.find(".sel-year");
          y_list.scrollTop(0).animate({
            draw: {
              scrollTop: y_list.find("li.js-year-real-" + y2).addClass("active").position().top - 40 * o2.distance
            },
            dur: 100
          });
        }
        this.isOpen = true;
        this._fireEvent("open", {
          value: this.value.val(),
          picker
        });
      },
      close: function() {
        var picker = this.picker, o2 = this.options;
        picker.find(".select-wrapper").hide(0);
        if (o2.openMode === "auto") {
          picker.find(".select-wrapper").parent().removeClass("drop-up-select drop-as-dialog");
        }
        this.isOpen = false;
        this._fireEvent("close", {
          value: this.value.val(),
          picker
        });
      },
      val: function(value) {
        var o2 = this.options;
        if (!Utils.isValue(value)) {
          return this.element.val();
        }
        this.value = o2.inputFormat ? Datetime.from(value, o2.inputFormat, this.locale) : datetime(value);
        this._set();
      },
      date: function(t, f3) {
        if (t === void 0) {
          return this.value.val();
        }
        try {
          this.value = Datetime.from(t, f3, this.locale);
          this._set();
        } catch (e) {
          return false;
        }
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attr, newValue) {
        switch (attr) {
          case "disabled":
            this.toggleState();
            break;
          case "data-value":
            this.val(newValue);
            break;
          case "data-format":
            this.options.format = newValue;
            this._set();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, picker = this.picker;
        $3.each(["moth", "day", "year"], function() {
          picker.find(".sel-" + this).off("scroll");
        });
        picker.off(Metro2.events.start, ".select-block ul");
        picker.off(Metro2.events.click);
        picker.off(Metro2.events.click, ".action-ok");
        picker.off(Metro2.events.click, ".action-cancel");
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3.each($3(".date-picker"), function() {
        $3(this).find("input").each(function() {
          Metro2.getPlugin(this, "datepicker").close();
        });
      });
    });
  })(Metro, Dom);

  // source/components/directive/directive.js
  (function(Metro2, $3) {
    "use strict";
    var DirectiveDefaultConfig = {
      directive: "note",
      showIcon: false,
      title: "",
      onDirectiveCreate: Metro2.noop
    };
    Metro2.directiveSetup = function(options) {
      DirectiveDefaultConfig = $3.extend({}, DirectiveDefaultConfig, options);
    };
    if (typeof window["metroDirectiveSetup"] !== void 0) {
      Metro2.directiveSetup(window["metroDirectiveSetup"]);
    }
    Metro2.Component("directive", {
      init: function(options, elem) {
        this._super(elem, options, DirectiveDefaultConfig, {
          // define instance vars here
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        this._createStructure();
        this._createEvents();
        this._fireEvent("directive-create");
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        const directive = element2.wrap("<div>").addClass("directive").addClass(`directive-${o2.directive}`);
        const title3 = $3("<div>").addClass("directive-title").html(o2.title ? o2.title : this.strings[`label_${o2.directive.toLowerCase()}`].toUpperCase());
        if (o2.showIcon) {
          title3.prepend($3("<span>").addClass("icon").html("&nbsp;"));
        }
        directive.prepend(title3);
        this.component = directive;
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/donut/donut.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var DonutDefaultConfig = {
      donutDeferred: 0,
      size: 100,
      hole: 0.8,
      value: 0,
      background: "transparent",
      color: "",
      stroke: "#d1d8e7",
      fill: "#49649f",
      fontSize: 0,
      total: 100,
      cap: "%",
      showText: true,
      showValue: false,
      animate: 0,
      onChange: Metro2.noop,
      onDrawValue: function(v2) {
        return v2;
      },
      onDonutCreate: Metro2.noop
    };
    Metro2.donutSetup = function(options) {
      DonutDefaultConfig = $3.extend({}, DonutDefaultConfig, options);
    };
    if (typeof globalThis["metroDonutSetup"] !== void 0) {
      Metro2.donutSetup(globalThis["metroDonutSetup"]);
    }
    Metro2.Component("donut", {
      init: function(options, elem) {
        this._super(elem, options, DonutDefaultConfig, {
          value: 0,
          animation_change_interval: null
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("donut");
        this._setElementSize();
        this._draw();
        this._addEvents();
        this.val(o2.value);
        this._fireEvent("donut-create", {
          element: element2
        });
      },
      _setElementSize: function() {
        var element2 = this.element, o2 = this.options;
        var width = o2.size;
        element2.css({
          width,
          background: o2.background
        });
        element2.css({
          height: element2.width()
        });
      },
      _draw: function() {
        var element2 = this.element, o2 = this.options;
        var html2 = "";
        var radius = element2.width() / 2;
        var r = radius * (1 - (1 - o2.hole) / 2);
        var width = radius * (1 - o2.hole);
        var transform = "rotate(-90 " + radius + "," + radius + ")";
        var fontSize = o2.fontSize === 0 ? r * o2.hole * 0.6 : o2.fontSize;
        html2 += "<svg>";
        html2 += "   <circle class='donut-back' r='" + r + "px' cx='" + radius + "px' cy='" + radius + "px' transform='" + transform + "' fill='none' stroke='" + o2.stroke + "' stroke-width='" + width + "'/>";
        html2 += "   <circle class='donut-fill' r='" + r + "px' cx='" + radius + "px' cy='" + radius + "px' transform='" + transform + "' fill='none' stroke='" + o2.fill + "' stroke-width='" + width + "'/>";
        if (o2.showText === true)
          html2 += "   <text class='donut-title' x='" + radius + "px' y='" + radius + "px' dy='" + fontSize / 3 + "px' text-anchor='middle' fill='" + (o2.color !== "" ? o2.color : o2.fill) + "' font-size='" + fontSize + "px'></text>";
        html2 += "</svg>";
        element2.html(html2);
      },
      _addEvents: function() {
        var that = this;
        $3(globalThis).on("resize", function() {
          that._setElementSize();
          that._draw();
          that.val(that.value);
        });
      },
      _setValue: function(v2) {
        var element2 = this.element, o2 = this.options;
        var fill = element2.find(".donut-fill");
        var title3 = element2.find(".donut-title");
        var radius = element2.width() / 2;
        var r = radius * (1 - (1 - o2.hole) / 2);
        var circumference = Math.round(2 * Math.PI * r);
        var title_value = o2.showValue ? v2 : Utils.percent(o2.total, v2, true);
        var fill_value = Math.round(+v2 * circumference / o2.total);
        var sda = fill.attr("stroke-dasharray");
        if (typeof sda === "undefined") {
          sda = 0;
        } else {
          sda = +sda.split(" ")[0];
        }
        var delta = fill_value - sda;
        fill.animate({
          draw: function(t, p3) {
            $3(this).attr("stroke-dasharray", sda + delta * p3 + " " + circumference);
          },
          dur: o2.animate
        });
        title3.html(Metro2.utils.exec(o2.onDrawValue, [title_value + o2.cap]));
      },
      val: function(v2) {
        var o2 = this.options;
        if (v2 === void 0) {
          return this.value;
        }
        if (parseInt(v2) < 0 || parseInt(v2) > o2.total) {
          return false;
        }
        this._setValue(v2);
        this.value = v2;
        this._fireEvent("change", {
          value: this.value
        });
      },
      setColor: function(obj) {
        var validKeys = ["background", "fill", "stroke", "color"];
        var that = this;
        $3.each(obj, function(key, val) {
          if (validKeys.indexOf(key) !== -1) {
            that.options[key] = val;
          }
        });
        this._draw();
        this.val(this.value);
        return this;
      },
      changeValue: function() {
        this.val(this.element.attr("data-value"));
      },
      changeAttribute: function(attr, val) {
        switch (attr) {
          case "data-value":
            this.changeValue();
            break;
          case "data-background":
            this.setColor({ background: val });
            break;
          case "data-fill":
            this.setColor({ fill: val });
            break;
          case "data-stroke":
            this.setColor({ stroke: val });
            break;
          case "data-color":
            this.setColor({ color: val });
            break;
        }
      },
      destroy: function() {
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/double-select-box/double-select-box.js
  (function(Metro2, $3) {
    "use strict";
    var DoubleSelectBoxDefaultConfig = {
      height: "auto",
      multiSelect: false,
      moveRightIcon: "&rsaquo;",
      moveRightAllIcon: "&raquo;",
      moveLeftIcon: "&lsaquo;",
      moveLeftAllIcon: "&laquo;",
      clsBox: "",
      clsMoveButton: "",
      clsMoveRightButton: "",
      clsMoveRightAllButton: "",
      clsMoveLeftButton: "",
      clsMoveLeftAllButton: "",
      clsListLeft: "",
      clsListRight: "",
      onDoubleSelectBoxCreate: Metro2.noop
    };
    Metro2.doubleSelectBoxSetup = function(options) {
      DoubleSelectBoxDefaultConfig = $3.extend({}, DoubleSelectBoxDefaultConfig, options);
    };
    if (typeof globalThis["metroDoubleSelectBoxSetup"] !== void 0) {
      Metro2.doubleSelectBoxSetup(globalThis["metroDoubleSelectBoxSetup"]);
    }
    Metro2.Component("double-select-box", {
      init: function(options, elem) {
        this._super(elem, options, DoubleSelectBoxDefaultConfig, {
          // define instance vars here
          select1: null,
          select2: null,
          list1: null,
          list2: null
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        if (element2.children("select").length !== 2) {
          throw new Error("Component DoubleSelectBox required two select elements!");
        }
        this._createStructure();
        this._createEvents();
        this._fireEvent("double-select-box-create");
      },
      _drawList: function() {
        var that = this;
        this.list1.clear();
        this.select1.find("option").each(function(i3, option2) {
          const $op = $3(option2);
          const icon = $op.attr("data-icon");
          let html2 = $op.attr("data-template") ? $op.attr("data-template").replace(/\$1/g, $op.text()) : $op.text();
          if (icon) {
            html2 = $3("<span>").addClass("icon").append(icon).outerHTML() + html2;
          }
          that.list1.append(
            $3("<li>").html(html2).attr("data-value", option2.value).data("option", option2)
          );
        });
        this.list2.clear();
        this.select2.find("option").each(function(i3, option2) {
          const $op = $3(option2);
          const icon = $op.attr("data-icon");
          let html2 = $op.attr("data-template") ? $op.attr("data-template").replace(/\$1/g, $op.text()) : $op.text();
          if (icon) {
            html2 = $3("<span>").addClass("icon").append(icon).outerHTML() + html2;
          }
          that.list2.append(
            $3("<li>").html(html2).attr("data-value", option2.value).data("option", option2)
          );
        });
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var selects = element2.children("select");
        var select1 = selects.eq(0);
        var select2 = selects.eq(1);
        var controls = $3("<div>").addClass("controls").insertBefore(select2);
        var list1, list2;
        element2.addClass("double-select-box").addClass(o2.clsBox).css({
          height: o2.height
        });
        selects.prop("multiple", true);
        controls.append(
          $3([
            $3("<button>").attr("type", "button").addClass("button square small --move-right").addClass(o2.clsMoveButton).addClass(o2.clsMoveRightButton).html(`<span class="icon">${o2.moveRightIcon}</span>`),
            $3("<button>").attr("type", "button").addClass("button square small --move-right-all").addClass(o2.clsMoveButton).addClass(o2.clsMoveRightAllButton).html(`<span class="icon">${o2.moveRightAllIcon}</span>`),
            $3("<button>").attr("type", "button").addClass("button square small --move-left-all").addClass(o2.clsMoveButton).addClass(o2.clsMoveLeftAllButton).html(`<span class="icon">${o2.moveLeftAllIcon}</span>`),
            $3("<button>").attr("type", "button").addClass("button square small --move-left").addClass(o2.clsMoveButton).addClass(o2.clsMoveLeftButton).html(`<span class="icon">${o2.moveLeftIcon}</span>`)
          ])
        );
        list1 = $3("<ul>").addClass("--list1").addClass(o2.clsListLeft).insertBefore(select1);
        list2 = $3("<ul>").addClass("--list2").addClass(o2.clsListRight).insertBefore(select2);
        this.select1 = select1;
        this.select2 = select2;
        this.list1 = list1;
        this.list2 = list2;
        this._drawList();
      },
      _moveItems: function(items, targets) {
        $3.each(items, function() {
          var $item = $3(this);
          var option2 = $item.data("option");
          $3(option2).appendTo(targets[0]);
          $item.removeClass("active").appendTo(targets[1]);
        });
      },
      _move: function(dir, scope) {
        var that = this;
        if (scope === "selected") {
          if (dir === "ltr") {
            that._moveItems(this.list1.find("li.active"), [that.select2, that.list2]);
          } else {
            that._moveItems(this.list2.find("li.active"), [that.select1, that.list1]);
          }
        } else {
          if (dir === "ltr") {
            that._moveItems(this.list1.find("li"), [that.select2, that.list2]);
          } else {
            that._moveItems(this.list2.find("li"), [that.select1, that.list1]);
          }
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var items = element2.find("li");
        items.on("click", function() {
          var $el = $3(this);
          if (o2.multiSelect === false) {
            that.list1.find("li").removeClass("active");
            that.list2.find("li").removeClass("active");
          }
          $el.addClass("active");
        });
        items.on("dblclick", function() {
          var $el = $3(this);
          var dir = $el.parent().hasClass("--list1") ? "ltr" : "rtl";
          var scope = "selected";
          that.list1.find("li").removeClass("active");
          that.list2.find("li").removeClass("active");
          $el.addClass("active");
          that._move(dir, scope);
        });
        element2.on("click", "button", function() {
          var btn = $3(this);
          if (btn.hasClass("--move-right")) {
            that._move("ltr", "selected");
          } else if (btn.hasClass("--move-right-all")) {
            that._move("ltr", "all");
          } else if (btn.hasClass("--move-left")) {
            that._move("rtl", "selected");
          } else if (btn.hasClass("--move-left-all")) {
            that._move("rtl", "all");
          } else {
            throw new Error("Pressed unregistered button!");
          }
        });
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/double-slider/double-slider.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var DoubleSliderDefaultConfig = {
      doublesliderDeferred: 0,
      roundValue: true,
      min: 0,
      max: 100,
      accuracy: 0,
      showMinMax: false,
      minMaxPosition: Metro2.position.BOTTOM,
      valueMin: null,
      valueMax: null,
      hint: false,
      hintAlways: false,
      hintPositionMin: Metro2.position.TOP,
      hintPositionMax: Metro2.position.TOP,
      hintMaskMin: "$1",
      hintMaskMax: "$1",
      target: null,
      size: 0,
      clsSlider: "",
      clsBackside: "",
      clsComplete: "",
      clsMarker: "",
      clsMarkerMin: "",
      clsMarkerMax: "",
      clsHint: "",
      clsHintMin: "",
      clsHintMax: "",
      clsMinMax: "",
      clsMin: "",
      clsMax: "",
      onStart: Metro2.noop,
      onStop: Metro2.noop,
      onMove: Metro2.noop,
      onChange: Metro2.noop,
      onChangeValue: Metro2.noop,
      onFocus: Metro2.noop,
      onBlur: Metro2.noop,
      onDoubleSliderCreate: Metro2.noop
    };
    Metro2.doubleSliderSetup = function(options) {
      DoubleSliderDefaultConfig = $3.extend({}, DoubleSliderDefaultConfig, options);
    };
    if (typeof globalThis["metroDoubleSliderSetup"] !== void 0) {
      Metro2.doubleSliderSetup(globalThis["metroDoubleSliderSetup"]);
    }
    Metro2.Component("double-slider", {
      init: function(options, elem) {
        this._super(elem, options, DoubleSliderDefaultConfig, {
          slider: null,
          valueMin: null,
          valueMax: null,
          keyInterval: false,
          id: Utils.elementId("slider")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this.valueMin = Utils.isValue(o2.valueMin) ? +o2.valueMin : +o2.min;
        this.valueMax = Utils.isValue(o2.valueMax) ? +o2.valueMax : +o2.max;
        this._createSlider();
        this._createEvents();
        this.val(this.valueMin, this.valueMax);
        this._fireEvent("double-slider-create", {
          element: element2
        });
      },
      _createSlider: function() {
        var element2 = this.element, o2 = this.options;
        var slider_wrapper = $3("<div>").addClass("slider-wrapper");
        var slider = $3("<div>").addClass("slider").addClass(o2.clsSlider).addClass(this.elem.className);
        var backside = $3("<div>").addClass("backside").addClass(o2.clsBackside);
        var complete = $3("<div>").addClass("complete").addClass(o2.clsComplete);
        var markerMin = $3("<button>").attr("type", "button").addClass("marker marker-min").addClass(o2.clsMarker).addClass(o2.clsMarkerMin);
        var markerMax = $3("<button>").attr("type", "button").addClass("marker marker-max").addClass(o2.clsMarker).addClass(o2.clsMarkerMax);
        var hintMin = $3("<div>").addClass("hint hint-min").addClass(o2.hintPositionMin + "-side").addClass(o2.clsHint).addClass(o2.clsHintMin);
        var hintMax = $3("<div>").addClass("hint hint-max").addClass(o2.hintPositionMax + "-side").addClass(o2.clsHint).addClass(o2.clsHintMax);
        var i3;
        if (o2.size > 0) {
          slider.outerWidth(o2.size);
        }
        slider.insertBefore(element2);
        element2.appendTo(slider);
        slider_wrapper.insertBefore(slider);
        slider.appendTo(slider_wrapper);
        backside.appendTo(slider);
        complete.appendTo(slider);
        markerMin.appendTo(slider);
        markerMax.appendTo(slider);
        hintMin.appendTo(markerMin);
        hintMax.appendTo(markerMax);
        if (o2.hintAlways === true) {
          $3([hintMin, hintMax]).css({
            display: "block"
          }).addClass("permanent-hint");
        }
        if (o2.showMinMax === true) {
          var min_max_wrapper = $3("<div>").addClass("slider-min-max").addClass(o2.clsMinMax);
          $3("<span>").addClass("slider-text-min").addClass(o2.clsMin).html(`${o2.min}`).appendTo(min_max_wrapper);
          $3("<span>").addClass("slider-text-max").addClass(o2.clsMax).html(`${o2.max}`).appendTo(min_max_wrapper);
          if (o2.minMaxPosition === Metro2.position.TOP) {
            min_max_wrapper.insertBefore(slider);
          } else {
            min_max_wrapper.insertAfter(slider);
          }
        }
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          for (i3 = 0; i3 < element2[0].style.length; i3++) {
            slider.css(element2[0].style[i3], element2.css(element2[0].style[i3]));
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this.slider = slider;
      },
      _createEvents: function() {
        var that = this, slider = this.slider, o2 = this.options;
        var marker = slider.find(".marker");
        marker.on(Metro2.events.startAll, function() {
          var _marker = $3(this);
          var hint = _marker.find(".hint");
          _marker.addClass("active");
          if (o2.hint === true && o2.hintAlways !== true) {
            hint.fadeIn(300);
          }
          $3(document).on(Metro2.events.moveAll, function(e) {
            that._move(e);
            that._fireEvent("move", {
              min: that.valueMin,
              max: that.valueMax
            });
          }, { ns: that.id });
          $3(document).on(Metro2.events.stopAll, function() {
            slider.find(".marker").removeClass("active");
            $3(document).off(Metro2.events.moveAll, { ns: that.id });
            $3(document).off(Metro2.events.stopAll, { ns: that.id });
            if (o2.hintAlways !== true) {
              hint.fadeOut(300);
            }
            that._fireEvent("stop", {
              min: that.valueMin,
              max: that.valueMax
            });
          }, { ns: that.id });
          that._fireEvent("start", {
            min: that.valueMin,
            max: that.valueMax
          });
        });
        marker.on(Metro2.events.focus, function() {
          that._fireEvent("focus", {
            min: that.valueMin,
            max: that.valueMax
          });
        });
        marker.on(Metro2.events.blur, function() {
          that._fireEvent("blur", {
            min: that.valueMin,
            max: that.valueMax
          });
        });
        $3(globalThis).on(Metro2.events.resize, function() {
          that.val(that.valueMin, that.valueMax);
        }, { ns: that.id });
      },
      _convert: function(v2, how) {
        var slider = this.slider, o2 = this.options;
        var length = slider.outerWidth() - slider.find(".marker").outerWidth();
        switch (how) {
          case "pix2prc":
            return v2 * 100 / length;
          case "pix2val":
            return this._convert(v2, "pix2prc") * ((o2.max - o2.min) / 100) + o2.min;
          case "val2prc":
            return (v2 - o2.min) / ((o2.max - o2.min) / 100);
          case "prc2pix":
            return v2 / (100 / length);
          case "val2pix":
            return this._convert(this._convert(v2, "val2prc"), "prc2pix");
        }
        return 0;
      },
      _correct: function(value) {
        var res = value;
        var accuracy = this.options.accuracy;
        var min = this.options.min, max = this.options.max;
        var _dec = function(v2) {
          return v2 % 1 === 0 ? 0 : v2.toString().split(".")[1].length;
        };
        if (accuracy === 0 || isNaN(accuracy)) {
          return res;
        }
        res = Math.round(value / accuracy) * accuracy;
        if (res < min) {
          res = min;
        }
        if (res > max) {
          res = max;
        }
        return res.toFixed(_dec(accuracy));
      },
      _move: function(e) {
        var target = this.slider.find(".marker.active");
        var isMin = target.hasClass("marker-min");
        var slider = this.slider;
        var offset = slider.offset(), marker_size = slider.find(".marker").outerWidth(), markerMin = slider.find(".marker-min"), markerMax = slider.find(".marker-max"), length = slider.outerWidth(), cPix, cStart, cStop;
        cPix = Utils.pageXY(e).x - offset.left - marker_size / 2;
        if (isMin) {
          cStart = 0;
          cStop = parseInt(markerMax.css("left")) - marker_size;
        } else {
          cStart = parseInt(markerMin.css("left")) + marker_size;
          cStop = length - marker_size;
        }
        if (cPix < cStart || cPix > cStop) {
          return;
        }
        this[isMin ? "valueMin" : "valueMax"] = this._correct(this._convert(cPix, "pix2val"));
        this._redraw();
      },
      _hint: function() {
        var that = this, o2 = this.options, slider = this.slider, hint = slider.find(".hint");
        hint.each(function() {
          var _hint = $3(this);
          var isMin = _hint.hasClass("hint-min");
          var _mask = isMin ? o2.hintMaskMin : o2.hintMaskMax;
          var value = +(isMin ? that.valueMin : that.valueMax) || 0;
          _hint.text(_mask.replace("$1", value.toFixed(Utils.decCount(o2.accuracy))));
        });
      },
      _value: function() {
        var element2 = this.element, o2 = this.options;
        var v1 = +this.valueMin || 0, v2 = +this.valueMax || 0;
        var value;
        if (o2.roundValue) {
          v1 = v1.toFixed(Utils.decCount(o2.accuracy));
          v2 = v2.toFixed(Utils.decCount(o2.accuracy));
        }
        value = [v1, v2].join(", ");
        if (element2[0].tagName === "INPUT") {
          element2.val(value);
        }
        if (o2.target !== null) {
          var target = $3(o2.target);
          if (target.length !== 0) {
            $3.each(target, function() {
              var t = $3(this);
              if (this.tagName === "INPUT") {
                t.val(value);
              } else {
                t.text(value);
              }
              t.trigger("change");
            });
          }
        }
        this._fireEvent("change-value", {
          val: value
        });
        this._fireEvent("change", {
          val: value
        });
      },
      _marker: function() {
        var slider = this.slider;
        var markerMin = slider.find(".marker-min");
        var markerMax = slider.find(".marker-max");
        var complete = slider.find(".complete");
        var marker_size = parseInt(Utils.getStyleOne(markerMin, "width"));
        var slider_visible = Utils.isVisible(slider);
        if (slider_visible) {
          $3([markerMin, markerMax]).css({
            "margin-top": 0,
            "margin-left": 0
          });
        }
        if (slider_visible) {
          markerMin.css("left", this._convert(this.valueMin, "val2pix"));
          markerMax.css("left", this._convert(this.valueMax, "val2pix"));
        } else {
          markerMin.css({
            "left": this._convert(this.valueMin, "val2prc") + "%",
            "margin-top": this._convert(this.valueMin, "val2prc") === 0 ? 0 : -1 * marker_size / 2
          });
          markerMax.css({
            "left": this._convert(this.valueMax, "val2prc") + "%",
            "margin-top": this._convert(this.valueMax, "val2prc") === 0 ? 0 : -1 * marker_size / 2
          });
        }
        complete.css({
          "left": this._convert(this.valueMin, "val2pix"),
          "width": this._convert(this.valueMax, "val2pix") - this._convert(this.valueMin, "val2pix")
        });
      },
      _redraw: function() {
        this._marker();
        this._value();
        this._hint();
      },
      val: function(vMin, vMax) {
        var o2 = this.options;
        if (!Utils.isValue(vMin) && !Utils.isValue(vMax)) {
          return [this.valueMin, this.valueMax];
        }
        if (vMin < o2.min) vMin = o2.min;
        if (vMax < o2.min) vMax = o2.min;
        if (vMin > o2.max) vMin = o2.max;
        if (vMax > o2.max) vMax = o2.max;
        this.valueMin = this._correct(vMin);
        this.valueMax = this._correct(vMax);
        this._redraw();
      },
      changeValue: function() {
        var element2 = this.element;
        var valMin = +element2.attr("data-value-min");
        var valMax = +element2.attr("data-value-max");
        this.val(valMin, valMax);
      },
      disable: function() {
        var element2 = this.element;
        element2.data("disabled", true);
        element2.parent().addClass("disabled");
      },
      enable: function() {
        var element2 = this.element;
        element2.data("disabled", false);
        element2.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-value-min":
            this.changeValue();
            break;
          case "data-value-max":
            this.changeValue();
            break;
          case "disabled":
            this.toggleState();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, slider = this.slider;
        var marker = slider.find(".marker");
        marker.off(Metro2.events.startAll);
        marker.off(Metro2.events.focus);
        marker.off(Metro2.events.blur);
        marker.off(Metro2.events.keydown);
        marker.off(Metro2.events.keyup);
        slider.off(Metro2.events.click);
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/drag-items/drag-items.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var DragItemsDefaultConfig = {
      dragitemsDeferred: 0,
      target: null,
      dragItem: "li",
      dragMarker: ".drag-item-marker",
      drawDragMarker: false,
      clsDragItemAvatar: "",
      clsDragItem: "",
      canDrag: true,
      onDragStartItem: Metro2.noop,
      onDragMoveItem: Metro2.noop,
      onDragDropItem: Metro2.noop,
      onTarget: Metro2.noop,
      onTargetIn: Metro2.noop,
      //TODO
      onTargetOut: Metro2.noop,
      //TODO
      onDragItemsCreate: Metro2.noop
    };
    Metro2.dragItemsSetup = function(options) {
      DragItemsDefaultConfig = $3.extend({}, DragItemsDefaultConfig, options);
    };
    if (typeof globalThis["metroDragItemsSetup"] !== void 0) {
      Metro2.dragItemsSetup(globalThis["metroDragItemsSetup"]);
    }
    Metro2.Component("drag-items", {
      init: function(options, elem) {
        this._super(elem, options, DragItemsDefaultConfig, {
          id: Utils.elementId("dragItems"),
          canDrag: false
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("drag-items-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("drag-items-target");
        if (o2.drawDragMarker === true) {
          element2.find(o2.dragItem).each(function() {
            $3("<span>").addClass("drag-item-marker").appendTo(this);
          });
        }
        o2.canDrag ? this.on() : this.off();
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var doc = $3.document(), body2 = $3.body();
        var offset, shift2 = { top: 0, left: 0 }, width, height;
        var move = function(e, avatar, dragItem) {
          var x2 = Utils.pageXY(e).x, y2 = Utils.pageXY(e).y;
          var _top = y2 - shift2.top;
          var _left = x2 - shift2.left;
          avatar.css({
            top: _top,
            left: _left
          });
          var target = document.elementsFromPoint(x2, y2).filter(function(el) {
            return $3(el).hasClass("drag-items-target");
          });
          if (target.length === 0) {
            return;
          }
          that._fireEvent("target", {
            target
          });
          var sibling = document.elementsFromPoint(x2, y2).filter(function(el) {
            var $el = $3(el);
            return $3.matches(el, o2.dragItem) && !$el.hasClass("dragged-item-avatar");
          })[0];
          if (!Utils.isValue(sibling)) {
            dragItem.appendTo(target);
          } else {
            var $sibling = $3(sibling);
            var $sibling_offset = $sibling.offset();
            var offsetY = y2 - $sibling_offset.top;
            var offsetX = x2 - $sibling_offset.left;
            var side;
            var dim = { w: $sibling.width(), h: $sibling.height() };
            if (offsetX < dim.w / 3 && (offsetY < dim.h / 2 || offsetY > dim.h / 2)) {
              side = "left";
            } else if (offsetX > dim.w * 2 / 3 && (offsetY < dim.h / 2 || offsetY > dim.h / 2)) {
              side = "right";
            } else if (offsetX > dim.w / 3 && offsetX < dim.w * 2 / 3 && offsetY > dim.h / 2) {
              side = "bottom";
            } else {
              side = "top";
            }
            if (!$sibling.hasClass("dragged-item")) {
              if (side === "top" || side === "left") {
                dragItem.insertBefore($sibling);
              } else {
                dragItem.insertAfter($sibling);
              }
            }
          }
        };
        element2.on(Metro2.events.startAll, o2.drawDragMarker ? o2.dragMarker : o2.dragItem, function(e_start) {
          var dragItem = $3(e_start.target).closest(o2.dragItem);
          var avatar;
          if (Utils.isRightMouse(e_start)) {
            return;
          }
          if (that.canDrag !== true) {
            return;
          }
          dragItem.addClass("dragged-item").addClass(o2.clsDragItem);
          avatar = $3("<div>").addClass("dragged-item-avatar").addClass(o2.clsDragItemAvatar);
          offset = dragItem.offset();
          width = dragItem.width();
          height = dragItem.height();
          shift2.top = Utils.pageXY(e_start).y - offset.top;
          shift2.left = Utils.pageXY(e_start).x - offset.left;
          avatar.css({
            top: offset.top,
            left: offset.left,
            width,
            height
          }).appendTo(body2);
          that._fireEvent("drag-start-item", {
            dragItem: dragItem[0],
            avatar: avatar[0]
          });
          doc.on(Metro2.events.moveAll, function(e_move) {
            move(e_move, avatar, dragItem);
            that._fireEvent("drag-move-item", {
              dragItem: dragItem[0],
              avatar: avatar[0]
            });
            e_move.preventDefault();
          }, { ns: that.id, passive: false });
          doc.on(Metro2.events.stopAll, function() {
            that._fireEvent("drag-drop-item", {
              dragItem: dragItem[0],
              avatar: avatar[0]
            });
            dragItem.removeClass("dragged-item").removeClass(o2.clsDragItem);
            avatar.remove();
            doc.off(Metro2.events.moveAll, { ns: that.id });
            doc.off(Metro2.events.stopAll, { ns: that.id });
          }, { ns: that.id });
          if (o2.drawDragMarker) {
            e_start.preventDefault();
            e_start.stopPropagation();
          }
        });
      },
      on: function() {
        this.canDrag = true;
        this.element.find(".drag-item-marker").show();
      },
      off: function() {
        this.canDrag = false;
        this.element.find(".drag-item-marker").hide();
      },
      toggle: function() {
        this.canDrag = this.canDrag ? this.off() : this.on();
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        var changeCanDrag = function() {
          o2.canDtag = JSON.parse(element2.attr("data-can-drag"));
          o2.canDtag ? that.on() : that.off();
        };
        if (attributeName === "data-can-drag") {
          changeCanDrag();
        }
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        element2.off(Metro2.events.startAll, o2.drawDragMarker ? o2.dragMarker : o2.dragItem);
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/draggable/draggable.js
  (function(Metro2, $3) {
    "use strict";
    let DraggableDefaultConfig = {
      dragContext: null,
      draggableDeferred: 0,
      dragElement: "self",
      dragArea: "parent",
      timeout: 0,
      boundaryRestriction: true,
      onCanDrag: Metro2.noop_true,
      onDragStart: Metro2.noop,
      onDragStop: Metro2.noop,
      onDragMove: Metro2.noop,
      onDraggableCreate: Metro2.noop
    };
    Metro2.draggableSetup = function(options) {
      DraggableDefaultConfig = $3.extend({}, DraggableDefaultConfig, options);
    };
    if (typeof globalThis["metroDraggableSetup"] !== void 0) {
      Metro2.draggableSetup(globalThis["metroDraggableSetup"]);
    }
    Metro2.Component("draggable", {
      init: function(options, elem) {
        this._super(elem, options, DraggableDefaultConfig, {
          drag: false,
          move: false,
          backup: {
            cursor: "default",
            zIndex: "0"
          },
          dragArea: null,
          dragElement: null,
          id: Metro2.utils.elementId("draggable")
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("draggable-create", {
          element: this.element
        });
      },
      _createStructure: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const offset = element2.offset();
        const dragElement = o2.dragElement !== "self" ? element2.find(o2.dragElement) : element2;
        element2.data("canDrag", true);
        this.dragElement = dragElement;
        dragElement[0].ondragstart = function() {
          return false;
        };
        element2.css("position", "absolute");
        if (o2.dragArea === "document" || o2.dragArea === "window") {
          o2.dragArea = "body";
        }
        setTimeout(function() {
          that.dragArea = o2.dragArea === "parent" ? element2.parent() : $3(o2.dragArea);
          if (that.dragArea.css("position") === "static") {
            that.dragArea.css("position", "relative");
          }
          if (o2.dragArea !== "parent") {
            element2.appendTo(that.dragArea);
            element2.css({
              top: offset.top,
              left: offset.left
            });
          }
        });
        if (!element2.attr("id")) {
          element2.attr("id", Metro2.utils.elementId("draggable"));
        }
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const position = {
          x: 0,
          y: 0
        };
        this.dragElement.on(Metro2.events.startAll, function(e) {
          const coord = element2.position(), shiftX = Metro2.utils.pageXY(e).x - coord.left, shiftY = Metro2.utils.pageXY(e).y - coord.top;
          const moveElement = function(e2) {
            let top = Metro2.utils.pageXY(e2).y - shiftY;
            let left = Metro2.utils.pageXY(e2).x - shiftX;
            if (o2.boundaryRestriction) {
              if (top < 0) top = 0;
              if (left < 0) left = 0;
              if (top > that.dragArea.outerHeight() - element2.outerHeight()) top = that.dragArea.outerHeight() - element2.outerHeight();
              if (left > that.dragArea.outerWidth() - element2.outerWidth()) left = that.dragArea.outerWidth() - element2.outerWidth();
            }
            position.y = top;
            position.x = left;
            element2.css({
              left,
              top
            });
            that._fireEvent("drag-move", {
              position,
              context: o2.dragContext
            });
          };
          if (element2.data("canDrag") === false || Metro2.utils.exec(o2.onCanDrag, [element2]) !== true) {
            return;
          }
          if (Metro2.isTouchable === false && e.which !== 1) {
            return;
          }
          that.drag = true;
          element2.addClass("draggable");
          that._fireEvent("drag-start", {
            position,
            context: o2.dragContext
          });
          $3(document).on(Metro2.events.moveAll, moveElement, { ns: that.id, passive: false });
          $3(document).on(Metro2.events.stopAll, function() {
            element2.removeClass("draggable");
            $3(document).off(Metro2.events.moveAll, { ns: that.id });
            $3(document).off(Metro2.events.stopAll, { ns: that.id });
            that.drag = false;
            that.move = false;
            that._fireEvent("drag-stop", {
              position,
              context: o2.dragContext
            });
          }, { ns: that.id });
        });
      },
      off: function() {
        this.element.data("canDrag", false);
      },
      on: function() {
        this.element.data("canDrag", true);
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName, newValue) {
      },
      destroy: function() {
        const element2 = this.element;
        this.dragElement.off(Metro2.events.startAll);
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/eval/eval.js
  (function(Metro2, $3) {
    "use strict";
    let EvalDefaultConfig = {};
    Metro2.evalSetup = function(options) {
      EvalDefaultConfig = $3.extend({}, EvalDefaultConfig, options);
    };
    if (typeof window["metroEvalSetup"] !== void 0) {
      Metro2.evalSetup(window["metroEvalSetup"]);
    }
    Metro2.Component("eval", {
      init: function(options, elem) {
        this._super(elem, options, EvalDefaultConfig, {});
        return this;
      },
      _create: function() {
        const element2 = this.element;
        element2.text(this.eval(element2.text()));
      },
      eval: (str3) => {
        return str3.replace(/{{(.*?)}}/gs, (match, code2) => {
          try {
            const fn_code = code2.includes("return") ? code2 : "return " + code2;
            const fn = new Function(fn_code);
            return fn();
          } catch (error) {
            return match;
          }
        });
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/export/export.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var Export = {
      init: function() {
        return this;
      },
      options: {
        csvDelimiter: "	",
        csvNewLine: "\r\n",
        includeHeader: true
      },
      setup: function(options) {
        this.options = $3.extend({}, this.options, options);
        return this;
      },
      base64: function(data2) {
        return globalThis.btoa(unescape(encodeURIComponent(data2)));
      },
      b64toBlob: function(b64Data, contentType, sliceSize) {
        contentType = contentType || "";
        sliceSize = sliceSize || 512;
        var byteCharacters = globalThis.atob(b64Data);
        var byteArrays = [];
        var offset;
        for (offset = 0; offset < byteCharacters.length; offset += sliceSize) {
          var slice2 = byteCharacters.slice(offset, offset + sliceSize);
          var byteNumbers = new Array(slice2.length);
          var i3;
          for (i3 = 0; i3 < slice2.length; i3 = i3 + 1) {
            byteNumbers[i3] = slice2.charCodeAt(i3);
          }
          var byteArray = new globalThis.Uint8Array(byteNumbers);
          byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, {
          type: contentType
        });
      },
      tableToCSV: function(table2, filename, options) {
        var o2;
        var body2, head2, data2 = "";
        var i3, j2, row, cell;
        o2 = $3.extend({}, this.options, options);
        table2 = $3(table2)[0];
        if (Utils.bool(o2.includeHeader)) {
          head2 = table2.querySelectorAll("thead")[0];
          for (i3 = 0; i3 < head2.rows.length; i3++) {
            row = head2.rows[i3];
            for (j2 = 0; j2 < row.cells.length; j2++) {
              cell = row.cells[j2];
              data2 += (j2 ? o2.csvDelimiter : "") + cell.textContent.trim();
            }
            data2 += o2.csvNewLine;
          }
        }
        body2 = table2.querySelectorAll("tbody")[0];
        for (i3 = 0; i3 < body2.rows.length; i3++) {
          row = body2.rows[i3];
          for (j2 = 0; j2 < row.cells.length; j2++) {
            cell = row.cells[j2];
            data2 += (j2 ? o2.csvDelimiter : "") + cell.textContent.trim();
          }
          data2 += o2.csvNewLine;
        }
        if (Utils.isValue(filename)) {
          return this.createDownload(this.base64("\uFEFF" + data2), "application/csv", filename);
        }
        return data2;
      },
      createDownload: function(data2, contentType, filename) {
        var blob, anchor2, url;
        anchor2 = document.createElement("a");
        anchor2.style.display = "none";
        document.body.appendChild(anchor2);
        blob = this.b64toBlob(data2, contentType);
        url = globalThis.URL.createObjectURL(blob);
        anchor2.href = url;
        anchor2.download = filename || Utils.elementId("download");
        anchor2.click();
        globalThis.URL.revokeObjectURL(url);
        document.body.removeChild(anchor2);
        return true;
      },
      arrayToCsv: function(array, filename, options) {
        var o2, data2 = "", i3, row;
        o2 = $3.extend({}, this.options, options);
        for (i3 = 0; i3 < array.length; i3++) {
          row = array[i3];
          if (typeof row !== "object") {
            data2 += row + o2.csvNewLine;
          } else {
            $3.each(row, function(key, val) {
              data2 += (key ? o2.csvDelimiter : "") + val.toString();
            });
            data2 += o2.csvNewLine;
          }
        }
        if (Utils.isValue(filename)) {
          return this.createDownload(this.base64("\uFEFF" + data2), "application/csv", filename);
        }
        return data2;
      }
    };
    Metro2.export = Export.init();
    if (globalThis.METRO_GLOBAL_COMMON === true) {
      globalThis.Export = Metro2.export;
    }
  })(Metro, Dom);

  // source/components/file/file.js
  (function(Metro2, $3) {
    "use strict";
    var FileDefaultConfig = {
      fileDeferred: 0,
      label: "",
      mode: "input",
      buttonTitle: "",
      filesSelectedTitle: "",
      dropTitle: "",
      dropIcon: "\u{1F4E5}",
      prepend: "",
      clsComponent: "",
      clsPrepend: "",
      clsButton: "",
      clsCaption: "",
      clsLabel: "",
      copyInlineStyles: false,
      onSelect: Metro2.noop,
      onFileCreate: Metro2.noop
    };
    Metro2.fileSetup = function(options) {
      FileDefaultConfig = $3.extend({}, FileDefaultConfig, options);
    };
    if (typeof globalThis["metroFileSetup"] !== void 0) {
      Metro2.fileSetup(globalThis["metroFileSetup"]);
    }
    Metro2.Component("file", {
      init: function(options, elem) {
        this._super(elem, options, FileDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("file-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var container = $3("<label>").addClass((o2.mode === "input" ? " file " : o2.mode === "button" ? " file-button " : " drop-zone ") + element2[0].className).addClass(o2.clsComponent);
        var caption2 = $3("<span>").addClass("caption").addClass(o2.clsCaption);
        var files = $3("<span>").addClass("files").addClass(o2.clsCaption);
        var icon, button2;
        container.insertBefore(element2);
        element2.appendTo(container);
        if (o2.mode.includes("drop")) {
          icon = $3("<span>").addClass("icon").html(o2.dropIcon).appendTo(container);
          caption2.html(o2.dropTitle || this.strings.label_drop_file).insertAfter(icon);
          files.html((o2.filesSelectedTitle || this.strings.label_files_selected).replace("{n}", 0)).insertAfter(caption2);
          button2 = $3("<button>").addClass("button clear-button square").html("\u274C").appendTo(container);
        } else {
          caption2.insertBefore(element2);
          button2 = $3("<button>").addClass("button select-files-button").attr("tabindex", -1).html(o2.buttonTitle || this.strings.label_choose_file);
          button2.appendTo(container);
          button2.addClass(o2.clsButton);
          if (element2.attr("dir") === "rtl") {
            container.addClass("rtl");
          }
          if (o2.prepend !== "") {
            var prepend2 = $3("<div>").html(o2.prepend);
            prepend2.addClass("prepend").addClass(o2.clsPrepend).appendTo(container);
          }
        }
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          for (var i3 = 0, l2 = element2[0].style.length; i3 < l2; i3++) {
            container.css(element2[0].style[i3], element2.css(element2[0].style[i3]));
          }
        }
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(container);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var container = element2.closest("label");
        var caption2 = container.find(".caption");
        var files = container.find(".files");
        var form2 = element2.closest("form");
        if (form2.length) {
          form2.on("reset", function() {
            that.clear();
          });
        }
        container.on(Metro2.events.click, ".select-files-button", function() {
          element2[0].click();
        });
        container.on(Metro2.events.click, ".clear-button", function() {
          that.clear();
        });
        element2.on(Metro2.events.change, function() {
          var fi = this;
          var file_names = [];
          var entry;
          Array.from(fi.files).forEach(function(file) {
            file_names.push(file.name);
          });
          if (o2.mode === "input") {
            entry = file_names.join(", ");
            caption2.html(entry);
            caption2.attr("title", entry);
          } else {
            files.html((o2.filesSelectedTitle || that.strings.label_files_selected).replace("{n}", element2[0].files.length));
          }
          that._fireEvent("select", {
            files: fi.files
          });
        });
        element2.on(Metro2.events.focus, function() {
          container.addClass("focused");
        });
        element2.on(Metro2.events.blur, function() {
          container.removeClass("focused");
        });
        if (o2.mode !== "input") {
          container.on("drag dragstart dragend dragover dragenter dragleave drop", function(e) {
            e.preventDefault();
          });
          container.on("dragenter dragover", function() {
            container.addClass("drop-on");
          });
          container.on("dragleave", function() {
            container.removeClass("drop-on");
          });
          container.on("drop", function(e) {
            element2[0].files = e.dataTransfer.files;
            files.html((o2.filesSelectedTitle || that.strings.label_files_selected).replace("{n}", element2[0].files.length));
            container.removeClass("drop-on");
            element2.trigger("change");
          });
        }
      },
      clear: function() {
        var element2 = this.element, o2 = this.options;
        if (o2.mode === "input") {
          element2.siblings(".caption").html("");
        } else {
          element2.siblings(".files").html((o2.filesSelectedTitle || this.strings.label_files_selected).replace("{n}", 0));
        }
        element2[0].value = "";
        element2.trigger("change");
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      toggleDir: function() {
        if (this.element.attr("dir") === "rtl") {
          this.element.parent().addClass("rtl");
        } else {
          this.element.parent().removeClass("rtl");
        }
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "disabled":
            this.toggleState();
            break;
          case "dir":
            this.toggleDir();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var parent2 = element2.parent();
        element2.off(Metro2.events.change);
        parent2.off(Metro2.events.click, "button");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/gradient-box/gradient-box.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var GradientBoxDefaultConfig = {
      gradientType: "linear",
      // linear, radial
      gradientShape: "",
      gradientPosition: "",
      gradientSize: "",
      gradientColors: "#000, #fff",
      gradientRepeat: false,
      onGradientBoxCreate: Metro2.noop
    };
    Metro2.gradientBoxSetup = function(options) {
      GradientBoxDefaultConfig = $3.extend(
        {},
        GradientBoxDefaultConfig,
        options
      );
    };
    if (typeof globalThis["metroGradientBoxSetup"] !== void 0) {
      Metro2.gradientBoxSetup(globalThis["metroGradientBoxSetup"]);
    }
    Metro2.Component("gradient-box", {
      init: function(options, elem) {
        this._super(elem, options, GradientBoxDefaultConfig, {
          // define instance vars here
          colors: [],
          shape: "",
          size: "",
          position: "",
          type: "linear",
          func: "linear-gradient",
          repeat: false
        });
        return this;
      },
      _create: function() {
        var o2 = this.options;
        this.colors = o2.gradientColors.toArray(",");
        this.type = o2.gradientType.toLowerCase();
        this.shape = o2.gradientShape.toLowerCase();
        this.size = o2.gradientSize.toLowerCase();
        this.repeat = o2.gradientRepeat;
        this.func = (this.repeat ? "repeating-" : "") + this.type + "-gradient";
        if (this.type === "linear") {
          if (!o2.gradientPosition) {
            this.position = "to bottom";
          } else {
            this.position = isNaN(o2.gradientPosition) === false ? o2.gradientPosition + "deg" : o2.gradientPosition;
            if (this.position.indexOf("deg") === -1 && this.position.indexOf("to ") === -1) {
              this.position = "to " + this.position;
            }
          }
        } else {
          this.position = o2.gradientPosition.toLowerCase();
          if (this.position && this.position.indexOf("at ") === -1) {
            this.position = "at " + this.position;
          }
        }
        this._createStructure();
        this._setGradient();
        this._fireEvent("gradient-box-create");
      },
      _createStructure: function() {
        this.element.addClass("gradient-box");
      },
      _setGradient: function() {
        var element2 = this.element;
        var gradientRule, gradientOptions = [];
        if (this.type === "radial" && this.shape) {
          gradientOptions.push(this.shape);
        }
        if (this.type === "radial" && this.size) {
          gradientOptions.push(this.size);
        }
        if (this.position) {
        }
        gradientRule = this.func + "(" + (gradientOptions.length ? gradientOptions.join(" ") + ", " : "") + this.colors.join(", ") + ")";
        element2.css({
          background: gradientRule
        });
      },
      changeAttribute: function(attr, newValue) {
        if (attr.indexOf("data-gradient-") === -1) {
          return;
        }
        switch (attr) {
          case "data-gradient-type":
            this.type = newValue;
            this.func = newValue.toLowerCase() + "-gradient";
            break;
          case "data-gradient-colors-css":
            this.colors = newValue ? newValue.toArray(",") : ["#fff", "#000"];
            break;
          case "data-gradient-shape":
            this.shape = newValue.toLowerCase();
            break;
          case "data-gradient-size":
            this.size = newValue.toLowerCase();
            break;
          case "data-gradient-position":
            this.position = newValue.toLowerCase();
            break;
          case "data-gradient-repeat":
            this.repeat = Utils.bool(newValue);
            break;
        }
        this._setGradient();
      },
      destroy: function() {
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/md5/md5.js
  (function(Metro2) {
    "use strict";
    Metro2.md5 = function(string) {
      function RotateLeft(lValue, iShiftBits) {
        return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
      }
      function AddUnsigned(lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = lX & 2147483648;
        lY8 = lY & 2147483648;
        lX4 = lX & 1073741824;
        lY4 = lY & 1073741824;
        lResult = (lX & 1073741823) + (lY & 1073741823);
        if (lX4 & lY4) {
          return lResult ^ 2147483648 ^ lX8 ^ lY8;
        }
        if (lX4 | lY4) {
          if (lResult & 1073741824) {
            return lResult ^ 3221225472 ^ lX8 ^ lY8;
          } else {
            return lResult ^ 1073741824 ^ lX8 ^ lY8;
          }
        } else {
          return lResult ^ lX8 ^ lY8;
        }
      }
      function F2(x3, y2, z2) {
        return x3 & y2 | ~x3 & z2;
      }
      function G3(x3, y2, z2) {
        return x3 & z2 | y2 & ~z2;
      }
      function H2(x3, y2, z2) {
        return x3 ^ y2 ^ z2;
      }
      function I2(x3, y2, z2) {
        return y2 ^ (x3 | ~z2);
      }
      function FF(a3, b3, c2, d3, x3, s2, ac) {
        a3 = AddUnsigned(a3, AddUnsigned(AddUnsigned(F2(b3, c2, d3), x3), ac));
        return AddUnsigned(RotateLeft(a3, s2), b3);
      }
      function GG(a3, b3, c2, d3, x3, s2, ac) {
        a3 = AddUnsigned(a3, AddUnsigned(AddUnsigned(G3(b3, c2, d3), x3), ac));
        return AddUnsigned(RotateLeft(a3, s2), b3);
      }
      function HH(a3, b3, c2, d3, x3, s2, ac) {
        a3 = AddUnsigned(a3, AddUnsigned(AddUnsigned(H2(b3, c2, d3), x3), ac));
        return AddUnsigned(RotateLeft(a3, s2), b3);
      }
      function II(a3, b3, c2, d3, x3, s2, ac) {
        a3 = AddUnsigned(a3, AddUnsigned(AddUnsigned(I2(b3, c2, d3), x3), ac));
        return AddUnsigned(RotateLeft(a3, s2), b3);
      }
      function ConvertToWordArray(string2) {
        var lWordCount;
        var lMessageLength = string2.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while (lByteCount < lMessageLength) {
          lWordCount = (lByteCount - lByteCount % 4) / 4;
          lBytePosition = lByteCount % 4 * 8;
          lWordArray[lWordCount] = lWordArray[lWordCount] | string2.charCodeAt(lByteCount) << lBytePosition;
          lByteCount++;
        }
        lWordCount = (lByteCount - lByteCount % 4) / 4;
        lBytePosition = lByteCount % 4 * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | 128 << lBytePosition;
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
      }
      function WordToHex(lValue) {
        var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
          lByte = lValue >>> lCount * 8 & 255;
          WordToHexValue_temp = "0" + lByte.toString(16);
          WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
        }
        return WordToHexValue;
      }
      function Utf8Encode(string2) {
        string2 = string2.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n2 = 0; n2 < string2.length; n2++) {
          var c2 = string2.charCodeAt(n2);
          if (c2 < 128) {
            utftext += String.fromCharCode(c2);
          } else if (c2 > 127 && c2 < 2048) {
            utftext += String.fromCharCode(c2 >> 6 | 192);
            utftext += String.fromCharCode(c2 & 63 | 128);
          } else {
            utftext += String.fromCharCode(c2 >> 12 | 224);
            utftext += String.fromCharCode(c2 >> 6 & 63 | 128);
            utftext += String.fromCharCode(c2 & 63 | 128);
          }
        }
        return utftext;
      }
      var x2 = [];
      var k2, AA, BB, CC, DD, a2, b2, c, d2;
      var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
      var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
      var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
      var S41 = 6, S42 = 10, S43 = 15, S44 = 21;
      string = Utf8Encode(string);
      x2 = ConvertToWordArray(string);
      a2 = 1732584193;
      b2 = 4023233417;
      c = 2562383102;
      d2 = 271733878;
      for (k2 = 0; k2 < x2.length; k2 += 16) {
        AA = a2;
        BB = b2;
        CC = c;
        DD = d2;
        a2 = FF(a2, b2, c, d2, x2[k2], S11, 3614090360);
        d2 = FF(d2, a2, b2, c, x2[k2 + 1], S12, 3905402710);
        c = FF(c, d2, a2, b2, x2[k2 + 2], S13, 606105819);
        b2 = FF(b2, c, d2, a2, x2[k2 + 3], S14, 3250441966);
        a2 = FF(a2, b2, c, d2, x2[k2 + 4], S11, 4118548399);
        d2 = FF(d2, a2, b2, c, x2[k2 + 5], S12, 1200080426);
        c = FF(c, d2, a2, b2, x2[k2 + 6], S13, 2821735955);
        b2 = FF(b2, c, d2, a2, x2[k2 + 7], S14, 4249261313);
        a2 = FF(a2, b2, c, d2, x2[k2 + 8], S11, 1770035416);
        d2 = FF(d2, a2, b2, c, x2[k2 + 9], S12, 2336552879);
        c = FF(c, d2, a2, b2, x2[k2 + 10], S13, 4294925233);
        b2 = FF(b2, c, d2, a2, x2[k2 + 11], S14, 2304563134);
        a2 = FF(a2, b2, c, d2, x2[k2 + 12], S11, 1804603682);
        d2 = FF(d2, a2, b2, c, x2[k2 + 13], S12, 4254626195);
        c = FF(c, d2, a2, b2, x2[k2 + 14], S13, 2792965006);
        b2 = FF(b2, c, d2, a2, x2[k2 + 15], S14, 1236535329);
        a2 = GG(a2, b2, c, d2, x2[k2 + 1], S21, 4129170786);
        d2 = GG(d2, a2, b2, c, x2[k2 + 6], S22, 3225465664);
        c = GG(c, d2, a2, b2, x2[k2 + 11], S23, 643717713);
        b2 = GG(b2, c, d2, a2, x2[k2], S24, 3921069994);
        a2 = GG(a2, b2, c, d2, x2[k2 + 5], S21, 3593408605);
        d2 = GG(d2, a2, b2, c, x2[k2 + 10], S22, 38016083);
        c = GG(c, d2, a2, b2, x2[k2 + 15], S23, 3634488961);
        b2 = GG(b2, c, d2, a2, x2[k2 + 4], S24, 3889429448);
        a2 = GG(a2, b2, c, d2, x2[k2 + 9], S21, 568446438);
        d2 = GG(d2, a2, b2, c, x2[k2 + 14], S22, 3275163606);
        c = GG(c, d2, a2, b2, x2[k2 + 3], S23, 4107603335);
        b2 = GG(b2, c, d2, a2, x2[k2 + 8], S24, 1163531501);
        a2 = GG(a2, b2, c, d2, x2[k2 + 13], S21, 2850285829);
        d2 = GG(d2, a2, b2, c, x2[k2 + 2], S22, 4243563512);
        c = GG(c, d2, a2, b2, x2[k2 + 7], S23, 1735328473);
        b2 = GG(b2, c, d2, a2, x2[k2 + 12], S24, 2368359562);
        a2 = HH(a2, b2, c, d2, x2[k2 + 5], S31, 4294588738);
        d2 = HH(d2, a2, b2, c, x2[k2 + 8], S32, 2272392833);
        c = HH(c, d2, a2, b2, x2[k2 + 11], S33, 1839030562);
        b2 = HH(b2, c, d2, a2, x2[k2 + 14], S34, 4259657740);
        a2 = HH(a2, b2, c, d2, x2[k2 + 1], S31, 2763975236);
        d2 = HH(d2, a2, b2, c, x2[k2 + 4], S32, 1272893353);
        c = HH(c, d2, a2, b2, x2[k2 + 7], S33, 4139469664);
        b2 = HH(b2, c, d2, a2, x2[k2 + 10], S34, 3200236656);
        a2 = HH(a2, b2, c, d2, x2[k2 + 13], S31, 681279174);
        d2 = HH(d2, a2, b2, c, x2[k2], S32, 3936430074);
        c = HH(c, d2, a2, b2, x2[k2 + 3], S33, 3572445317);
        b2 = HH(b2, c, d2, a2, x2[k2 + 6], S34, 76029189);
        a2 = HH(a2, b2, c, d2, x2[k2 + 9], S31, 3654602809);
        d2 = HH(d2, a2, b2, c, x2[k2 + 12], S32, 3873151461);
        c = HH(c, d2, a2, b2, x2[k2 + 15], S33, 530742520);
        b2 = HH(b2, c, d2, a2, x2[k2 + 2], S34, 3299628645);
        a2 = II(a2, b2, c, d2, x2[k2], S41, 4096336452);
        d2 = II(d2, a2, b2, c, x2[k2 + 7], S42, 1126891415);
        c = II(c, d2, a2, b2, x2[k2 + 14], S43, 2878612391);
        b2 = II(b2, c, d2, a2, x2[k2 + 5], S44, 4237533241);
        a2 = II(a2, b2, c, d2, x2[k2 + 12], S41, 1700485571);
        d2 = II(d2, a2, b2, c, x2[k2 + 3], S42, 2399980690);
        c = II(c, d2, a2, b2, x2[k2 + 10], S43, 4293915773);
        b2 = II(b2, c, d2, a2, x2[k2 + 1], S44, 2240044497);
        a2 = II(a2, b2, c, d2, x2[k2 + 8], S41, 1873313359);
        d2 = II(d2, a2, b2, c, x2[k2 + 15], S42, 4264355552);
        c = II(c, d2, a2, b2, x2[k2 + 6], S43, 2734768916);
        b2 = II(b2, c, d2, a2, x2[k2 + 13], S44, 1309151649);
        a2 = II(a2, b2, c, d2, x2[k2 + 4], S41, 4149444226);
        d2 = II(d2, a2, b2, c, x2[k2 + 11], S42, 3174756917);
        c = II(c, d2, a2, b2, x2[k2 + 2], S43, 718787259);
        b2 = II(b2, c, d2, a2, x2[k2 + 9], S44, 3951481745);
        a2 = AddUnsigned(a2, AA);
        b2 = AddUnsigned(b2, BB);
        c = AddUnsigned(c, CC);
        d2 = AddUnsigned(d2, DD);
      }
      var temp = WordToHex(a2) + WordToHex(b2) + WordToHex(c) + WordToHex(d2);
      return temp.toLowerCase();
    };
    if (globalThis.METRO_GLOBAL_COMMON === true) {
      globalThis.md5 = Metro2.md5;
    }
  })(Metro, Dom);

  // source/components/gravatar/gravatar.js
  (function(Metro2, $3) {
    "use strict";
    var GravatarDefaultConfig = {
      gravatarDeferred: 0,
      email: "",
      size: 80,
      default: "mp",
      onGravatarCreate: Metro2.noop
    };
    Metro2.gravatarSetup = function(options) {
      GravatarDefaultConfig = $3.extend({}, GravatarDefaultConfig, options);
    };
    if (typeof globalThis["metroGravatarSetup"] !== void 0) {
      Metro2.gravatarSetup(globalThis["metroGravatarSetup"]);
    }
    Metro2.Component("gravatar", {
      init: function(options, elem) {
        this._super(elem, options, GravatarDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this.get();
        this._fireEvent("gravatar-create", {
          element: element2
        });
      },
      getImage: function(email, size, def, is_object) {
        var image = $3("<img>").attr("alt", email);
        image.attr("src", this.getImageSrc(email, size));
        return is_object === true ? image : image[0];
      },
      getImageSrc: function(email, size, def) {
        if (email === void 0 || email.trim() === "") {
          return "";
        }
        size = size || 80;
        def = Metro2.utils.encodeURI(def) || "404";
        return "//www.gravatar.com/avatar/" + Metro2.md5(email.toLowerCase().trim()) + "?size=" + size + "&d=" + def;
      },
      get: function() {
        var element2 = this.element, o2 = this.options;
        var img2 = element2[0].tagName === "IMG" ? element2 : element2.find("img");
        if (img2.length === 0) {
          return;
        }
        img2.attr("src", this.getImageSrc(o2.email, o2.size, o2.default));
        return this;
      },
      resize: function(new_size) {
        this.options.size = new_size !== void 0 ? new_size : this.element.attr("data-size");
        this.get();
      },
      email: function(new_email) {
        this.options.email = new_email !== void 0 ? new_email : this.element.attr("data-email");
        this.get();
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-size":
            this.resize();
            break;
          case "data-email":
            this.email();
            break;
        }
      },
      destroy: function() {
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/hint/hint.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var HintDefaultConfig = {
      hintDeferred: 0,
      hintHide: 5e3,
      clsHint: "",
      hintText: "",
      hintPosition: Metro2.position.TOP,
      hintOffset: 4,
      onHintShow: Metro2.noop,
      onHintHide: Metro2.noop,
      onHintCreate: Metro2.noop
    };
    Metro2.hintSetup = function(options) {
      HintDefaultConfig = $3.extend({}, HintDefaultConfig, options);
    };
    if (typeof globalThis["metroHintSetup"] !== void 0) {
      Metro2.hintSetup(globalThis["metroHintSetup"]);
    }
    Metro2.Component("hint", {
      init: function(options, elem) {
        this._super(elem, options, HintDefaultConfig, {
          hint: null,
          hint_size: {
            width: 0,
            height: 0
          },
          id: Utils.elementId("hint")
        });
        return this;
      },
      _create: function() {
        this._createEvents();
        this._fireEvent("hint-create", {
          element: this.element
        });
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var over = false;
        element2.on(Metro2.events.enter, function() {
          over = true;
          setTimeout(function() {
            if (!over) return;
            that.createHint();
            if (+o2.hintHide > 0) {
              setTimeout(function() {
                that.removeHint();
              }, o2.hintHide);
            }
          }, o2.hintDeferred);
        });
        element2.on(Metro2.events.leave, function() {
          over = false;
          that.removeHint();
        });
        $3(globalThis).on(Metro2.events.scroll + " " + Metro2.events.resize, function() {
          if (that.hint !== null) that.setPosition();
        }, { ns: this.id });
      },
      createHint: function() {
        var elem = this.elem, element2 = this.element, o2 = this.options;
        var hint = $3("<div>").addClass("hint").addClass(o2.clsHint).html(o2.hintText);
        this.hint = hint;
        this.hint_size = Utils.hiddenElementSize(hint);
        $3(".hint:not(.permanent-hint)").remove();
        if (elem.tagName === "TD" || elem.tagName === "TH") {
          var wrp = $3("<div/>").css("display", "inline-block").html(element2.html());
          element2.html(wrp);
          this.element = wrp;
        }
        this.setPosition();
        hint.appendTo($3("body"));
        this._fireEvent("hint-show", {
          hint: hint[0]
        });
      },
      setPosition: function() {
        var hint = this.hint, hint_size = this.hint_size, o2 = this.options, element2 = this.element;
        if (o2.hintPosition === Metro2.position.BOTTOM) {
          hint.addClass("bottom");
          hint.css({
            top: element2.offset().top - $3(globalThis).scrollTop() + element2.outerHeight() + o2.hintOffset,
            left: element2.offset().left + element2.outerWidth() / 2 - hint_size.width / 2 - $3(globalThis).scrollLeft()
          });
        } else if (o2.hintPosition === Metro2.position.RIGHT) {
          hint.addClass("right");
          hint.css({
            top: element2.offset().top + element2.outerHeight() / 2 - hint_size.height / 2 - $3(globalThis).scrollTop(),
            left: element2.offset().left + element2.outerWidth() - $3(globalThis).scrollLeft() + o2.hintOffset
          });
        } else if (o2.hintPosition === Metro2.position.LEFT) {
          hint.addClass("left");
          hint.css({
            top: element2.offset().top + element2.outerHeight() / 2 - hint_size.height / 2 - $3(globalThis).scrollTop(),
            left: element2.offset().left - hint_size.width - $3(globalThis).scrollLeft() - o2.hintOffset
          });
        } else {
          hint.addClass("top");
          hint.css({
            top: element2.offset().top - $3(globalThis).scrollTop() - hint_size.height - o2.hintOffset,
            left: element2.offset().left - $3(globalThis).scrollLeft() + element2.outerWidth() / 2 - hint_size.width / 2
          });
        }
      },
      removeHint: function() {
        var that = this;
        var hint = this.hint;
        var options = this.options;
        var timeout = options.onHintHide === Metro2.noop ? 0 : 300;
        if (hint !== null) {
          this._fireEvent("hint-hide", {
            hint: hint[0]
          });
          setTimeout(function() {
            hint.hide(0, function() {
              hint.remove();
              that.hint = null;
            });
          }, timeout);
        }
      },
      changeText: function() {
        this.options.hintText = this.element.attr("data-hint-text");
      },
      changeAttribute: function(attributeName) {
        if (attributeName === "data-hint-text") {
          this.changeText();
        }
      },
      destroy: function() {
        var element2 = this.element;
        this.removeHint();
        element2.off(Metro2.events.enter + "-hint");
        element2.off(Metro2.events.leave + "-hint");
        $3(globalThis).off(Metro2.events.scroll + "-hint");
      }
    });
  })(Metro, Dom);

  // source/components/hotkey/hotkey.js
  (function(Metro2, $3) {
    "use strict";
    const Hotkey = {
      specialKeys: {
        8: "backspace",
        9: "tab",
        13: "return",
        16: "shift",
        17: "ctrl",
        18: "alt",
        19: "pause",
        20: "capslock",
        27: "esc",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        45: "insert",
        46: "del",
        96: "0",
        97: "1",
        98: "2",
        99: "3",
        100: "4",
        101: "5",
        102: "6",
        103: "7",
        104: "8",
        105: "9",
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        112: "f1",
        113: "f2",
        114: "f3",
        115: "f4",
        116: "f5",
        117: "f6",
        118: "f7",
        119: "f8",
        120: "f9",
        121: "f10",
        122: "f11",
        123: "f12",
        144: "numlock",
        145: "scroll",
        188: ",",
        190: ".",
        191: "/",
        224: "meta"
      },
      shiftNums: {
        "~": "`",
        "!": "1",
        "@": "2",
        "#": "3",
        "$": "4",
        "%": "5",
        "^": "6",
        "&": "7",
        "*": "8",
        "(": "9",
        ")": "0",
        "_": "-",
        "+": "=",
        ":": ";",
        '"': "'",
        "<": ",",
        ">": ".",
        "?": "/",
        "|": "\\"
      },
      shiftNumsInverse: {
        "`": "~",
        "1": "!",
        "2": "@",
        "3": "#",
        "4": "$",
        "5": "%",
        "6": "^",
        "7": "&",
        "8": "*",
        "9": "(",
        "0": ")",
        "-": "_",
        "=": "+",
        ";": ": ",
        "'": '"',
        ",": "<",
        ".": ">",
        "/": "?",
        "\\": "|"
      },
      textAcceptingInputTypes: [
        "text",
        "password",
        "number",
        "email",
        "url",
        "range",
        "date",
        "month",
        "week",
        "time",
        "datetime",
        "datetime-local",
        "search",
        "color",
        "tel"
      ],
      getKey: function(e) {
        let key, k2 = e.keyCode, char = String.fromCharCode(k2).toLowerCase();
        if (e.shiftKey) {
          key = Hotkey.shiftNums[char] ? Hotkey.shiftNums[char] : char;
        } else {
          key = Hotkey.specialKeys[k2] === void 0 ? char : Hotkey.specialKeys[k2];
        }
        return Hotkey.getModifier(e).length ? Hotkey.getModifier(e).join("+") + "+" + key : key;
      },
      getModifier: function(e) {
        const m2 = [];
        if (e.altKey) {
          m2.push("alt");
        }
        if (e.ctrlKey || e.metaKey) {
          m2.push("ctrl");
        }
        if (e.shiftKey) {
          m2.push("shift");
        }
        return m2;
      }
    };
    function bindKey(key, fn) {
      return this.each(function() {
        $3(this).on(Metro2.events.keydown + ".hotkey-method-" + key, function(e) {
          if (e.repeat) return;
          const _key = Hotkey.getKey(e);
          const el = $3(this);
          const href = "" + el.attr("href");
          if (key !== _key) {
            return;
          }
          if (el.is("a")) {
            if (href && href.trim() !== "#") {
              globalThis.location.href = href;
            }
          }
          Metro2.utils.exec(fn, [e, _key, key], this);
        });
      });
    }
    $3.fn.hotkey = bindKey;
    if (globalThis["METRO_JQUERY"] && globalThis["jquery_present"]) {
      jQuery.fn.hotkey = bindKey;
    }
    $3(document).on(Metro2.events.keydown + ".hotkey-data", function(e) {
      let el, fn, key, href;
      if (METRO_HOTKEYS_FILTER_INPUT_ACCEPTING_ELEMENTS && /textarea|input|select/i.test(e.target.nodeName) || METRO_HOTKEYS_FILTER_CONTENT_EDITABLE && $3(e.target).attr("contenteditable") || METRO_HOTKEYS_FILTER_TEXT_INPUTS && Hotkey.textAcceptingInputTypes.indexOf(e.target.type) > -1) {
        return;
      }
      key = Hotkey.getKey(e);
      if (Metro2.utils.keyInObject(Metro2.hotkeys, key)) {
        el = $3(Metro2.hotkeys[key][0]);
        fn = Metro2.hotkeys[key][1];
        href = ("" + el.attr("href")).trim();
        if (e.repeat && !el.attr("data-repeat")) {
          return;
        }
        e.preventDefault();
        if (fn) {
          Metro2.utils.exec(fn);
        } else {
          if (el.is("a") && href && href.length > 0 && href.trim() !== "#") {
            globalThis.location.href = href;
          } else {
            el[0].click();
          }
        }
      }
    });
  })(Metro, Dom);

  // source/components/html-container/html-container.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var HtmlContainerDefaultConfig = {
      htmlcontainerDeferred: 0,
      method: "get",
      htmlSource: null,
      requestData: null,
      requestOptions: null,
      insertMode: "default",
      // replace, append, prepend
      onHtmlLoad: Metro2.noop,
      onHtmlLoadFail: Metro2.noop,
      onHtmlLoadDone: Metro2.noop,
      onHtmlContainerCreate: Metro2.noop
    };
    Metro2.htmlContainerSetup = function(options) {
      HtmlContainerDefaultConfig = $3.extend({}, HtmlContainerDefaultConfig, options);
    };
    if (typeof globalThis["metroHtmlContainerSetup"] !== void 0) {
      Metro2.htmlContainerSetup(globalThis["metroHtmlContainerSetup"]);
    }
    Metro2.Component("html-container", {
      init: function(options, elem) {
        this._super(elem, options, HtmlContainerDefaultConfig, {
          data: null,
          opt: {},
          htmlSource: ""
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        if (typeof o2.requestData === "string") {
          o2.requestData = JSON.parse(o2.requestData);
        }
        if (Utils.isObject(o2.requestData)) {
          this.data = Utils.isObject(o2.requestData);
        }
        if (typeof o2.requestOptions === "string") {
          o2.requestOptions = JSON.parse(o2.requestOptions);
        }
        if (Utils.isObject(o2.requestOptions)) {
          this.opt = Utils.isObject(o2.requestOptions);
        }
        o2.method = o2.method.toUpperCase();
        if (Utils.isValue(o2.htmlSource)) {
          this.htmlSource = o2.htmlSource;
          this._load();
        }
        this._fireEvent("html-container-create", {
          element: element2
        });
      },
      _load: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var fetchData = {
          method: o2.method
        };
        if (this.data) fetchData["body"] = this.data;
        if (this.opt) fetchData["headers"] = this.opt;
        fetch(this.htmlSource, fetchData).then(Metro2.fetch.status).then(Metro2.fetch.text).then(function(data2) {
          var _data = $3(data2);
          if (_data.length === 0) {
            _data = $3("<div>").html(data2);
          }
          switch (o2.insertMode.toLowerCase()) {
            case "prepend":
              element2.prepend(_data);
              break;
            case "append":
              element2.append(_data);
              break;
            case "replace":
              _data.insertBefore(element2).script();
              element2.remove();
              break;
            default: {
              element2.html(_data);
            }
          }
          that._fireEvent("html-load", {
            data: data2,
            source: o2.htmlSource,
            requestData: that.data,
            requestOptions: that.opt
          });
        }).catch(function(error) {
          that._fireEvent("html-load-fail", {
            error
          });
        });
      },
      load: function(source2, data2, opt2) {
        if (source2) {
          this.htmlSource = source2;
        }
        if (data2) {
          this.data = Utils.isObject(data2);
        }
        if (opt2) {
          this.opt = Utils.isObject(opt2);
        }
        this._load();
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        var changeHTMLSource = function() {
          var html2 = element2.attr("data-html-source");
          if (Utils.isNull(html2)) {
            return;
          }
          if (html2.trim() === "") {
            element2.html("");
          }
          o2.htmlSource = html2;
          that._load();
        };
        var changeInsertMode = function() {
          var attr = element2.attr("data-insert-mode");
          if (Utils.isValue(attr)) {
            o2.insertMode = attr;
          }
        };
        var changeRequestData = function() {
          var data2 = element2.attr("data-request-data");
          that.load(o2.htmlSource, data2);
        };
        switch (attributeName) {
          case "data-html-source":
            changeHTMLSource();
            break;
          case "data-insert-mode":
            changeInsertMode();
            break;
          case "data-request-data":
            changeRequestData();
            break;
        }
      },
      destroy: function() {
      }
    });
  })(Metro, Dom);

  // source/components/image-box/image-box.js
  (function(Metro2, $3) {
    "use strict";
    var ImageBoxDefaultConfig = {
      image: null,
      size: "cover",
      repeat: false,
      color: "transparent",
      attachment: "scroll",
      origin: "border",
      onImageBoxCreate: Metro2.noop
    };
    Metro2.imageBoxSetup = function(options) {
      ImageBoxDefaultConfig = $3.extend({}, ImageBoxDefaultConfig, options);
    };
    if (typeof globalThis["metroImageBoxSetup"] !== void 0) {
      Metro2.imageBoxSetup(globalThis["metroImageBoxSetup"]);
    }
    Metro2.Component("image-box", {
      init: function(options, elem) {
        this._super(elem, options, ImageBoxDefaultConfig, {
          // define instance vars here
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._fireEvent("image-box-create");
      },
      _createStructure: function() {
        var element2 = this.element;
        element2.addClass("image-box");
        this._drawImage();
      },
      _drawImage: function() {
        var element2 = this.element, o2 = this.options;
        var image = new Image();
        var portrait;
        if (!element2.attr("data-original"))
          element2.attr("data-original", o2.image);
        element2.css({
          backgroundImage: "url(" + o2.image + ")",
          backgroundSize: o2.size,
          backgroundRepeat: o2.repeat ? "repeat" : "no-repeat",
          backgroundColor: o2.color,
          backgroundAttachment: o2.attachment,
          backgroundOrigin: o2.origin
        });
        image.src = o2.image;
        image.onload = function() {
          portrait = this.height >= this.width;
          element2.removeClass("image-box__portrait image-box__landscape").addClass("image-box__" + (portrait ? "portrait" : "landscape"));
        };
      },
      changeAttribute: function(attr, newValue) {
        var attrName = attr.replace("data-", "");
        if (["image", "size", "repeat", "color", "attachment", "origin"].indexOf(attrName) > -1) {
          this.options[attrName] = newValue;
          this._drawImage();
        }
      },
      destroy: function() {
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/image-compare/image-compare.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ImageCompareDefaultConfig = {
      imagecompareDeferred: 0,
      width: "100%",
      height: "auto",
      onSliderMove: Metro2.noop,
      onImageCompareCreate: Metro2.noop
    };
    Metro2.imageCompareSetup = function(options) {
      ImageCompareDefaultConfig = $3.extend({}, ImageCompareDefaultConfig, options);
    };
    if (typeof globalThis["metroImageCompareSetup"] !== void 0) {
      Metro2.imageCompareSetup(globalThis["metroImageCompareSetup"]);
    }
    Metro2.Component("image-compare", {
      init: function(options, elem) {
        this._super(elem, options, ImageCompareDefaultConfig, {
          id: Utils.elementId("image-compare")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("image-compare-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var container, container_overlay, slider;
        var images, element_width, element_height;
        if (!Utils.isValue(element2.attr("id"))) {
          element2.attr("id", Utils.elementId("image-compare"));
        }
        element2.addClass("image-compare").css({
          width: o2.width
        });
        element_width = element2.width();
        switch (o2.height) {
          case "16/9":
            element_height = Utils.aspectRatioH(element_width, o2.height);
            break;
          case "21/9":
            element_height = Utils.aspectRatioH(element_width, o2.height);
            break;
          case "4/3":
            element_height = Utils.aspectRatioH(element_width, o2.height);
            break;
          case "auto":
            element_height = Utils.aspectRatioH(element_width, "16/9");
            break;
          default:
            element_height = o2.height;
        }
        element2.css({
          height: element_height
        });
        container = $3("<div>").addClass("image-container").appendTo(element2);
        container_overlay = $3("<div>").addClass("image-container-overlay").appendTo(element2).css({
          width: element_width / 2
        });
        slider = $3("<div>").addClass("image-slider").appendTo(element2);
        slider.css({
          top: element_height / 2 - slider.height() / 2,
          left: element_width / 2 - slider.width() / 2
        });
        images = element2.find("img");
        $3.each(images, function(i3) {
          var img2 = $3("<div>").addClass("image-wrapper");
          img2.css({
            width: element_width,
            height: element_height,
            backgroundImage: "url(" + this.src + ")"
          });
          img2.appendTo(i3 === 0 ? container : container_overlay);
        });
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var overlay = element2.find(".image-container-overlay");
        var slider = element2.find(".image-slider");
        slider.on(Metro2.events.startAll, function() {
          var w2 = element2.width();
          $3(document).on(Metro2.events.moveAll, function(e) {
            var x2 = Utils.getCursorPositionX(element2[0], e), left_pos;
            if (x2 < 0) x2 = 0;
            if (x2 > w2) x2 = w2;
            overlay.css({
              width: x2
            });
            left_pos = x2 - slider.width() / 2;
            slider.css({
              left: left_pos
            });
            that._fireEvent("slider-move", {
              x: x2,
              l: left_pos
            });
          }, { ns: that.id });
          $3(document).on(Metro2.events.stopAll, function() {
            $3(document).off(Metro2.events.moveAll, { ns: that.id });
            $3(document).off(Metro2.events.stopAll, { ns: that.id });
          }, { ns: that.id });
        });
        $3(globalThis).on(Metro2.events.resize, function() {
          var element_width = element2.width(), element_height;
          if (o2.width !== "100%") {
            return;
          }
          switch (o2.height) {
            case "16/9":
              element_height = Utils.aspectRatioH(element_width, o2.height);
              break;
            case "21/9":
              element_height = Utils.aspectRatioH(element_width, o2.height);
              break;
            case "4/3":
              element_height = Utils.aspectRatioH(element_width, o2.height);
              break;
            case "auto":
              element_height = Utils.aspectRatioH(element_width, "16/9");
              break;
            default:
              element_height = o2.height;
          }
          element2.css({
            height: element_height
          });
          $3.each(element2.find(".image-wrapper"), function() {
            $3(this).css({
              width: element_width,
              height: element_height
            });
          });
          element2.find(".image-container-overlay").css({
            width: element_width / 2
          });
          slider.css({
            top: element_height / 2 - slider.height() / 2,
            left: element_width / 2 - slider.width() / 2
          });
        }, { ns: this.id });
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.start);
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/image-grid/image-grig.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ImageGridDefaultConfig = {
      useBackground: false,
      backgroundSize: "cover",
      backgroundPosition: "top left",
      clsImageGrid: "",
      clsImageGridItem: "",
      clsImageGridImage: "",
      onItemClick: Metro2.noop,
      onDrawItem: Metro2.noop,
      onImageGridCreate: Metro2.noop
    };
    Metro2.imageGridSetup = function(options) {
      ImageGridDefaultConfig = $3.extend({}, ImageGridDefaultConfig, options);
    };
    if (typeof globalThis["metroImageGridSetup"] !== void 0) {
      Metro2.imageGridSetup(globalThis["metroImageGridSetup"]);
    }
    Metro2.Component("image-grid", {
      init: function(options, elem) {
        this._super(elem, options, ImageGridDefaultConfig, {
          // define instance vars here
          items: []
        });
        return this;
      },
      _create: function() {
        this.items = this.element.children("img");
        this._createStructure();
        this._createEvents();
        this._fireEvent("image-grid-create");
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("image-grid").addClass(o2.clsImageGrid);
        this._createItems();
      },
      _createEvents: function() {
        var that = this, element2 = this.element;
        element2.on(Metro2.events.click, ".image-grid__item", function() {
          that._fireEvent("item-click", {
            item: this
          });
        });
      },
      _createItems: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var items = this.items;
        element2.clear();
        items.each(function() {
          var el = $3(this);
          var src = this.src;
          var wrapper = $3("<div>").addClass("image-grid__item").addClass(o2.clsImageGridItem).appendTo(element2);
          var img2 = new Image();
          img2.src = src;
          img2.onload = function() {
            var port = this.height >= this.width;
            wrapper.addClass(port ? "image-grid__item-portrait" : "image-grid__item-landscape");
            el.addClass(o2.clsImageGridImage).appendTo(wrapper);
            if (o2.useBackground) {
              wrapper.css({
                background: "url(" + src + ")",
                backgroundRepeat: "no-repeat",
                backgroundSize: o2.backgroundSize,
                backgroundPosition: o2.backgroundPosition
              }).attr("data-original", el.attr("data-original") || src).attr("data-title", el.attr("alt") || el.attr("data-title") || "");
              el.visible(false);
            }
            that._fireEvent("draw-item", {
              item: wrapper[0],
              image: el[0]
            });
          };
        });
      },
      changeAttribute: function(attr, val) {
        var o2 = this.options;
        if (attr === "data-use-background") {
          o2.useBackground = Utils.bool(val);
          this._createItems();
        }
        if (attr === "data-background-size") {
          o2.backgroundSize = val;
          this._createItems();
        }
        if (attr === "data-background-position") {
          o2.backgroundPosition = val;
          this._createItems();
        }
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/image-magnifier/image-magnifier.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ImageMagnifierDefaultConfig = {
      imagemagnifierDeferred: 0,
      width: "100%",
      height: "auto",
      lensSize: 100,
      lensType: "square",
      // square, circle
      magnifierZoom: 2,
      magnifierMode: "glass",
      // glass, zoom
      magnifierZoomElement: null,
      clsMagnifier: "",
      clsLens: "",
      clsZoom: "",
      onMagnifierMove: Metro2.noop,
      onImageMagnifierCreate: Metro2.noop
    };
    Metro2.imageMagnifierSetup = function(options) {
      ImageMagnifierDefaultConfig = $3.extend({}, ImageMagnifierDefaultConfig, options);
    };
    if (typeof globalThis["metroImageMagnifierSetup"] !== void 0) {
      Metro2.imageMagnifierSetup(globalThis["metroImageMagnifierSetup"]);
    }
    Metro2.Component("image-magnifier", {
      init: function(options, elem) {
        this._super(elem, options, ImageMagnifierDefaultConfig, {
          zoomElement: null,
          id: Utils.elementId("image-magnifier")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("image-magnifier-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var magnifier, element_width, element_height;
        var image = element2.find("img");
        if (image.length === 0) {
          throw new Error("Image not defined");
        }
        if (!Utils.isValue(element2.attr("id"))) {
          element2.attr("id", Utils.elementId("image-magnifier"));
        }
        element2.addClass("image-magnifier").css({
          width: o2.width
        }).addClass(o2.clsMagnifier);
        element_width = element2.width();
        switch (o2.height) {
          case "16/9":
            element_height = Utils.aspectRatioH(element_width, o2.height);
            break;
          case "21/9":
            element_height = Utils.aspectRatioH(element_width, o2.height);
            break;
          case "4/3":
            element_height = Utils.aspectRatioH(element_width, o2.height);
            break;
          case "auto":
            element_height = Utils.aspectRatioH(element_width, "16/9");
            break;
          default:
            element_height = o2.height;
        }
        element2.css({
          height: element_height
        });
        var x2 = element_width / 2 - o2.lensSize / 2;
        var y2 = element_height / 2 - o2.lensSize / 2;
        if (o2.magnifierMode === "glass") {
          magnifier = $3("<div>").addClass("image-magnifier-glass").appendTo(element2);
          magnifier.css({
            width: o2.lensSize,
            height: o2.lensSize,
            borderRadius: o2.lensType !== "circle" ? 0 : "50%",
            top: y2,
            left: x2,
            backgroundImage: "url(" + image[0].src + ")",
            backgroundRepeat: "no-repeat",
            backgroundPosition: "-" + (x2 * o2.magnifierZoom - o2.lensSize / 4 + 4) + "px -" + (y2 * o2.magnifierZoom - o2.lensSize / 4 + 4) + "px",
            backgroundSize: image[0].width * o2.magnifierZoom + "px " + image[0].height * o2.magnifierZoom + "px"
          }).addClass(o2.clsLens);
        } else {
          magnifier = $3("<div>").addClass("image-magnifier-glass").appendTo(element2);
          magnifier.css({
            width: o2.lensSize,
            height: o2.lensSize,
            borderRadius: 0,
            borderWidth: 1,
            top: y2,
            left: x2
          }).addClass(o2.clsLens);
          if (!Utils.isValue(o2.magnifierZoomElement) || $3(o2.magnifierZoomElement).length === 0) {
            this.zoomElement = $3("<div>").insertAfter(element2);
          } else {
            this.zoomElement = $3(o2.magnifierZoomElement);
          }
          var zoom_element_width = magnifier[0].offsetWidth * o2.magnifierZoom;
          var zoom_element_height = magnifier[0].offsetHeight * o2.magnifierZoom;
          var cx = zoom_element_width / o2.lensSize;
          var cy = zoom_element_height / o2.lensSize;
          this.zoomElement.css({
            width: zoom_element_width,
            height: zoom_element_height,
            backgroundImage: "url(" + image[0].src + ")",
            backgroundRepeat: "no-repeat",
            backgroundPosition: "-" + x2 * cx + "px -" + y2 * cy + "px",
            backgroundSize: image[0].width * cx + "px " + image[0].height * cy + "px"
          }).addClass(o2.clsZoom);
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var glass = element2.find(".image-magnifier-glass");
        var glass_size = glass[0].offsetWidth / 2;
        var image = element2.find("img")[0];
        var zoomElement = this.zoomElement;
        var cx, cy;
        $3(globalThis).on(Metro2.events.resize, function() {
          var x2 = element2.width() / 2 - o2.lensSize / 2;
          var y2 = element2.height() / 2 - o2.lensSize / 2;
          if (o2.magnifierMode === "glass") {
            glass.css({
              backgroundPosition: "-" + (x2 * o2.magnifierZoom - o2.lensSize / 4 + 4) + "px -" + (y2 * o2.magnifierZoom - o2.lensSize / 4 + 4) + "px",
              backgroundSize: image.width * o2.magnifierZoom + "px " + image.height * o2.magnifierZoom + "px"
            });
          }
        }, { ns: this.id });
        if (o2.magnifierMode !== "glass") {
          cx = zoomElement[0].offsetWidth / glass_size / 2;
          cy = zoomElement[0].offsetHeight / glass_size / 2;
          zoomElement.css({
            backgroundSize: image.width * cx + "px " + image.height * cy + "px"
          });
        }
        var lens_move = function(pos) {
          var x2, y2;
          var magic = 4, zoom = parseInt(o2.magnifierZoom);
          if (o2.magnifierMode === "glass") {
            x2 = pos.x;
            y2 = pos.y;
            if (x2 > image.width - glass_size / zoom) {
              x2 = image.width - glass_size / zoom;
            }
            if (x2 < glass_size / zoom) {
              x2 = glass_size / zoom;
            }
            if (y2 > image.height - glass_size / zoom) {
              y2 = image.height - glass_size / zoom;
            }
            if (y2 < glass_size / zoom) {
              y2 = glass_size / zoom;
            }
            glass.css({
              top: y2 - glass_size,
              left: x2 - glass_size,
              backgroundPosition: "-" + (x2 * zoom - glass_size + magic) + "px -" + (y2 * zoom - glass_size + magic) + "px"
            });
          } else {
            x2 = pos.x - glass_size;
            y2 = pos.y - glass_size;
            if (x2 > image.width - glass_size * 2) {
              x2 = image.width - glass_size * 2;
            }
            if (x2 < 0) {
              x2 = 0;
            }
            if (y2 > image.height - glass_size * 2) {
              y2 = image.height - glass_size * 2;
            }
            if (y2 < 0) {
              y2 = 0;
            }
            glass.css({
              top: y2,
              left: x2
            });
            zoomElement.css({
              backgroundPosition: "-" + x2 * cx + "px -" + y2 * cy + "px"
            });
          }
        };
        element2.on(Metro2.events.move, function(e) {
          var pos = Utils.getCursorPosition(image, e);
          lens_move(pos);
          that._fireEvent("magnifier-move", {
            pos,
            glass: glass[0],
            zoomElement: zoomElement ? zoomElement[0] : void 0
          });
          e.preventDefault();
        });
        element2.on(Metro2.events.leave, function() {
          var x2 = element2.width() / 2 - o2.lensSize / 2;
          var y2 = element2.height() / 2 - o2.lensSize / 2;
          glass.animate({
            draw: {
              top: y2,
              left: x2
            }
          });
          lens_move({
            x: x2 + o2.lensSize / 2,
            y: y2 + o2.lensSize / 2
          });
        });
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.move);
        element2.off(Metro2.events.leave);
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/image-placeholder/image-placeholder.js
  (function(Metro2, $3) {
    "use strict";
    var ImagePlaceholderDefaultConfig = {
      size: "100x100",
      width: null,
      height: null,
      color: "#f8f8f8",
      textColor: "#292929",
      font: "12px sans-serif",
      text: "",
      showText: true,
      onImagePlaceholderCreate: Metro2.noop
    };
    Metro2.imagePlaceholderSetup = function(options) {
      ImagePlaceholderDefaultConfig = $3.extend({}, ImagePlaceholderDefaultConfig, options);
    };
    if (typeof globalThis["metroImagePlaceholderSetup"] !== void 0) {
      Metro2.imagePlaceholderSetup(globalThis["metroImagePlaceholderSetup"]);
    }
    Metro2.Component("image-placeholder", {
      init: function(options, elem) {
        this._super(elem, options, ImagePlaceholderDefaultConfig, {
          // define instance vars here
          width: 0,
          height: 0
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("image-placeholder-create");
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var size = o2.size.toArray("x");
        this.width = o2.width ? o2.width : size[0];
        this.height = o2.height ? o2.height : size[1];
        element2.attr("src", this._createPlaceholder());
      },
      _createEvents: function() {
      },
      _createPlaceholder: function() {
        var o2 = this.options;
        var canvas2 = document.createElement("canvas"), context = canvas2.getContext("2d");
        var width = this.width, height = this.height;
        canvas2.width = parseInt(width);
        canvas2.height = parseInt(height);
        context.clearRect(0, 0, width, height);
        context.fillStyle = o2.color;
        context.fillRect(0, 0, width, height);
        context.fillStyle = o2.textColor;
        context.font = o2.font;
        context.translate(width / 2, height / 2);
        context.textAlign = "center";
        context.textBaseline = "middle";
        if (o2.showText)
          context.fillText(o2.text ? o2.text : width + " \xD7 " + height, 0, 0);
        return canvas2.toDataURL();
      },
      // changeAttribute: function(attr, newValue){
      // },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/info-box/info-box.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var InfoBoxDefaultConfig = {
      infoboxDeferred: 0,
      type: "",
      width: 480,
      height: "auto",
      overlay: true,
      overlayColor: "#000000",
      overlayAlpha: 0.5,
      overlayClickClose: false,
      autoHide: 0,
      removeOnClose: false,
      closeButton: true,
      clsBox: "",
      clsBoxContent: "",
      clsOverlay: "",
      onOpen: Metro2.noop,
      onClose: Metro2.noop,
      onInfoBoxCreate: Metro2.noop
    };
    Metro2.infoBoxSetup = function(options) {
      InfoBoxDefaultConfig = $3.extend({}, InfoBoxDefaultConfig, options);
    };
    if (typeof globalThis["metroInfoBoxSetup"] !== void 0) {
      Metro2.infoBoxSetup(globalThis["metroInfoBoxSetup"]);
    }
    Metro2.Component("info-box", {
      init: function(options, elem) {
        this._super(elem, options, InfoBoxDefaultConfig, {
          overlay: null,
          id: Utils.elementId("info-box")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("info-box-create", {
          element: element2
        });
      },
      _overlay: function() {
        var o2 = this.options;
        var overlay = $3("<div>");
        overlay.addClass("overlay").addClass(o2.clsOverlay);
        if (o2.overlayColor === "transparent") {
          overlay.addClass("transparent");
        } else {
          overlay.css({
            background: Farbe.Routines.toRGBA(Farbe.Routines.parse(o2.overlayColor), o2.overlayAlpha)
          });
        }
        return overlay;
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var closer, content;
        if (o2.overlay === true) {
          this.overlay = this._overlay();
        }
        element2.addClass("info-box").addClass(o2.type).addClass(o2.clsBox);
        closer = element2.find("closer");
        if (closer.length === 0) {
          closer = $3("<span>").addClass("button square closer");
          closer.appendTo(element2);
        }
        if (o2.closeButton !== true) {
          closer.hide();
        }
        content = element2.find(".info-box-content");
        if (content.length > 0) {
          content.addClass(o2.clsBoxContent);
        }
        element2.css({
          width: o2.width,
          height: o2.height,
          visibility: "hidden",
          top: "100%",
          left: ($3(globalThis).width() - element2.outerWidth()) / 2
        });
        element2.appendTo($3("body"));
      },
      _createEvents: function() {
        var that = this, element2 = this.element;
        element2.on(Metro2.events.click, ".closer", function() {
          that.close();
        });
        element2.on(Metro2.events.click, ".js-dialog-close", function() {
          that.close();
        });
        $3(globalThis).on(Metro2.events.resize, function() {
          that.reposition();
        }, { ns: this.id });
      },
      _setPosition: function() {
        var element2 = this.element;
        element2.css({
          top: ($3(globalThis).height() - element2.outerHeight()) / 2,
          left: ($3(globalThis).width() - element2.outerWidth()) / 2
        });
      },
      reposition: function() {
        this._setPosition();
      },
      setContent: function(c) {
        var element2 = this.element;
        var content = element2.find(".info-box-content");
        if (content.length === 0) {
          return;
        }
        content.html(c);
        this.reposition();
      },
      setType: function(t) {
        var element2 = this.element;
        element2.removeClass("success info alert warning").addClass(t);
      },
      open: function() {
        var that = this, element2 = this.element, o2 = this.options;
        if (o2.overlay === true && $3(".overlay").length === 0) {
          this.overlay.appendTo($3("body"));
          if (o2.overlayClickClose === true) {
            this.overlay.on(Metro2.events.click, function() {
              that.close();
            });
          }
        }
        this._setPosition();
        element2.css({
          visibility: "visible"
        });
        this._fireEvent("open");
        element2.data("open", true);
        if (parseInt(o2.autoHide) > 0) {
          setTimeout(function() {
            that.close();
          }, parseInt(o2.autoHide));
        }
      },
      close: function() {
        var element2 = this.element, o2 = this.options;
        if (o2.overlay === true) {
          $3("body").find(".overlay").remove();
        }
        element2.css({
          visibility: "hidden",
          top: "100%"
        });
        this._fireEvent("close");
        element2.data("open", false);
        if (o2.removeOnClose === true) {
          this.destroy();
          element2.remove();
        }
      },
      isOpen: function() {
        return this.element.data("open") === true;
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off("all");
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
    Metro2["infobox"] = {
      isInfoBox: function(el) {
        return Utils.isMetroObject(el, "infobox");
      },
      open: function(el, c, t) {
        if (!this.isInfoBox(el)) {
          return false;
        }
        var ib = Metro2.getPlugin(el, "infobox");
        if (c !== void 0) {
          ib.setContent(c);
        }
        if (t !== void 0) {
          ib.setType(t);
        }
        ib.open();
      },
      close: function(el) {
        if (!this.isInfoBox(el)) {
          return false;
        }
        var ib = Metro2.getPlugin(el, "infobox");
        ib.close();
      },
      setContent: function(el, c) {
        if (!this.isInfoBox(el)) {
          return false;
        }
        if (c === void 0) {
          c = "";
        }
        var ib = Metro2.getPlugin(el, "infobox");
        ib.setContent(c);
        ib.reposition();
      },
      setType: function(el, t) {
        if (!this.isInfoBox(el)) {
          return false;
        }
        var ib = Metro2.getPlugin(el, "infobox");
        ib.setType(t);
        ib.reposition();
      },
      isOpen: function(el) {
        if (!this.isInfoBox(el)) {
          return false;
        }
        var ib = Metro2.getPlugin(el, "infobox");
        return ib.isOpen();
      },
      create: function(c, t, o2, open) {
        var $$ = Utils.$();
        var el, ib, box_type;
        box_type = t !== void 0 ? t : "";
        el = $$("<div>").appendTo($$("body"));
        $$("<div>").addClass("info-box-content").appendTo(el);
        var ib_options = $$.extend({}, {
          removeOnClose: true,
          type: box_type
        }, o2 !== void 0 ? o2 : {});
        ib_options._runtime = true;
        el.infobox(ib_options);
        ib = Metro2.getPlugin(el, "infobox");
        ib.setContent(c);
        if (open !== false) {
          ib.open();
        }
        return el;
      }
    };
  })(Metro, Dom);

  // source/components/input-mask/input-mask.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var InputMaskDefaultConfig = {
      maskPattern: ".",
      mask: null,
      maskPlaceholder: "_",
      maskEditableStart: 0,
      thresholdInterval: 300,
      onChar: Metro2.noop,
      onInputMaskCreate: Metro2.noop
    };
    Metro2.inputMaskSetup = function(options) {
      InputMaskDefaultConfig = $3.extend({}, InputMaskDefaultConfig, options);
    };
    if (typeof globalThis["metroInputMaskSetup"] !== void 0) {
      Metro2.inputMaskSetup(globalThis["metroInputMaskSetup"]);
    }
    Metro2.Component("input-mask", {
      init: function(options, elem) {
        this._super(elem, options, InputMaskDefaultConfig, {
          // define instance vars here
          pattern: null,
          mask: "",
          maskArray: [],
          placeholder: "",
          length: 0,
          thresholdTimer: null,
          id: Utils.elementId("input-mask")
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("input-mask-create");
      },
      _createStructure: function() {
        var o2 = this.options;
        if (!o2.mask) {
          throw new Error("You must provide a pattern for masked input.");
        }
        if (typeof o2.maskPlaceholder !== "string" || o2.maskPlaceholder.length > 1) {
          throw new Error("Mask placeholder should be a single character or an empty string.");
        }
        this.placeholder = o2.maskPlaceholder;
        this.mask = "" + o2.mask;
        this.maskArray = this.mask.split("");
        this.pattern = new RegExp("^" + o2.maskPattern + "+$");
        this.length = this.mask.length;
        this._showValue();
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var editableStart = o2.maskEditableStart;
        var id = this.id;
        var checkEditablePosition = function(pos) {
          if (pos < editableStart) {
            setPosition(editableStart);
            return false;
          }
          return true;
        };
        var checkEditableChar = function(pos) {
          return pos < that.mask.length && that.mask.charAt(pos) === that.placeholder;
        };
        var findNextEditablePosition = function(pos) {
          var i3, a2 = that.maskArray;
          for (i3 = pos; i3 <= a2.length; i3++) {
            if (a2[i3] === that.placeholder) {
              return i3;
            }
          }
          return pos;
        };
        var setPosition = function(pos) {
          that.elem.setSelectionRange(pos, pos);
        };
        var clearThresholdInterval = function() {
          clearInterval(that.thresholdTimer);
          that.thresholdTimer = null;
        };
        element2.on("change", function() {
          if (this.value === "") {
            this.value = that.mask;
            setPosition(editableStart);
          }
        }, { ns: id });
        element2.on("focus click", function() {
          checkEditablePosition(this.selectionStart);
          setPosition(findNextEditablePosition(this.selectionStart));
        }, { ns: id });
        element2.on("keydown", function(e) {
          var pos = this.selectionStart;
          var val = this.value;
          var code2 = e.code, key = e.key;
          if (code2 === "ArrowRight" || code2 === "End") {
            return true;
          } else {
            if (pos >= that.length && ["Backspace", "Home", "ArrowLeft", "ArrowUp"].indexOf(code2) === -1) {
              e.preventDefault();
            } else if (code2 === "Home" || code2 === "ArrowUp") {
              e.preventDefault();
              setPosition(editableStart);
            } else if (code2 === "ArrowLeft") {
              if (pos - 1 < editableStart) {
                e.preventDefault();
              }
            } else if (code2 === "Backspace") {
              e.preventDefault();
              if (pos - 1 >= editableStart) {
                if (checkEditableChar(pos - 1)) {
                  if (this.value.charAt(pos - 1) !== that.placeholder) {
                    this.value = val.substr(0, pos - 1) + that.placeholder + val.substr(pos);
                  }
                }
                setPosition(pos - 1);
              }
            } else if (code2 === "Space") {
              e.preventDefault();
              setPosition(pos + 1);
            } else if (!that.pattern.test(key)) {
              e.preventDefault();
            } else {
              e.preventDefault();
              if (checkEditableChar(pos)) {
                this.value = val.substr(0, pos) + (o2.onChar === Metro2.noop ? key : Utils.exec(o2.onChar, [key], this)) + val.substr(pos + 1);
                setPosition(findNextEditablePosition(pos + 1));
              }
            }
          }
        }, { ns: id });
        element2.on("keyup", function() {
          var el = this;
          clearThresholdInterval();
          that.thresholdTimer = setInterval(function() {
            clearThresholdInterval();
            setPosition(findNextEditablePosition(el.selectionStart));
          }, o2.thresholdInterval);
        }, { ns: id });
      },
      _showValue: function() {
        var that = this, elem = this.elem;
        var a2 = new Array(this.length);
        var val;
        if (!elem.value) {
          elem.value = this.mask;
        } else {
          val = elem.value;
          $3.each(this.maskArray, function(i3, v2) {
            if (val[i3] !== v2 && !that.pattern.test(val[i3])) {
              a2[i3] = that.placeholder;
            } else {
              a2[i3] = val[i3];
            }
          });
          this.elem.value = a2.join("");
        }
      },
      destroy: function() {
        var element2 = this.element, id = this.id;
        element2.off("change", { ns: id });
        element2.off("focus", { ns: id });
        element2.off("click", { ns: id });
        element2.off("keydown", { ns: id });
        element2.off("keyup", { ns: id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/input-material/input-material.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var MaterialInputDefaultConfig = {
      materialinputDeferred: 0,
      label: "",
      informer: "",
      icon: "",
      permanentLabel: false,
      searchButton: false,
      clearButton: true,
      revealButton: true,
      clearButtonIcon: "\u274C",
      revealButtonIcon: "\u{1F440}",
      searchButtonIcon: "\u{1F50D}",
      customButtons: [],
      searchButtonClick: "submit",
      clsComponent: "",
      clsInput: "",
      clsLabel: "",
      clsInformer: "",
      clsIcon: "",
      clsLine: "",
      onInputCreate: Metro2.noop
    };
    Metro2.materialInputSetup = function(options) {
      MaterialInputDefaultConfig = $3.extend({}, MaterialInputDefaultConfig, options);
    };
    if (typeof globalThis["metroMaterialInputSetup"] !== void 0) {
      Metro2.materialInputSetup(globalThis["metroMaterialInputSetup"]);
    }
    Metro2.Component("material-input", {
      init: function(options, elem) {
        this._super(elem, options, MaterialInputDefaultConfig, {
          history: [],
          historyIndex: -1
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("input-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var container;
        var buttons;
        element2[0].className = "";
        element2.attr("autocomplete", "nope");
        if (element2.attr("type") === void 0) {
          element2.attr("type", "text");
        }
        container = element2.wrap("<div>").addClass("input-material " + element2[0].className);
        buttons = $3("<div>").addClass("buttons").appendTo(container);
        if (o2.label) {
          $3("<span>").html(o2.label).addClass("label").addClass(o2.clsLabel).insertAfter(element2);
        }
        if (Utils.isValue(o2.informer)) {
          $3("<span>").html(o2.informer).addClass("informer").addClass(o2.clsInformer).insertAfter(element2);
        }
        if (Utils.isValue(o2.icon)) {
          container.addClass("with-icon");
          $3("<span>").html(o2.icon).addClass("icon").addClass(o2.clsIcon).insertAfter(element2);
        }
        if (o2.clearButton === true && !element2[0].readOnly) {
          const clearButton = $3("<button>").addClass("button input-clear-button").addClass(o2.clsClearButton).attr("tabindex", -1).attr("type", "button").html(o2.clearButtonIcon);
          clearButton.appendTo(buttons);
        }
        if (element2.attr("type") === "password" && o2.revealButton === true) {
          const revealButton = $3("<button>").addClass("button input-reveal-button").addClass(o2.clsRevealButton).attr("tabindex", -1).attr("type", "button").html(o2.revealButtonIcon);
          revealButton.appendTo(buttons);
        }
        if (o2.searchButton === true) {
          const searchButton = $3("<button>").addClass("button input-search-button").addClass(o2.clsSearchButton).attr("tabindex", -1).attr("type", o2.searchButtonClick === "submit" ? "submit" : "button").html(o2.searchButtonIcon);
          searchButton.appendTo(buttons);
        }
        const customButtons = Utils.isObject(o2.customButtons);
        if (Array.isArray(customButtons)) {
          $3.each(customButtons, function() {
            var item = this;
            var btn = $3("<button>");
            btn.addClass("button input-custom-button").addClass(o2.clsCustomButton).addClass(item.cls).attr("tabindex", -1).attr("type", "button").html(item.text);
            if (item.attr && typeof item.attr === "object") {
              $3.each(item.attr, function(k2, v2) {
                btn.attr(Str.dashedName(k2), v2);
              });
            }
            if (item.onclick) btn.on("click", () => {
              item.onclick.apply(btn, [element2.valueOf(), element2]);
            });
            btn.appendTo(buttons);
          });
        }
        container.append($3("<hr>").addClass(o2.clsLine));
        if (o2.permanentLabel === true) {
          container.addClass("permanent-label");
        }
        container.addClass(o2.clsComponent);
        element2.addClass(o2.clsInput);
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this.component = container;
      },
      _createEvents: function() {
        const that = this, o2 = this.options;
        const element2 = this.element;
        this.component.on(Metro2.events.click, ".input-clear-button", function() {
          const curr = element2.val();
          element2.val("").fire("clear").fire("change").fire("keyup").focus();
          that._fireEvent("clear-click", {
            prev: curr
          });
        });
        this.component.on(Metro2.events.click, ".input-reveal-button", function() {
          if (element2.attr("type") === "password") {
            element2.attr("type", "text");
          } else {
            element2.attr("type", "password");
          }
          that._fireEvent("reveal-click", {
            val: element2.val()
          });
        });
        this.component.on(Metro2.events.click, ".input-search-button", function() {
          if (o2.searchButtonClick !== "submit") {
            that._fireEvent("search-button-click", {
              val: element2.val(),
              button: this
            });
          } else {
            if (this.form) this.form.submit();
          }
        });
        element2.on(Metro2.events.keydown, function(e) {
          if (e.keyCode === Metro2.keyCode.ENTER) {
            that._fireEvent("enter-click", {
              val: element2.val()
            });
          }
        });
      },
      clear: function() {
        this.element.val("");
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attributeName) {
        if (attributeName === "disabled") {
          this.toggleState();
        }
      },
      destroy: function() {
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/keylock/keylock.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var KeylockDefaultConfig = {
      keylockDeferred: 0,
      stateIconOn: "\u{1F512}",
      stateIconOff: "\u{1F513}",
      captionOn: "",
      captionOff: "",
      captionPosition: "right",
      clsKeylock: "",
      clsIcon: "",
      clsIconOn: "",
      clsIconOff: "",
      clsCaption: "",
      clsCaptionOn: "",
      clsCaptionOff: "",
      onKeylockCreate: Metro2.noop
    };
    Metro2.keylockSetup = function(options) {
      KeylockDefaultConfig = $3.extend({}, KeylockDefaultConfig, options);
    };
    if (typeof globalThis["metroKeylockSetup"] !== void 0) {
      Metro2.keylockSetup(globalThis["metroKeylockSetup"]);
    }
    Metro2.Component("keylock", {
      init: function(options, elem) {
        this._super(elem, options, KeylockDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        var container;
        var icon = $3("<span>").addClass("icon").addClass(o2.clsIcon);
        element2.attr("type", "checkbox");
        if (element2.attr("readonly") !== void 0) {
          element2.on("click", function(e) {
            e.preventDefault();
          });
        }
        container = element2.wrap(
          $3("<label>").addClass("keylock").addClass(o2.clsKeylock)
        );
        icon.appendTo(container);
        if (o2.stateIconOn) {
          let _icon = $3(o2.stateIconOn);
          if (_icon.length > 0) {
            _icon.addClass("state-on").addClass(o2.clsIconOn).appendTo(icon);
          } else {
            $3("<span>").addClass("state-on").addClass(o2.clsIconOn).html(o2.stateIconOn).appendTo(icon);
          }
        }
        if (o2.stateIconOff) {
          let _icon = $3(o2.stateIconOff);
          if (_icon.length > 0) {
            _icon.addClass("state-off").addClass(o2.clsIconOff).appendTo(icon);
          } else {
            $3("<span>").addClass("state-off").addClass(o2.clsIconOff).html(o2.stateIconOff).appendTo(icon);
          }
        }
        if (o2.captionOn || o2.captionOff) {
          const caption2 = $3("<span>").addClass("caption").addClass(o2.clsCaption).appendTo(container);
          if (o2.captionOn) {
            $3("<span>").addClass("caption-state-on").addClass(o2.clsCaptionOn).html(o2.captionOn).appendTo(caption2);
          }
          if (o2.captionOff) {
            $3("<span>").addClass("caption-state-off").addClass(o2.clsCaptionOff).html(o2.captionOff).appendTo(caption2);
          }
        }
        if (o2.transition === true) {
          container.addClass("transition-on");
        }
        if (o2.captionPosition === "left") {
          container.addClass("caption-left");
        }
        element2[0].className = "";
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this._fireEvent("keylock-create");
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      toggle: function(v2) {
        var element2 = this.element;
        if (!Utils.isValue(v2)) {
          element2.prop("checked", !Utils.bool(element2.prop("checked")));
        } else {
          element2.prop("checked", v2 === 1);
        }
        return this;
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "disabled":
            this.toggleState();
            break;
        }
      },
      destroy: function() {
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/keypad/keypad.js
  (function(Metro2, $3) {
    "use strict";
    var KeypadDefaultConfig = {
      keypadDeferred: 0,
      label: "",
      keySize: 36,
      keys: "1, 2, 3, 4, 5, 6, 7, 8, 9, 0",
      exceptKeys: "",
      keySeparator: "",
      trimSeparator: false,
      keyDelimiter: ",",
      copyInlineStyles: false,
      target: null,
      keyLength: 0,
      shuffle: false,
      shuffleCount: 3,
      //position: Metro.position.BOTTOM_LEFT, //top-left, top, top-right, right, bottom-right, bottom, bottom-left, left
      // dynamicPosition: false,
      serviceButtons: true,
      showValue: true,
      open: false,
      useElementSizeForKeys: false,
      // sizeAsKeys: false,
      openMode: "auto",
      clsKeypad: "",
      clsInput: "",
      clsKeys: "",
      clsKey: "",
      clsServiceKey: "",
      clsBackspace: "",
      clsClear: "",
      clsLabel: "",
      onChange: Metro2.noop,
      onClear: Metro2.noop,
      onBackspace: Metro2.noop,
      onShuffle: Metro2.noop,
      onKey: Metro2.noop,
      onKeypadCreate: Metro2.noop
    };
    Metro2.keypadSetup = function(options) {
      KeypadDefaultConfig = $3.extend({}, KeypadDefaultConfig, options);
    };
    if (typeof globalThis["metroKeypadSetup"] !== void 0) {
      Metro2.keypadSetup(globalThis["metroKeypadSetup"]);
    }
    Metro2.Component("keypad", {
      init: function(options, elem) {
        this._super(elem, options, KeypadDefaultConfig, {
          value: elem.tagName === "INPUT" ? elem.value : elem.innerText,
          positions: ["top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left"],
          keypad: null,
          keys: [],
          keys_to_work: [],
          exceptKeys: []
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this.options.position = "bottom-left";
        this.keys = o2.keys.toArray(o2.keyDelimiter);
        this.keys_to_work = this.keys;
        this.exceptKeys = o2.exceptKeys.toArray(o2.keyDelimiter);
        this._createKeypad();
        if (o2.shuffle === true) {
          this.shuffle();
        }
        this._createKeys();
        this._createEvents();
        this._fireEvent("keypad-create", {
          element: element2
        });
      },
      _createKeypad: function() {
        var element2 = this.element, o2 = this.options;
        var keys;
        var keypad = element2.wrap("<div>").addClass("input keypad").addClass(element2[0].className).addClass(o2.clsKeypad);
        if (element2.attr("type") === void 0) {
          element2.attr("type", "text");
        }
        element2.attr("readonly", true);
        keys = $3("<div>").addClass("keys").addClass(o2.clsKeys);
        keys.appendTo(keypad);
        this._setKeysPosition();
        if (o2.open === true) {
          keys.addClass("open keep-open");
        }
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          for (var i3 = 0, l2 = element2[0].style.length; i3 < l2; i3++) {
            keypad.css(element2[0].style[i3], element2.css(element2[0].style[i3]));
          }
        }
        element2.addClass(o2.clsInput);
        keypad.addClass(o2.clsKeypad);
        element2.on(Metro2.events.blur, function() {
          keypad.removeClass("focused");
        });
        element2.on(Metro2.events.focus, function() {
          keypad.addClass("focused");
        });
        var buttons = $3("<div>").addClass("button-group").appendTo(keypad);
        var kbdButton = $3("<button>").addClass("button input-kbd-button").addClass(o2.clsKbdButton).attr("tabindex", -1).attr("type", "button").html("\u2328");
        kbdButton.appendTo(buttons);
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(keypad);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (o2.disabled === true || element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this.keypad = keypad;
      },
      _setKeysPosition: function() {
        var element2 = this.element, o2 = this.options;
        var keypad = element2.parent();
        var keys = keypad.find(".keys");
        keys.removeClass(this.positions.join(" ")).addClass(o2.position);
      },
      _createKeys: function() {
        var element2 = this.element, o2 = this.options;
        var keypad = element2.parent();
        var key, keys = keypad.find(".keys");
        var factor = Math.round(Math.sqrt(this.keys.length + 2));
        var key_size = o2.keySize;
        var width;
        keys.html("");
        $3.each(this.keys_to_work, function() {
          key = $3("<span>").addClass("key").addClass(o2.clsKey).html(this);
          key.data("key", this);
          key.css({
            width: o2.keySize,
            height: o2.keySize,
            lineHeight: o2.keySize - 4
          }).appendTo(keys);
        });
        if (o2.serviceButtons === true) {
          var service_keys = ["&larr;", "&times;"];
          $3.each(service_keys, function() {
            key = $3("<span>").addClass("key service-key").addClass(o2.clsKey).addClass(o2.clsServiceKey).html(this);
            if (this === "&larr;") {
              key.addClass(o2.clsBackspace);
            }
            if (this === "&times;") {
              key.addClass(o2.clsClear);
            }
            key.data("key", this);
            key.css({
              width: o2.keySize,
              height: o2.keySize,
              lineHeight: o2.keySize - 4
            }).appendTo(keys);
          });
        }
        if (o2.useElementSizeForKeys === true) {
          keys.outerWidth(element2.outerWidth());
        } else {
          width = factor * (key_size + 2) - 6;
          keys.outerWidth(width);
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var keypad = element2.parent();
        var keys = keypad.find(".keys");
        keys.on(Metro2.events.click, ".key", function(e) {
          var key = $3(this);
          var keyValue = key.data("key");
          var crop;
          if (key.data("key") !== "&larr;" && key.data("key") !== "&times;") {
            if (o2.keyLength > 0 && ("" + that.value).length === o2.keyLength) {
              return false;
            }
            if (that.exceptKeys.indexOf(keyValue) === -1)
              that.value = that.value + (that.value !== "" ? o2.keySeparator : "") + keyValue;
            if (o2.shuffle === true) {
              that.shuffle();
              that._createKeys();
            }
            if (o2.dynamicPosition === true) {
              o2.position = that.positions[$3.random(0, that.positions.length - 1)];
              that._setKeysPosition();
            }
            that._fireEvent("key", {
              key: key.data("key"),
              val: that.value
            });
          } else {
            if (key.data("key") === "&times;") {
              that.value = "";
              that._fireEvent("clear");
            }
            if (key.data("key") === "&larr;") {
              crop = o2.keySeparator && that.value[that.value.length - 1] !== o2.keySeparator ? 2 : 1;
              that.value = that.value.substring(0, that.value.length - crop);
              that._fireEvent("backspace", {
                val: that.value
              });
            }
          }
          if (o2.showValue === true) {
            if (element2[0].tagName === "INPUT") {
              element2.val(that.value);
            } else {
              element2.text(that.value);
            }
          }
          that._fireEvent("change", {
            val: that.val
          });
          e.preventDefault();
          e.stopPropagation();
        });
        keypad.on(Metro2.events.click, function(e) {
          if (o2.open === true) {
            return;
          }
          if (keys.hasClass("open") === true) {
            keys.removeClass("open").removeClass("top-left");
          } else {
            keys.addClass("open");
            if (o2.openMode === "auto") {
              if (Metro2.utils.inViewport(keys[0]) === false) {
                keys.addClass("top-left");
              }
            } else {
              if (o2.openMode === "up") {
                keys.addClass("top-left");
              }
            }
          }
          e.preventDefault();
          e.stopPropagation();
        });
        if (o2.target !== null) {
          element2.on(Metro2.events.change, function() {
            var t = $3(o2.target);
            if (t.length === 0) {
              return;
            }
            if (t[0].tagName === "INPUT") {
              t.val(that.value);
            } else {
              t.text(that.value);
            }
          });
        }
      },
      shuffle: function() {
        var o2 = this.options;
        for (var i3 = 0; i3 < o2.shuffleCount; i3++) {
          this.keys_to_work = this.keys_to_work.shuffle();
        }
        this._fireEvent("shuffle", {
          keysToWork: this.keys_to_work,
          keys: this.keys
        });
      },
      shuffleKeys: function(count2) {
        if (count2 === void 0) {
          count2 = this.options.shuffleCount;
        }
        for (var i3 = 0; i3 < count2; i3++) {
          this.keys_to_work = this.keys_to_work.shuffle();
        }
        this._createKeys();
      },
      val: function(v2) {
        var element2 = this.element, o2 = this.options;
        if (typeof v2 === "undefined") {
          return o2.trimSeparator ? this.value.replace(new RegExp(o2.keySeparator, "g")) : this.value;
        }
        this.value = "" + v2;
        if (element2[0].tagName === "INPUT") {
          element2.val(v2);
        } else {
          element2.text(v2);
        }
        return this;
      },
      open: function() {
        var element2 = this.element, o2 = this.options;
        var keypad = element2.parent();
        var keys = keypad.find(".keys");
        keys.addClass("open");
        if (o2.openMode === "auto") {
          if (Metro2.utils.inViewport(keys[0]) === false) {
            keys.addClass("top-left");
          }
        } else {
          if (o2.openMode === "up") {
            keys.addClass("top-left");
          }
        }
      },
      close: function() {
        var element2 = this.element;
        var keypad = element2.parent();
        var keys = keypad.find(".keys");
        keys.removeClass("open").removeClass("top-left");
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      setPosition: function(pos) {
        var new_position = pos !== void 0 ? pos : this.element.attr("data-position");
        if (this.positions.indexOf(new_position) === -1) {
          return;
        }
        this.options.position = new_position;
        this._setKeysPosition();
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "disabled":
            this.toggleState();
            break;
          case "data-position":
            this.setPosition();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, keypad = this.keypad, keys = keypad.find(".keys");
        keypad.off(Metro2.events.click);
        keys.off(Metro2.events.click, ".key");
        element2.off(Metro2.events.change);
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, function() {
      var keypads = $3(".keypad .keys");
      $3.each(keypads, function() {
        if (!$3(this).hasClass("keep-open")) {
          $3(this).removeClass("open");
        }
      });
    });
  })(Metro, Dom);

  // source/components/lightbox/lightbox.js
  (function(Metro2, $3) {
    "use strict";
    var LightboxDefaultConfig = {
      loop: true,
      source: "img",
      iconClose: "\u274C",
      iconPrev: "\u{1F850}",
      iconNext: "\u{1F852}",
      clsNext: "",
      clsPrev: "",
      clsClose: "",
      clsImage: "",
      clsImageContainer: "",
      clsImageWrapper: "",
      clsLightbox: "",
      onDrawImage: Metro2.noop,
      onLightboxCreate: Metro2.noop
    };
    Metro2.lightboxSetup = function(options) {
      LightboxDefaultConfig = $3.extend({}, LightboxDefaultConfig, options);
    };
    if (typeof globalThis["metroLightboxSetup"] !== void 0) {
      Metro2.lightboxSetup(globalThis["metroLightboxSetup"]);
    }
    Metro2.Component("lightbox", {
      init: function(options, elem) {
        this._super(elem, options, LightboxDefaultConfig, {
          // define instance vars here
          overlay: null,
          lightbox: null,
          current: null,
          items: []
        });
        return this;
      },
      _create: function() {
        var o2 = this.options;
        if (!o2.source) {
          o2.source = "img";
        }
        this._createStructure();
        this._createEvents();
        this._fireEvent("lightbox-create");
      },
      _createStructure: function() {
        var o2 = this.options;
        var lightbox, overlay;
        overlay = $3(".lightbox-overlay");
        if (overlay.length === 0) {
          overlay = $3("<div>").addClass("lightbox-overlay").appendTo("body").hide();
        }
        lightbox = $3("<div>").addClass("lightbox").addClass(o2.clsLightbox).appendTo("body").hide();
        $3("<span>").addClass("lightbox__prev").addClass(o2.clsPrev).html(o2.iconPrev).appendTo(lightbox);
        $3("<span>").addClass("lightbox__next").addClass(o2.clsNext).html(o2.iconNext).appendTo(lightbox);
        $3("<span>").addClass("lightbox__closer").addClass(o2.clsClose).html(o2.iconClose).appendTo(lightbox);
        $3("<div>").addClass("lightbox__image").addClass(o2.clsImageContainer).appendTo(lightbox);
        this.component = lightbox[0];
        this.lightbox = lightbox;
        this.overlay = overlay;
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var lightbox = $3(this.component);
        element2.on(Metro2.events.click, o2.source, function() {
          that.open(this);
        });
        lightbox.on(Metro2.events.click, ".lightbox__closer", function() {
          that.close();
        });
        lightbox.on(Metro2.events.click, ".lightbox__prev", function() {
          that.prev();
        });
        lightbox.on(Metro2.events.click, ".lightbox__next", function() {
          that.next();
        });
      },
      _setupItems: function() {
        var element2 = this.element, o2 = this.options;
        var items = element2.find(o2.source);
        if (items.length === 0) {
          return;
        }
        this.items = items;
      },
      _goto: function(el) {
        var that = this, o2 = this.options;
        var $el = $3(el);
        var img2 = $3("<img>"), src;
        var imageContainer, imageWrapper, activity;
        imageContainer = this.lightbox.find(".lightbox__image");
        imageContainer.find(".lightbox__image-wrapper").remove();
        imageWrapper = $3("<div>").addClass("lightbox__image-wrapper").addClass(o2.clsImageWrapper).attr("data-title", $el.attr("alt") || $el.attr("data-title") || "").appendTo(imageContainer);
        activity = $3("<div>").appendTo(imageWrapper);
        Metro2.makePlugin(activity, "activity", {
          type: "cycle",
          style: "color"
        });
        this.current = el;
        if (el.tagName === "IMG" || el.tagName === "DIV") {
          src = $el.attr("data-original") || $el.attr("src");
          img2.attr("src", src);
          img2[0].onload = function() {
            var port = this.height > this.width;
            img2.addClass(port ? "lightbox__image-portrait" : "lightbox__image-landscape").addClass(o2.clsImage);
            img2.attr("alt", $el.attr("alt"));
            img2.appendTo(imageWrapper);
            activity.remove();
            that._fireEvent("draw-image", {
              image: img2[0],
              item: imageWrapper[0]
            });
          };
        }
      },
      _index: function(el) {
        var index = -1;
        this.items.each(function(i3) {
          if (this === el) {
            index = i3;
          }
        });
        return index;
      },
      next: function() {
        var index, current = this.current;
        index = this._index(current);
        if (index + 1 >= this.items.length) {
          if (this.options.loop) {
            index = -1;
          } else {
            return;
          }
        }
        this._goto(this.items[index + 1]);
      },
      prev: function() {
        var index, current = this.current;
        index = this._index(current);
        if (index - 1 < 0) {
          if (this.options.loop) {
            index = this.items.length;
          } else {
            return;
          }
        }
        this._goto(this.items[index - 1]);
      },
      open: function(el) {
        this._setupItems();
        this._goto(el);
        this.overlay.show();
        this.lightbox.show();
        return this;
      },
      close: function() {
        this.overlay.hide();
        this.lightbox.hide();
      },
      changeAttribute: function() {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/list/list.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ListDefaultConfig = {
      listDeferred: 0,
      templateBeginToken: "<%",
      templateEndToken: "%>",
      paginationDistance: 5,
      paginationShortMode: true,
      thousandSeparator: ",",
      decimalSeparator: ",",
      itemTag: "li",
      defaultTemplateTag: "div",
      sortClass: null,
      sortDir: "asc",
      sortInitial: true,
      filterClass: null,
      filter: null,
      filterString: "",
      filters: null,
      source: null,
      showItemsSteps: false,
      showSearch: false,
      showListInfo: false,
      showPagination: false,
      showActivity: true,
      muteList: true,
      items: -1,
      itemsSteps: "all, 10,25,50,100",
      itemsAllTitle: "Show all",
      listItemsCountTitle: "Show entries:",
      listSearchTitle: "Search:",
      listInfoTitle: "Showing $1 to $2 of $3 entries",
      paginationPrevTitle: "Prev",
      paginationNextTitle: "Next",
      activityType: "cycle",
      activityStyle: "color",
      activityTimeout: 100,
      searchWrapper: null,
      rowsWrapper: null,
      infoWrapper: null,
      paginationWrapper: null,
      searchThreshold: 500,
      clsComponent: "",
      clsList: "",
      clsListItem: "",
      clsListTop: "",
      clsItemsCount: "",
      clsSearch: "",
      clsListBottom: "",
      clsListInfo: "",
      clsListPagination: "",
      clsPagination: "",
      clsTemplateTag: "",
      onDraw: Metro2.noop,
      onDrawItem: Metro2.noop,
      onSortStart: Metro2.noop,
      onSortStop: Metro2.noop,
      onSortItemSwitch: Metro2.noop,
      onSearch: Metro2.noop,
      onRowsCountChange: Metro2.noop,
      onDataLoad: Metro2.noop,
      onDataLoaded: Metro2.noop,
      onDataLoadError: Metro2.noop,
      onFilterItemAccepted: Metro2.noop,
      onFilterItemDeclined: Metro2.noop,
      onListCreate: Metro2.noop
    };
    Metro2.listSetup = function(options) {
      ListDefaultConfig = $3.extend({}, ListDefaultConfig, options);
    };
    if (typeof globalThis["metroListSetup"] !== void 0) {
      Metro2.listSetup(globalThis["metroListSetup"]);
    }
    Metro2.Component("list", {
      init: function(options, elem) {
        this._super(elem, options, ListDefaultConfig, {
          currentPage: 1,
          pagesCount: 1,
          filterString: "",
          data: null,
          activity: null,
          busy: false,
          filters: [],
          wrapperInfo: null,
          wrapperSearch: null,
          wrapperRows: null,
          wrapperPagination: null,
          filterIndex: null,
          filtersIndexes: [],
          itemTemplate: null,
          sort: {
            dir: "asc",
            colIndex: 0
          },
          header: null,
          items: []
        });
        return this;
      },
      _create: function() {
        var that = this, o2 = this.options;
        if (o2.source) {
          that._fireEvent("data-load", {
            source: o2.source
          });
          fetch(o2.source).then(Metro2.fetch.status).then(Metro2.fetch.json).then(function(data2) {
            that._fireEvent("data-loaded", {
              source: o2.source,
              data: data2
            });
            that._build(data2);
          }).catch(function(error) {
            that._fireEvent("data-load-error", {
              source: o2.source,
              error
            });
          });
        } else {
          that._build();
        }
      },
      _build: function(data2) {
        if (Utils.isValue(data2)) {
          this._createItemsFromJSON(data2);
        } else {
          this._createItemsFromHTML();
        }
        this._createStructure();
        this._createEvents();
        this._fireEvent("list-create");
      },
      _createItemsFromHTML: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var clsTemplateTag = ("" + o2.clsTemplateTag).toArray(",");
        this.items = [];
        $3.each(element2.children(o2.itemTag), function() {
          var tagChildren = $3(this).children("*");
          if (clsTemplateTag.length) {
            if (clsTemplateTag.length === 1) {
              tagChildren.addClass(clsTemplateTag[0]);
            } else {
              tagChildren.each(function(i3, child) {
                $3(child).addClass(clsTemplateTag[i3] ? clsTemplateTag[i3] : clsTemplateTag[clsTemplateTag.length - 1]);
              });
            }
          }
          that.items.push(this);
        });
      },
      _createItemsFromJSON: function(source2) {
        var that = this, o2 = this.options;
        var clsTemplateTag = ("" + o2.clsTemplateTag).toArray(",");
        this.items = [];
        if (Utils.isValue(source2.template)) {
          this.itemTemplate = source2.template;
        }
        if (Utils.isValue(source2.header)) {
          this.header = source2.header;
        }
        if (Utils.isValue(source2.data)) {
          $3.each(source2.data, function() {
            var item = "", row = this;
            var li2 = document.createElement(o2.itemTag);
            var tpl = that.itemTemplate;
            var tagChildren;
            if (!Utils.isValue(tpl)) {
              for (var i3 in row) {
                item += "<" + o2.defaultTemplateTag + ">" + row[i3] + "</" + o2.defaultTemplateTag + ">";
              }
            } else {
              item = Metro2.template(tpl, row, {
                beginToken: o2.templateBeginToken,
                endToken: o2.templateEndToken
              });
            }
            li2.innerHTML = item;
            tagChildren = $3(li2).children("*");
            if (clsTemplateTag.length) {
              if (clsTemplateTag.length === 1) {
                tagChildren.addClass(clsTemplateTag[0]);
              } else {
                tagChildren.each(function(i4, child) {
                  $3(child).addClass(clsTemplateTag[i4] ? clsTemplateTag[i4] : clsTemplateTag[clsTemplateTag.length - 1]);
                });
              }
            }
            that.items.push(li2);
          });
        }
      },
      _createTopBlock: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var top_block = $3("<div>").addClass("list-top").addClass(o2.clsListTop).insertBefore(element2);
        var search_block, search_input, rows_block, rows_select;
        search_block = Utils.isValue(this.wrapperSearch) ? this.wrapperSearch : $3("<div>").addClass("list-search-block").addClass(o2.clsSearch).appendTo(top_block);
        search_input = $3("<input>").attr("type", "text").appendTo(search_block);
        Metro2.makePlugin(search_input, "input", {
          prepend: o2.listSearchTitle
        });
        if (o2.showSearch !== true) {
          search_block.hide();
        }
        rows_block = Utils.isValue(this.wrapperRows) ? this.wrapperRows : $3("<div>").addClass("list-rows-block").addClass(o2.clsItemsCount).appendTo(top_block);
        rows_select = $3("<select>").appendTo(rows_block);
        $3.each(o2.itemsSteps.toArray(), function() {
          var option2 = $3("<option>").attr("value", this === "all" ? -1 : this).text(this === "all" ? o2.itemsAllTitle : this).appendTo(rows_select);
          if (+this === +o2.items) option2.attr("selected", "selected");
        });
        rows_select.select({
          filter: false,
          prepend: o2.listItemsCountTitle,
          onChange: function(val) {
            if (+val === +o2.items) return;
            o2.items = parseInt(val);
            that.currentPage = 1;
            that._draw();
            that._fireEvent("rows-count-change", {
              val
            });
          }
        });
        if (o2.showItemsSteps !== true) {
          rows_block.hide();
        }
        return top_block;
      },
      _createBottomBlock: function() {
        var element2 = this.element, o2 = this.options;
        var bottom_block = $3("<div>").addClass("list-bottom").addClass(o2.clsListBottom).insertAfter(element2);
        var info6, pagination;
        info6 = $3("<div>").addClass("list-info").addClass(o2.clsListInfo).appendTo(bottom_block);
        if (o2.showListInfo !== true) {
          info6.hide();
        }
        pagination = $3("<div>").addClass("list-pagination").addClass(o2.clsListPagination).appendTo(bottom_block);
        if (o2.showPagination !== true) {
          pagination.hide();
        }
        return bottom_block;
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var list_component;
        var w_search = $3(o2.searchWrapper), w_info = $3(o2.infoWrapper), w_rows = $3(o2.rowsWrapper), w_paging = $3(o2.paginationWrapper);
        if (w_search.length > 0) {
          this.wrapperSearch = w_search;
        }
        if (w_info.length > 0) {
          this.wrapperInfo = w_info;
        }
        if (w_rows.length > 0) {
          this.wrapperRows = w_rows;
        }
        if (w_paging.length > 0) {
          this.wrapperPagination = w_paging;
        }
        if (!element2.parent().hasClass("list-component")) {
          list_component = $3("<div>").addClass("list-component").insertBefore(element2);
          element2.appendTo(list_component);
        } else {
          list_component = element2.parent();
        }
        list_component.addClass(o2.clsComponent);
        this.activity = $3("<div>").addClass("list-progress").appendTo(list_component);
        $3("<div>").activity({
          type: o2.activityType,
          style: o2.activityStyle
        }).appendTo(this.activity);
        if (o2.showActivity !== true) {
          this.activity.css({
            visibility: "hidden"
          });
        }
        element2.addClass(o2.clsList);
        this._createTopBlock();
        this._createBottomBlock();
        if (Utils.isValue(o2.filterString)) {
          this.filterString = o2.filterString;
        }
        var filter_func;
        if (Utils.isValue(o2.filter)) {
          filter_func = Utils.isFunc(o2.filter);
          if (filter_func === false) {
            filter_func = Utils.func(o2.filter);
          }
          that.filterIndex = that.addFilter(filter_func);
        }
        if (Utils.isValue(o2.filters) && typeof o2.filters === "string") {
          $3.each(o2.filters.toArray(), function() {
            filter_func = Utils.isFunc(this);
            if (filter_func !== false) {
              that.filtersIndexes.push(that.addFilter(filter_func));
            }
          });
        }
        this.currentPage = 1;
        if (o2.sortInitial !== false) this.sorting(o2.sortClass, o2.sortDir, true);
        else this.draw();
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var component = element2.parent();
        var search = component.find(".list-search-block input");
        var customSearch;
        function searchItem(e) {
          that.filterString = this.value.trim().toLowerCase();
          if (that.filterString[that.filterString.length - 1] === ":") {
            return;
          }
          that.currentPage = 1;
          that._draw();
        }
        searchItem = Hooks.useDebounce(searchItem, o2.searchThreshold);
        search.on(Metro2.events.inputchange, searchItem);
        if (Utils.isValue(this.wrapperSearch)) {
          customSearch = this.wrapperSearch.find("input");
          if (customSearch.length > 0) {
            customSearch.on(Metro2.events.inputchange, searchItem);
          }
        }
        function pageLinkClick(l2) {
          var link2 = $3(l2);
          var item = link2.parent();
          if (item.hasClass("active")) {
            return;
          }
          if (item.hasClass("service")) {
            if (link2.data("page") === "prev") {
              that.currentPage--;
              if (that.currentPage === 0) {
                that.currentPage = 1;
              }
            } else {
              that.currentPage++;
              if (that.currentPage > that.pagesCount) {
                that.currentPage = that.pagesCount;
              }
            }
          } else {
            that.currentPage = link2.data("page");
          }
          that._draw();
        }
        component.on(Metro2.events.click, ".pagination .page-link", function() {
          pageLinkClick(this);
        });
        if (Utils.isValue(this.wrapperPagination)) {
          this.wrapperPagination.on(Metro2.events.click, ".pagination .page-link", function() {
            pageLinkClick(this);
          });
        }
      },
      _info: function(start, stop, length) {
        var element2 = this.element, o2 = this.options;
        var component = element2.parent();
        var info6 = Utils.isValue(this.wrapperInfo) ? this.wrapperInfo : component.find(".list-info");
        var text;
        if (info6.length === 0) {
          return;
        }
        if (stop > length) {
          stop = length;
        }
        if (this.items.length === 0) {
          start = stop = length = 0;
        }
        text = o2.listInfoTitle;
        text = text.replace("$1", start);
        text = text.replace("$2", stop);
        text = text.replace("$3", length);
        info6.html(text);
      },
      _paging: function(length) {
        var element2 = this.element, o2 = this.options;
        var component = element2.parent();
        this.pagesCount = Math.ceil(length / o2.items);
        Metro2.pagination({
          length,
          rows: o2.items,
          current: this.currentPage,
          target: Utils.isValue(this.wrapperPagination) ? this.wrapperPagination : component.find(".list-pagination"),
          claPagination: o2.clsPagination,
          prevTitle: o2.paginationPrevTitle,
          nextTitle: o2.paginationNextTitle,
          distance: o2.paginationShortMode === true ? o2.paginationDistance : 0
        });
      },
      _filter: function() {
        var that = this, o2 = this.options, items, i3, data2, inset, c1, result;
        if (Utils.isValue(this.filterString) || this.filters.length > 0) {
          items = this.items.filter(function(item) {
            data2 = "";
            if (Utils.isValue(o2.filterClass)) {
              inset = item.getElementsByClassName(o2.filterClass);
              if (inset.length > 0)
                for (i3 = 0; i3 < inset.length; i3++) {
                  data2 += inset[i3].textContent;
                }
            } else {
              data2 = item.textContent;
            }
            c1 = data2.replace(/[\n\r]+|[\s]{2,}/g, " ").trim().toLowerCase();
            result = Utils.isValue(that.filterString) ? c1.indexOf(that.filterString) > -1 : true;
            if (result === true && that.filters.length > 0) {
              for (i3 = 0; i3 < that.filters.length; i3++) {
                if (Utils.exec(that.filters[i3], [item]) !== true) {
                  result = false;
                  break;
                }
              }
            }
            if (result) {
              that._fireEvent("filter-item-accepted", {
                item
              });
            } else {
              that._fireEvent("filter-item-declined", {
                item
              });
            }
            return result;
          });
          that._fireEvent("search", {
            search: that.filterString,
            items
          });
        } else {
          items = this.items;
        }
        return items;
      },
      _draw: function(cb) {
        var element2 = this.element, o2 = this.options;
        var i3;
        var start = o2.items === -1 ? 0 : o2.items * (this.currentPage - 1), stop = o2.items === -1 ? this.items.length - 1 : start + o2.items - 1;
        var items;
        items = this._filter();
        element2.children(o2.itemTag).remove();
        for (i3 = start; i3 <= stop; i3++) {
          if (Utils.isValue(items[i3])) {
            $3(items[i3]).addClass(o2.clsListItem).appendTo(element2);
          }
          this._fireEvent("draw-item", {
            item: items[i3]
          });
        }
        this._info(start + 1, stop + 1, items.length);
        this._paging(items.length);
        this.activity.hide();
        this._fireEvent("draw");
        if (cb !== void 0) {
          Utils.exec(cb, [element2], element2[0]);
        }
      },
      _getItemContent: function(item) {
        const locale = this.locale;
        var o2 = this.options, $item = $3(item);
        var i3, inset, data2;
        var format, formatMask = Utils.isValue($item.data("formatMask")) ? $item.data("formatMask") : null;
        if (Utils.isValue(o2.sortClass)) {
          data2 = "";
          inset = $3(item).find("." + o2.sortClass);
          if (inset.length > 0)
            for (i3 = 0; i3 < inset.length; i3++) {
              data2 += inset[i3].textContent;
            }
          format = inset.length > 0 ? inset[0].getAttribute("data-format") : "";
        } else {
          data2 = item.textContent;
          format = item.getAttribute("data-format");
        }
        data2 = ("" + data2).toLowerCase().replace(/[\n\r]+|[\s]{2,}/g, " ").trim();
        if (Utils.isValue(format)) {
          if (["number", "int", "integer", "float", "money"].indexOf(format) !== -1 && (o2.thousandSeparator !== "," || o2.decimalSeparator !== ".")) {
            data2 = Utils.parseNumber(data2, o2.thousandSeparator, o2.decimalSeparator);
          }
          switch (format) {
            case "date":
              data2 = formatMask ? Datetime.from(data2, formatMask, locale) : datetime(data2);
              break;
            case "number":
              data2 = Number(data2);
              break;
            case "int":
            case "integer":
              data2 = parseInt(data2);
              break;
            case "float":
              data2 = parseFloat(data2);
              break;
            case "money":
              data2 = Utils.parseMoney(data2);
              break;
            case "card":
              data2 = Utils.parseCard(data2);
              break;
            case "phone":
              data2 = Utils.parsePhone(data2);
              break;
          }
        }
        return data2;
      },
      deleteItem: function(value) {
        var i3, deleteIndexes = [], item;
        var is_func = Utils.isFunc(value);
        for (i3 = 0; i3 < this.items.length; i3++) {
          item = this.items[i3];
          if (is_func) {
            if (Utils.exec(value, [item])) {
              deleteIndexes.push(i3);
            }
          } else {
            if (item.textContent.includes(value)) {
              deleteIndexes.push(i3);
            }
          }
        }
        this.items = Utils.arrayDeleteByMultipleKeys(this.items, deleteIndexes);
        return this;
      },
      draw: function() {
        return this._draw();
      },
      sorting: function(source2, dir, redraw) {
        var that = this, o2 = this.options;
        if (Utils.isValue(source2)) {
          o2.sortClass = source2;
        }
        if (Utils.isValue(dir) && ["asc", "desc"].indexOf(dir) > -1) {
          o2.sortDir = dir;
        }
        this._fireEvent("sort-start", {
          items: this.items
        });
        this.items.sort(function(a2, b2) {
          var c1 = that._getItemContent(a2);
          var c2 = that._getItemContent(b2);
          var result = 0;
          if (c1 < c2) {
            result = o2.sortDir === "asc" ? -1 : 1;
          }
          if (c1 > c2) {
            result = o2.sortDir === "asc" ? 1 : -1;
          }
          if (result !== 0) {
            that._fireEvent("sort-item-switch", {
              a: a2,
              b: b2,
              result
            });
          }
          return result;
        });
        this._fireEvent("sort-stop", {
          items: this.items
        });
        if (redraw === true) {
          this._draw();
        }
        return this;
      },
      filter: function(val) {
        this.filterString = val.trim().toLowerCase();
        this.currentPage = 1;
        this._draw();
      },
      setData: function(data2) {
        var that = this, element2 = this.element, o2 = this.options;
        if (Utils.isValue(data2) !== true) {
          return;
        }
        that._createItemsFromJSON(data2);
        element2.html("");
        if (Utils.isValue(o2.filterString)) {
          that.filterString = o2.filterString;
        }
        var filter_func;
        if (Utils.isValue(o2.filter)) {
          filter_func = Utils.isFunc(o2.filter);
          if (filter_func === false) {
            filter_func = Utils.func(o2.filter);
          }
          that.filterIndex = that.addFilter(filter_func);
        }
        if (Utils.isValue(o2.filters) && typeof o2.filters === "string") {
          $3.each(o2.filters.toArray(), function() {
            filter_func = Utils.isFunc(this);
            if (filter_func !== false) {
              that.filtersIndexes.push(that.addFilter(filter_func));
            }
          });
        }
        that.currentPage = 1;
        that.sorting(o2.sortClass, o2.sortDir, true);
      },
      loadData: function(source2) {
        var that = this, o2 = this.options;
        if (Utils.isValue(source2) !== true) {
          return;
        }
        o2.source = source2;
        this._fireEvent("data-load", {
          source: o2.source
        });
        fetch(o2.source).then(Metro2.fetch.status).then(Metro2.fetch.json).then(function(data2) {
          that._fireEvent("data-loaded", {
            source: o2.source,
            data: data2
          });
          that.setData(data2);
        }).catch(function(error) {
          that._fireEvent("data-load-error", {
            source: o2.source,
            error
          });
        });
      },
      next: function() {
        if (this.items.length === 0) return;
        this.currentPage++;
        if (this.currentPage > this.pagesCount) {
          this.currentPage = this.pagesCount;
          return;
        }
        this._draw();
      },
      prev: function() {
        if (this.items.length === 0) return;
        this.currentPage--;
        if (this.currentPage === 0) {
          this.currentPage = 1;
          return;
        }
        this._draw();
      },
      first: function() {
        if (this.items.length === 0) return;
        this.currentPage = 1;
        this._draw();
      },
      last: function() {
        if (this.items.length === 0) return;
        this.currentPage = this.pagesCount;
        this._draw();
      },
      page: function(num) {
        if (num <= 0) {
          num = 1;
        }
        if (num > this.pagesCount) {
          num = this.pagesCount;
        }
        this.currentPage = num;
        this._draw();
      },
      addFilter: function(f3, redraw) {
        var func = Utils.isFunc(f3);
        if (func === false) {
          return;
        }
        this.filters.push(func);
        if (redraw === true) {
          this.currentPage = 1;
          this.draw();
        }
        return this.filters.length - 1;
      },
      removeFilter: function(key, redraw) {
        Utils.arrayDeleteByKey(this.filters, key);
        if (redraw === true) {
          this.currentPage = 1;
          this.draw();
        }
        return this;
      },
      removeFilters: function(redraw) {
        this.filters = [];
        if (redraw === true) {
          this.currentPage = 1;
          this.draw();
        }
      },
      getFilters: function() {
        return this.filters;
      },
      getFilterIndex: function() {
        return this.filterIndex;
      },
      getFiltersIndexes: function() {
        return this.filtersIndexes;
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        var changeSortDir = function() {
          var dir = element2.attr("data-sort-dir");
          if (!Utils.isValue(dir)) {
            return;
          }
          o2.sortDir = dir;
          that.sorting(o2.sortClass, o2.sortDir, true);
        };
        var changeSortClass = function() {
          var target = element2.attr("data-sort-source");
          if (!Utils.isValue(target)) {
            return;
          }
          o2.sortClass = target;
          that.sorting(o2.sortClass, o2.sortDir, true);
        };
        var changeFilterString = function() {
          var filter = element2.attr("data-filter-string");
          if (!Utils.isValue(filter)) {
            return;
          }
          o2.filterString = filter;
          that.filter(o2.filterString);
        };
        switch (attributeName) {
          case "data-sort-dir":
            changeSortDir();
            break;
          case "data-sort-source":
            changeSortClass();
            break;
          case "data-filter-string":
            changeFilterString();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var component = element2.parent();
        var search = component.find(".list-search-block input");
        var customSearch;
        search.off(Metro2.events.inputchange);
        if (Utils.isValue(this.wrapperSearch)) {
          customSearch = this.wrapperSearch.find("input");
          if (customSearch.length > 0) {
            customSearch.off(Metro2.events.inputchange);
          }
        }
        component.off(Metro2.events.click, ".pagination .page-link");
        if (Utils.isValue(this.wrapperPagination)) {
          this.wrapperPagination.off(Metro2.events.click, ".pagination .page-link");
        }
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/listview/listview.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ListViewDefaultConfig = {
      listviewDeferred: 0,
      selectable: false,
      checkStyle: 1,
      duration: 100,
      view: Metro2.listView.LIST,
      selectCurrent: true,
      structure: {},
      onNodeInsert: Metro2.noop,
      onNodeDelete: Metro2.noop,
      onNodeClean: Metro2.noop,
      onCollapseNode: Metro2.noop,
      onExpandNode: Metro2.noop,
      onGroupNodeClick: Metro2.noop,
      onNodeClick: Metro2.noop,
      onNodeDblclick: Metro2.noop,
      onListViewCreate: Metro2.noop
    };
    Metro2.listViewSetup = function(options) {
      ListViewDefaultConfig = $3.extend({}, ListViewDefaultConfig, options);
    };
    if (typeof globalThis["metroListViewSetup"] !== void 0) {
      Metro2.listViewSetup(globalThis["metroListViewSetup"]);
    }
    Metro2.Component("listview", {
      init: function(options, elem) {
        this._super(elem, options, ListViewDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createView();
        this._createEvents();
        this._fireEvent("listview-create", {
          element: element2
        });
      },
      _createIcon: function(data2) {
        var icon, src;
        src = Utils.isTag(data2) ? $3(data2) : $3("<img>").attr("src", data2);
        icon = $3("<span>").addClass("icon");
        icon.html(src.outerHTML());
        return icon;
      },
      _createCaption: function(data2) {
        return $3("<div>").addClass("caption").html(data2);
      },
      _createContent: function(data2) {
        return $3("<div>").addClass("content").html(data2);
      },
      _createToggle: function() {
        return $3("<span>").addClass("node-toggle");
      },
      _createNode: function(data2) {
        var that = this, o2 = this.options;
        var node;
        node = $3("<li>");
        if (data2.caption !== void 0 || data2.content !== void 0) {
          var d2 = $3("<div>").addClass("data");
          node.prepend(d2);
          if (data2.caption !== void 0) d2.append(that._createCaption(data2.caption));
          if (data2.content !== void 0) d2.append(that._createContent(data2.content));
        }
        if (data2.icon !== void 0) {
          node.prepend(this._createIcon(data2.icon));
        }
        if (Utils.objectLength(o2.structure) > 0) $3.each(o2.structure, function(key, val) {
          if (data2[key] !== void 0) {
            $3("<div>").addClass("node-data item-data-" + key).addClass(data2[val]).html(data2[key]).appendTo(node);
          }
        });
        if (data2.attributes && Utils.isObject(data2.attributes)) {
          for (let key in data2.attributes) {
            node.attr(`data-${key}`, data2.attributes[key]);
          }
        }
        if (data2.class) {
          node.addClass(data2.class);
        }
        if (data2.badge) {
          node.append(
            $3("<span>").addClass("badge").html(data2.badge)
          );
        }
        if (data2.badges) {
          const badges = $3("<div>").addClass("badges").appendTo(node);
          data2.badges.map((b2) => {
            if (!b2) return;
            badges.append(
              $3(b2).addClass("badge")
            );
          });
        }
        return node;
      },
      _createView: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var nodes = element2.find("li");
        var struct_length = Utils.objectLength(o2.structure);
        element2.addClass("listview");
        element2.find("ul").addClass("listview");
        $3.each(nodes, function() {
          var node = $3(this);
          if (node.data("caption") !== void 0 || node.data("content") !== void 0) {
            var data2 = $3("<div>").addClass("data");
            node.prepend(data2);
            if (node.data("caption") !== void 0) data2.append(that._createCaption(node.data("caption")));
            if (node.data("content") !== void 0) data2.append(that._createContent(node.data("content")));
          }
          if (node.data("icon") !== void 0) {
            node.prepend(that._createIcon(node.data("icon")));
          }
          if (node.children("ul").length > 0) {
            node.addClass("node-group");
            node.append(that._createToggle());
            if (node.data("collapsed") !== true) node.addClass("expanded");
          } else {
            node.addClass("node");
          }
          if (node.hasClass("node")) {
            var cb = $3("<input type='checkbox' data-role='checkbox' data-style='" + o2.checkStyle + "'>");
            cb.data("node", node);
            node.prepend(cb);
          }
          if (struct_length > 0) $3.each(o2.structure, function(key) {
            if (node.data(key) !== void 0) {
              $3("<div>").addClass("node-data item-data-" + key).addClass(node.data(key)).html(node.data(key)).appendTo(node);
            }
          });
          if (node.data("class") !== void 0) {
            node.addClass(node.data("class"));
          }
        });
        this.toggleSelectable();
        this.view(o2.view);
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.dblclick, ".node", function() {
          var node = $3(this);
          that._fireEvent("node-dblclick", {
            node
          });
        });
        element2.on(Metro2.events.click, ".node", function() {
          var node = $3(this);
          var href = $3(this).attr("href");
          if (href) {
            globalThis.location.href = href;
            return;
          }
          element2.find(".node").removeClass("current");
          node.toggleClass("current");
          if (o2.selectCurrent === true) {
            element2.find(".node").removeClass("current-select");
            node.toggleClass("current-select");
          }
          that._fireEvent("node-click", {
            node
          });
        });
        element2.on(Metro2.events.click, ".node-toggle", function() {
          var node = $3(this).closest("li");
          that.toggleNode(node);
        });
        element2.on(Metro2.events.click, ".node-group > .data > .caption", function() {
          var node = $3(this).closest("li");
          element2.find(".node-group").removeClass("current-group");
          node.addClass("current-group");
          that._fireEvent("group-node-click", {
            node
          });
        });
        element2.on(Metro2.events.dblclick, ".node-group > .data > .caption", function() {
          var node = $3(this).closest("li");
          that.toggleNode(node);
          that._fireEvent("node-dbl-click", {
            node
          });
        });
      },
      view: function(v2) {
        var element2 = this.element, o2 = this.options;
        if (v2 === void 0) {
          return o2.view;
        }
        o2.view = v2;
        $3.each(Metro2.listView, function(i3, v3) {
          element2.removeClass("view-" + v3);
          element2.find("ul").removeClass("view-" + v3);
        });
        element2.addClass("view-" + o2.view);
        element2.find("ul").addClass("view-" + o2.view);
      },
      toggleNode: function(node) {
        var o2 = this.options;
        var func;
        node = $3(node);
        if (!node.hasClass("node-group")) {
          return;
        }
        node.toggleClass("expanded");
        func = node.hasClass("expanded") !== true ? "slideUp" : "slideDown";
        this._fireEvent("collapse-node", {
          node
        });
        node.children("ul")[func](o2.duration);
      },
      toggleSelectable: function() {
        var element2 = this.element, o2 = this.options;
        var func = o2.selectable === true ? "addClass" : "removeClass";
        element2[func]("selectable");
        element2.find("ul")[func]("selectable");
      },
      add: function(node, data2) {
        var element2 = this.element, o2 = this.options;
        var target;
        var new_node;
        var toggle;
        if (node === null) {
          target = element2;
        } else {
          node = $3(node);
          if (!node.hasClass("node-group")) {
            return;
          }
          target = node.children("ul");
          if (target.length === 0) {
            target = $3("<ul>").addClass("listview").addClass("view-" + o2.view).appendTo(node);
            toggle = this._createToggle();
            toggle.appendTo(node);
            node.addClass("expanded");
          }
        }
        new_node = this._createNode(data2);
        new_node.addClass("node").appendTo(target);
        var cb = $3("<input type='checkbox'>");
        cb.data("node", new_node);
        new_node.prepend(cb);
        Metro2.makePlugin(cb, "checkbox", {});
        this._fireEvent("node-insert", {
          newNode: new_node,
          parentNode: node,
          list: target
        });
        return new_node;
      },
      addGroup: function(data2) {
        var element2 = this.element, o2 = this.options;
        var node;
        delete data2["icon"];
        node = this._createNode(data2);
        node.addClass("node-group").appendTo(element2);
        node.append(this._createToggle());
        node.addClass("expanded");
        node.append($3("<ul>").addClass("listview").addClass("view-" + o2.view));
        this._fireEvent("node-insert", {
          newNode: node,
          parentNode: null,
          list: element2
        });
        return node;
      },
      insertBefore: function(node, data2) {
        var new_node, parent_node, list;
        node = $3(node);
        if (!node.length) {
          return;
        }
        new_node = this._createNode(data2);
        new_node.addClass("node").insertBefore(node);
        parent_node = new_node.closest(".node");
        list = new_node.closest("ul");
        this._fireEvent("node-insert", {
          newNode: new_node,
          parentNode: parent_node,
          list
        });
        return new_node;
      },
      insertAfter: function(node, data2) {
        var new_node, parent_node, list;
        node = $3(node);
        if (!node.length) {
          return;
        }
        new_node = this._createNode(data2);
        new_node.addClass("node").insertAfter(node);
        parent_node = new_node.closest(".node");
        list = new_node.closest("ul");
        this._fireEvent("node-insert", {
          newNode: new_node,
          parentNode: parent_node,
          list
        });
        return new_node;
      },
      del: function(node) {
        var element2 = this.element;
        node = $3(node);
        if (!node.length) {
          return;
        }
        var parent_list = node.closest("ul");
        var parent_node = parent_list.closest("li");
        node.remove();
        if (parent_list.children().length === 0 && !parent_list.is(element2)) {
          parent_list.remove();
          parent_node.removeClass("expanded");
          parent_node.children(".node-toggle").remove();
        }
        this._fireEvent("node-delete", {
          node
        });
      },
      clean: function(node) {
        node = $3(node);
        if (!node.length) {
          return;
        }
        node.children("ul").remove();
        node.removeClass("expanded");
        node.children(".node-toggle").remove();
        this._fireEvent("node-clean", {
          node
        });
      },
      getSelected: function() {
        var element2 = this.element;
        var nodes = [];
        $3.each(element2.find(":checked"), function() {
          var check = $3(this);
          nodes.push(check.closest(".node")[0]);
        });
        return nodes;
      },
      clearSelected: function() {
        this.element.find(":checked").prop("checked", false);
        this.element.trigger("change");
      },
      selectAll: function(mode) {
        this.element.find(".node > .checkbox input").prop("checked", mode !== false);
        this.element.trigger("change");
      },
      selectByAttribute: function(attributeName, attributeValue, select2) {
        if (select2 !== false) {
          select2 = true;
        }
        this.element.find("li[" + attributeName + '="' + attributeValue + '"] > .checkbox input').prop("checked", select2);
        this.element.trigger("change");
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        var changeView = function() {
          var new_view = "view-" + element2.attr("data-view");
          that.view(new_view);
        };
        var changeSelectable = function() {
          o2.selectable = JSON.parse(element2.attr("data-selectable")) === true;
          that.toggleSelectable();
        };
        switch (attributeName) {
          case "data-view":
            changeView();
            break;
          case "data-selectable":
            changeSelectable();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".node");
        element2.off(Metro2.events.click, ".node-toggle");
        element2.off(Metro2.events.click, ".node-group > .data > .caption");
        element2.off(Metro2.events.dblclick, ".node-group > .data > .caption");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/marquee/marquee.js
  (function(Metro2, $3) {
    "use strict";
    var MarqueeDefaultConfig = {
      items: null,
      loop: true,
      height: "auto",
      width: "100%",
      duration: 1e4,
      direction: "left",
      ease: "linear",
      mode: "default",
      // default || accent
      accentPause: 2e3,
      firstPause: 1e3,
      stopOnHover: true,
      clsMarquee: "",
      clsMarqueeItem: "",
      onMarqueeItem: Metro2.noop,
      onMarqueeItemComplete: Metro2.noop,
      onMarqueeComplete: Metro2.noop,
      onMarqueeCreate: Metro2.noop
    };
    Metro2.marqueeSetup = function(options) {
      MarqueeDefaultConfig = $3.extend({}, MarqueeDefaultConfig, options);
    };
    if (typeof globalThis["metroMarqueeSetup"] !== void 0) {
      Metro2.marqueeSetup(globalThis["metroMarqueeSetup"]);
    }
    Metro2.Component("marquee", {
      init: function(options, elem) {
        this._super(elem, options, MarqueeDefaultConfig, {
          // define instance vars here
          origin: null,
          items: [],
          running: false,
          current: -1,
          chain: []
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("marquee-create");
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("marquee").addClass(o2.clsMarquee);
        element2.css({
          height: o2.height,
          width: o2.width
        });
        const items = element2.html().split("\n").map((a2) => a2.trim()).filter((a2) => a2.length);
        const itemsFromOptions = Metro2.utils.isObject(o2.items) || [];
        this.origin = [...items, ...itemsFromOptions];
        this.setItems(this.origin, true);
        if (this.items.length) {
          this.current = 0;
          this.createChain();
          console.log(this.chain);
          this.start();
        }
      },
      setItems: function(items, replace = true) {
        const element2 = this.element, o2 = this.options;
        const dir = o2.direction.toLowerCase();
        if (replace) {
          this.items.length = 0;
        }
        element2.clear();
        this.items = items.map((item) => {
          return $3("<div>").html(item).addClass("marquee__item").addClass(o2.clsMarqueeItem).appendTo(element2)[0];
        });
        $3(this.items).addClass(dir === "left" || dir === "right" ? "moveLeftRight" : "moveUpDown");
        if (o2.height === "auto") {
          let h7 = 0;
          $3(this.items).each(function() {
            const el = $3(this);
            const eh = +el.outerHeight(true);
            if (eh > h7) {
              h7 = eh;
            }
          });
          element2.height(h7);
        }
        return this;
      },
      setItem: function(index, value) {
        var target = $3(this.items[index]), h7, o2 = this.options, element2 = this.element;
        if (!target.length) {
          return;
        }
        target.html(value);
        h7 = target.outerHeight(true);
        if (o2.height === "auto" && element2.height() < h7) {
          element2.height(h7);
        }
        return this;
      },
      addItem: function(item, index = -1) {
        var element2 = this.element, o2 = this.options;
        var ins2, $item = $3(item), trg, h7;
        ins2 = $item.length ? $item : $3("<div>").html(item);
        if (index < 0) {
          element2.append(ins2);
        } else {
          trg = this.items[index];
          if (trg) {
            ins2.insertBefore(trg);
          } else {
            element2.append(ins2);
          }
        }
        h7 = ins2.outerHeight(true);
        if (o2.height === "auto" && element2.height() < h7) {
          element2.height(h7);
        }
        return this;
      },
      createChain: function() {
        const element2 = this.element, o2 = this.options, magic = 20;
        let dir = o2.direction;
        let ease = o2.ease;
        let dur = +o2.duration;
        let i3 = 0;
        let rect = element2[0].getBoundingClientRect();
        this.chain.length = 0;
        if (o2.mode === "default") {
          for (const item of this.items) {
            const el = $3(item);
            const elRect = item.getBoundingClientRect();
            const half = (rect.width - elRect.width) / 2;
            let draw;
            if (el.attr("data-direction")) {
              dir = el.attr("data-direction");
            }
            if (el.attr("data-duration")) {
              dur = +el.attr("data-duration");
            }
            if (el.attr("data-ease")) {
              ease = el.attr("data-ease");
            } else {
              ease = o2.ease;
            }
            if (["left", "right"].indexOf(dir) > -1) {
              draw = {
                left: dir === "left" ? [rect.width, -elRect.width - magic] : [-elRect.width - magic, rect.width]
              };
            } else {
              draw = {
                top: dir === "up" ? [rect.height, -elRect.height - magic] : [-elRect.height - magic, rect.height]
              };
            }
            this.chain.push({
              el: el[0],
              draw,
              dur,
              ease,
              defer: i3 === 0 ? +o2.firstPause : 0
            });
            i3++;
          }
        } else {
          for (const item of this.items) {
            const el = $3(item);
            const elRect = item.getBoundingClientRect();
            const halfW = (rect.width - elRect.width) / 2;
            const halfH = (rect.height - elRect.height) / 2;
            let draw1, draw2;
            dur = o2.duration / 2;
            if (el.attr("data-direction")) {
              dir = el.attr("data-direction").toLowerCase();
            }
            if (el.attr("data-duration")) {
              dur = +el.attr("data-duration") / 2;
            }
            let _ease = ease ? ease.split(" ") : ["linear"];
            if (el.attr("data-ease")) {
              _ease = el.attr("data-ease").split(" ");
            }
            if (["left", "right"].includes(dir)) {
              draw1 = {
                left: dir === "left" ? [rect.width, halfW] : [-elRect.width - magic, halfW]
              };
              draw2 = {
                left: dir === "left" ? [halfW, -elRect.width - magic] : [halfW, rect.width + magic]
              };
            } else {
              draw1 = {
                top: dir === "up" ? [rect.height, halfH] : [-elRect.height - magic, halfH]
              };
              draw2 = {
                top: dir === "up" ? [halfH, -elRect.height - magic] : [halfH, rect.height + magic]
              };
            }
            this.chain.push({
              el: el[0],
              draw: draw1,
              dur,
              ease: _ease[0] || "linear",
              defer: i3 === 0 ? +o2.firstPause : 0
            });
            this.chain.push({
              el: el[0],
              draw: draw2,
              dur,
              ease: _ease[1] ? _ease[1] : _ease[0] ? _ease[0] : "linear",
              defer: +o2.accentPause
            });
            i3++;
          }
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.enter, function() {
          if (o2.stopOnHover)
            $3.pauseAll(that.items);
        });
        element2.on(Metro2.events.leave, function() {
          if (o2.stopOnHover)
            $3.resumeAll(that.items);
        });
        const resize = Hooks.useDebounce((e) => {
          that.stop();
          that.setItems(this.items, true);
          that.createChain();
          that.start();
        }, 1e3);
        $3(window).on(Metro2.events.resize, resize);
      },
      start: function() {
        const o2 = this.options;
        this.running = true;
        $3.chain(this.chain, {
          loop: o2.loop,
          onChainItem: Metro2.utils.isFunc(o2.onMarqueeItem),
          onChainItemComplete: Metro2.utils.isFunc(o2.onMarqueeItemComplete),
          onChainComplete: Metro2.utils.isFunc(o2.onMarqueeComplete)
        });
        return this;
      },
      stop: function() {
        this.running = false;
        $3.stopAll(false);
        return this;
      },
      changeAttribute: function() {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/master/master.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var MasterDefaultConfig = {
      masterDeferred: 0,
      effect: "slide",
      // slide, fade, switch, slowdown, custom
      effectFunc: "linear",
      duration: METRO_ANIMATION_DURATION,
      controlPrev: "\u{1F850}",
      controlNext: "\u{1F852}",
      controlTitle: "Master, page $1 of $2",
      backgroundImage: "",
      clsMaster: "",
      clsControls: "",
      clsControlPrev: "",
      clsControlNext: "",
      clsControlTitle: "",
      clsPages: "",
      clsPage: "",
      onBeforePage: Metro2.noop_true,
      onBeforeNext: Metro2.noop_true,
      onBeforePrev: Metro2.noop_true,
      onNextPage: Metro2.noop,
      onPrevPage: Metro2.noop,
      onMasterCreate: Metro2.noop
    };
    Metro2.masterSetup = function(options) {
      MasterDefaultConfig = $3.extend({}, MasterDefaultConfig, options);
    };
    if (typeof globalThis["metroMasterSetup"] !== void 0) {
      Metro2.masterSetup(globalThis["metroMasterSetup"]);
    }
    Metro2.Component("master", {
      init: function(options, elem) {
        this._super(elem, options, MasterDefaultConfig, {
          pages: [],
          currentIndex: 0,
          isAnimate: false,
          id: Utils.elementId("master")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("master").addClass(o2.clsMaster);
        element2.css({
          backgroundImage: "url(" + o2.backgroundImage + ")"
        });
        this._createControls();
        this._createPages();
        this._createEvents();
        this._fireEvent("master-create", {
          element: element2
        });
      },
      _createControls: function() {
        var element2 = this.element, o2 = this.options;
        var controls_position = ["top", "bottom"];
        var controls, title3, pages = element2.find(".page");
        title3 = String(o2.controlTitle).replace("$1", "1");
        title3 = String(title3).replace("$2", pages.length);
        $3.each(controls_position, function() {
          controls = $3("<div>").addClass("controls controls-" + this).addClass(o2.clsControls).appendTo(element2);
          $3("<span>").addClass("prev").addClass(o2.clsControlPrev).html(o2.controlPrev).appendTo(controls);
          $3("<span>").addClass("next").addClass(o2.clsControlNext).html(o2.controlNext).appendTo(controls);
          $3("<span>").addClass("title").addClass(o2.clsControlTitle).html(title3).appendTo(controls);
        });
        this._enableControl("prev", false);
      },
      _enableControl: function(type, state2) {
        var control = this.element.find(".controls ." + type);
        if (state2 === true) {
          control.removeClass("disabled");
        } else {
          control.addClass("disabled");
        }
      },
      _setTitle: function() {
        var title3 = this.element.find(".controls .title");
        var title_str = this.options.controlTitle.replace("$1", this.currentIndex + 1);
        title_str = title_str.replace("$2", String(this.pages.length));
        title3.html(title_str);
      },
      _createPages: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var pages = element2.find(".pages");
        var page = element2.find(".page");
        if (pages.length === 0) {
          pages = $3("<div>").addClass("pages").appendTo(element2);
        }
        pages.addClass(o2.clsPages);
        $3.each(page, function() {
          var p3 = $3(this);
          if (p3.data("cover") !== void 0) {
            element2.css({
              backgroundImage: "url(" + p3.data("cover") + ")"
            });
          } else {
            element2.css({
              backgroundImage: "url(" + o2.backgroundImage + ")"
            });
          }
          p3.css({
            left: "100%"
          });
          p3.addClass(o2.clsPage).hide(0);
          that.pages.push(p3);
        });
        page.appendTo(pages);
        this.currentIndex = 0;
        if (this.pages[this.currentIndex] !== void 0) {
          if (this.pages[this.currentIndex].data("cover") !== void 0) {
            element2.css({
              backgroundImage: "url(" + this.pages[this.currentIndex].data("cover") + ")"
            });
          }
          this.pages[this.currentIndex].css("left", "0").show(0);
          setTimeout(function() {
            pages.css({
              height: that.pages[0].outerHeight(true) + 2
            });
          }, 0);
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.click, ".controls .prev", function() {
          if (that.isAnimate === true) {
            return;
          }
          if (Utils.exec(o2.onBeforePrev, [that.currentIndex, that.pages[that.currentIndex], element2]) === true && Utils.exec(o2.onBeforePage, ["prev", that.currentIndex, that.pages[that.currentIndex], element2]) === true) {
            that.prev();
          }
        });
        element2.on(Metro2.events.click, ".controls .next", function() {
          if (that.isAnimate === true) {
            return;
          }
          if (Utils.exec(o2.onBeforeNext, [that.currentIndex, that.pages[that.currentIndex], element2]) === true && Utils.exec(o2.onBeforePage, ["next", that.currentIndex, that.pages[that.currentIndex], element2]) === true) {
            that.next();
          }
        });
        $3(globalThis).on(Metro2.events.resize, function() {
          element2.find(".pages").height(that.pages[that.currentIndex].outerHeight(true) + 2);
        }, { ns: this.id });
      },
      _slideToPage: function(index) {
        var current, next, to;
        if (this.pages[index] === void 0) {
          return;
        }
        if (this.currentIndex === index) {
          return;
        }
        to = index > this.currentIndex ? "next" : "prev";
        current = this.pages[this.currentIndex];
        next = this.pages[index];
        this.currentIndex = index;
        this._effect(current, next, to);
      },
      _slideTo: function(to) {
        var current, next, forward = to.toLowerCase() === "next";
        current = this.pages[this.currentIndex];
        if (forward) {
          if (this.currentIndex + 1 >= this.pages.length) {
            return;
          }
          this.currentIndex++;
        } else {
          if (this.currentIndex - 1 < 0) {
            return;
          }
          this.currentIndex--;
        }
        next = this.pages[this.currentIndex];
        this._fireEvent(forward ? "next-page" : "prev-page", {
          current,
          next,
          forward
        });
        this._effect(current, next, to);
      },
      _effect: function(current, next, to) {
        var that = this, element2 = this.element, o2 = this.options;
        var out = element2.width();
        var pages = element2.find(".pages");
        this._setTitle();
        if (this.currentIndex === this.pages.length - 1) {
          this._enableControl("next", false);
        } else {
          this._enableControl("next", true);
        }
        if (this.currentIndex === 0) {
          this._enableControl("prev", false);
        } else {
          this._enableControl("prev", true);
        }
        setTimeout(function() {
          that.isAnimate = true;
          pages.animate({
            draw: {
              height: next.outerHeight(true) + 2
            },
            onDone: function() {
              finish();
            }
          });
        }, 0);
        pages.css("overflow", "hidden");
        function finish() {
          if (next.data("cover") !== void 0) {
            element2.css({
              backgroundImage: "url(" + next.data("cover") + ")"
            });
          } else {
            element2.css({
              backgroundImage: "url(" + o2.backgroundImage + ")"
            });
          }
          pages.css("overflow", "initial");
          that.isAnimate = false;
        }
        function _slide() {
          current.stop(true).animate({
            draw: {
              left: to === "next" ? -out : out
            },
            dur: o2.duration,
            ease: o2.effectFunc,
            onDone: function() {
              current.hide(0);
            }
          });
          next.stop(true).css({
            left: to === "next" ? out : -out
          }).show(0).animate({
            draw: {
              left: 0
            },
            dur: o2.duration,
            ease: o2.effectFunc,
            onDone: function() {
              finish();
            }
          });
        }
        function _switch() {
          current.hide();
          next.css({
            top: 0,
            left: 0,
            opacity: 0
          }).show(function() {
            finish();
          });
        }
        function _fade() {
          current.fadeOut(o2.duration);
          next.css({
            top: 0,
            left: 0,
            opacity: 0
          }).fadeIn(o2.duration, "linear", function() {
            finish();
          });
        }
        switch (o2.effect) {
          case "fade":
            _fade();
            break;
          case "switch":
            _switch();
            break;
          default:
            _slide();
        }
      },
      toPage: function(index) {
        this._slideToPage(index);
      },
      next: function() {
        this._slideTo("next");
      },
      prev: function() {
        this._slideTo("prev");
      },
      changeEffect: function() {
        this.options.effect = this.element.attr("data-effect");
      },
      changeEffectFunc: function() {
        this.options.effectFunc = this.element.attr("data-effect-func");
      },
      changeEffectDuration: function() {
        this.options.duration = this.element.attr("data-duration");
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-effect":
            this.changeEffect();
            break;
          case "data-effect-func":
            this.changeEffectFunc();
            break;
          case "data-duration":
            this.changeEffectDuration();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".controls .prev");
        element2.off(Metro2.events.click, ".controls .next");
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/navview/navview.js
  (function(Metro2, $3) {
    "use strict";
    let NavigationViewDefaultConfig = {
      navviewDeferred: 0,
      expandPoint: null,
      // compacted: false,
      toggle: null,
      animate: true,
      activeState: true,
      initialView: "expand",
      onMenuItemClick: Metro2.noop,
      onPaneClose: Metro2.noop,
      onBeforePaneClose: Metro2.noop,
      onPaneOpen: Metro2.noop,
      onBeforePaneOpen: Metro2.noop,
      onNavviewCreate: Metro2.noop
    };
    Metro2.navViewSetup = function(options) {
      NavigationViewDefaultConfig = $3.extend({}, NavigationViewDefaultConfig, options);
    };
    if (typeof globalThis["metroNavViewSetup"] !== void 0) {
      Metro2.navViewSetup(globalThis["metroNavViewSetup"]);
    }
    Metro2.Component("nav-view", {
      init: function(options, elem) {
        this._super(elem, options, NavigationViewDefaultConfig, {
          pane: null,
          content: null,
          paneToggle: null,
          id: null,
          menuScrollDistance: 0,
          menuScrollStep: 0
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("navview-create");
      },
      _calcMenuHeight: function() {
        let element2 = this.element, pane, menu_container;
        let elements_height = 0;
        pane = element2.children(".navview-pane");
        if (pane.length === 0) {
          return;
        }
        menu_container = pane.children(".navview-menu-container");
        if (menu_container.length === 0) {
          return;
        }
        $3.each(menu_container.prevAll(), function() {
          elements_height += $3(this).outerHeight(true);
        });
        $3.each(menu_container.nextAll(), function() {
          elements_height += $3(this).outerHeight(true);
        });
        menu_container.css({
          height: "calc(100% - " + elements_height + "px)"
        });
        this.menuScrollStep = 48;
        this.menuScrollDistance = Metro2.utils.nearest(menu_container[0].scrollHeight - menu_container.height(), 48);
      },
      _recalc: function() {
        const that = this;
        setTimeout(function() {
          that._calcMenuHeight();
        }, 200);
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        let pane, content, toggle, menu;
        element2.addClass("navview");
        if (element2.attr("id") === void 0) {
          this.id = Metro2.utils.elementId("navview");
          element2.attr("id", this.id);
        } else {
          this.id = element2.attr("id");
        }
        if (o2.initialView !== "compact" && Metro2.utils.mediaExist(o2.expandPoint)) {
          element2.addClass("expanded");
        } else {
          element2.addClass("compacted handmade");
        }
        const state2 = Metro2.storage.getItem("navview:compacted");
        if (state2 === true) {
          element2.removeClass("expanded");
          element2.addClass("compacted handmade");
        }
        pane = element2.children(".navview-pane");
        content = element2.children(".navview-content");
        toggle = $3(o2.toggle);
        menu = pane.children(".navview-menu");
        if (menu.length) {
          menu.prevAll().reverse().wrapAll($3("<div>").addClass("navview-container"));
          menu.wrap($3("<div>").addClass("navview-menu-container"));
          menu.find("a").each(function() {
            const a2 = $3(this);
            const icon = a2.children(".icon");
            const caption2 = a2.children(".caption");
            if (!icon.length) {
              a2.prepend($3("<span>").addClass("icon").html(caption2.text()[0]));
            }
          });
        }
        this.pane = pane.length > 0 ? pane : null;
        this.content = content.length > 0 ? content : null;
        this.paneToggle = toggle.length > 0 ? toggle : null;
        if (o2.animate) {
          element2.addClass("animate-panes");
        }
        this._recalc();
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const menu_container = element2.find(".navview-menu-container");
        const menu = menu_container.children(".navview-menu");
        menu_container.on(
          "mousewheel",
          function(e) {
            const pane_width = element2.find(".navview-pane").width();
            const dir = e.deltaY > 0 ? -1 : 1;
            const step = that.menuScrollStep;
            const distance = that.menuScrollDistance;
            const top = parseInt(menu.css("top"));
            if (pane_width > 50) {
              return false;
            }
            if (dir === -1 && Math.abs(top) <= distance) {
              menu.css("top", parseInt(menu.css("top")) + step * dir);
            }
            if (dir === 1 && top <= -step) {
              menu.css("top", parseInt(menu.css("top")) + step * dir);
            }
          },
          {
            passive: true
          }
        );
        element2.on(Metro2.events.click, ".pull-button", function() {
          that._pullClick(this, "pull");
        });
        element2.on(Metro2.events.click, ".holder", function() {
          that._pullClick(this, "holder");
        });
        element2.on(Metro2.events.click, ".navview-menu li", function() {
          if (o2.activeState === true) {
            element2.find(".navview-menu li.active").removeClass("active");
            $3(this).toggleClass("active");
          }
        });
        element2.on(Metro2.events.click, ".navview-menu li > a", function() {
          that._fireEvent("menu-item-click", {
            item: this
          });
        });
        if (this.paneToggle !== null) {
          this.paneToggle.on(Metro2.events.click, function() {
          });
        }
        menu.find("a").on(Metro2.events.enter, function() {
          if (!element2.hasClass("compacted")) {
            return;
          }
          const a2 = $3(this);
          const r = Metro2.utils.rect(this);
          const c = a2.children(".caption");
          c.css({
            position: "fixed",
            top: r.top,
            left: r.left + menu_container.width(),
            borderRadius: 4,
            paddingLeft: 10,
            boxShadow: "0 0 5px 0 var(--shadow-color)"
          });
        });
        menu.find("a").on(Metro2.events.leave, function() {
          if (!element2.hasClass("compacted")) {
            return;
          }
          const a2 = $3(this);
          const c = a2.children(".caption");
          c[0].style = "";
        });
        $3(globalThis).on(
          Metro2.events.resize,
          () => {
            this._recalc();
            if (!element2.hasClass("handmade")) {
              if (Metro2.utils.isValue(o2.expandPoint) && Metro2.utils.mediaExist(o2.expandPoint)) {
                element2.removeClass("compacted");
                element2.addClass("expanded");
              } else {
                element2.removeClass("expanded");
                element2.addClass("compacted");
              }
            }
          },
          { ns: this.id }
        );
      },
      _togglePaneMode: function(hand = false) {
        const element2 = this.element, o2 = this.options;
        element2.toggleClass("expanded");
        element2.toggleClass("compacted");
        element2.toggleClass("handmade");
        if (element2.hasClass("compacted")) {
          Metro2.storage.setItem("navview:compacted", true);
          Metro2.utils.exec(o2.onPaneClose, null, this);
        } else {
          Metro2.storage.setItem("navview:compacted", false);
          Metro2.utils.exec(o2.onPaneOpen, null, this);
        }
      },
      _pullClick: function(el, sender) {
        let input2, target = $3(el);
        if (target && target.hasClass("holder")) {
          input2 = target.parent().find("input");
          setTimeout(function() {
            input2.focus();
          }, 200);
        }
        this._togglePaneMode(sender === "pull");
        this._recalc();
        return true;
      },
      toggle: function() {
        this._togglePaneMode();
      },
      compact: function() {
        const element2 = this.element;
        element2.addClass("compacted handmade");
        element2.removeClass("expanded");
        this._recalc();
      },
      expand: function() {
        const element2 = this.element;
        element2.addClass("expanded");
        element2.removeClass("compacted handmade");
        this._recalc();
      },
      state() {
        return this.element.hasClass("expanded") ? "expand" : "compact";
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        const element2 = this.element;
        element2.off(Metro2.events.click, ".pull-button, .holder");
        element2.off(Metro2.events.click, ".navview-menu li");
        element2.off(Metro2.events.click, ".navview-menu li > a");
        if (this.paneToggle !== null) {
          this.paneToggle.off(Metro2.events.click);
        }
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        element2.remove();
      }
    });
  })(Metro, Dom);

  // source/components/notify/notify.js
  (function(Metro2, $3) {
    "use strict";
    let NotifyDefaultConfig = {
      container: null,
      width: 220,
      timeout: 3e3,
      duration: METRO_ANIMATION_DURATION,
      distance: "max",
      animation: "linear",
      clsNotify: "",
      onClick: Metro2.noop,
      onClose: Metro2.noop,
      onShow: Metro2.noop,
      onAppend: Metro2.noop,
      onNotifyCreate: Metro2.noop
    };
    Metro2.notifySetup = function(options) {
      NotifyDefaultConfig = $3.extend({}, NotifyDefaultConfig, options);
    };
    if (typeof globalThis["metroNotifySetup"] !== void 0) {
      Metro2.notifySetup(globalThis["metroNotifySetup"]);
    }
    const Notify = {
      container: null,
      options: {},
      notifies: [],
      setup: function(options) {
        this.options = $3.extend({}, NotifyDefaultConfig, options);
        return this;
      },
      reset: function() {
        const reset_options = {
          width: 220,
          timeout: METRO_TIMEOUT,
          duration: METRO_ANIMATION_DURATION,
          distance: "max",
          animation: "linear"
        };
        this.options = $3.extend({}, NotifyDefaultConfig, reset_options);
      },
      _createContainer: function() {
        const container = $3("<div>").addClass("notify-container");
        $3("body").prepend(container);
        return container;
      },
      create: function(message, title3, options = {}) {
        const that = this, o2 = this.options;
        let notify, m2, t, id = Metro2.utils.elementId("notify");
        if (!message) {
          return false;
        }
        notify = $3("<div>").addClass("notify").addClass(o2.clsNotify).attr("id", id);
        notify.css({
          width: o2.width
        });
        if (title3) {
          t = $3("<div>").addClass("notify-title").html(title3);
          notify.prepend(t);
        }
        m2 = $3("<div>").addClass("notify-message").html(message);
        m2.appendTo(notify);
        if (options !== void 0) {
          if (options.clsNotify !== void 0) {
            notify.addClass(options.clsNotify);
          }
          if (options.width !== void 0) {
            notify.css({
              width: options.width
            });
          }
        }
        notify.on(Metro2.events.click, function() {
          Metro2.utils.exec(Metro2.utils.isValue(options.onClick) ? options.onClick : o2.onClick, null, this);
          that.kill($3(this).closest(".notify"), Metro2.utils.isValue(options.onClose) ? options.onClose : o2.onClose);
        });
        if (Notify.container === null) {
          Notify.container = Notify._createContainer();
        }
        notify.appendTo(Notify.container);
        notify.hide(function() {
          Metro2.utils.exec(Metro2.utils.isValue(options.onAppend) ? options.onAppend : o2.onAppend, null, notify[0]);
          const duration = Metro2.utils.isValue(options.duration) ? options.duration : o2.duration;
          const animation = Metro2.utils.isValue(options.animation) ? options.animation : o2.animation;
          let distance = Metro2.utils.isValue(options.distance) ? options.distance : o2.distance;
          if (distance === "max" || isNaN(distance)) {
            distance = $3(globalThis).height();
          }
          notify.show().animate({
            draw: {
              marginTop: [distance, 4],
              opacity: [0, 1]
            },
            dur: duration,
            ease: animation,
            onDone: function() {
              Metro2.utils.exec(o2.onNotifyCreate, null, this);
              if (options !== void 0 && options.keepOpen === true) {
              } else {
                setTimeout(function() {
                  that.kill(notify, Metro2.utils.isValue(options.onClose) ? options.onClose : o2.onClose);
                }, o2.timeout);
              }
              Metro2.utils.exec(Metro2.utils.isValue(options.onShow) ? options.onShow : o2.onShow, null, notify[0]);
            }
          });
        });
      },
      kill: function(notify, callback) {
        const that = this, o2 = this.options;
        notify.off(Metro2.events.click);
        notify.zoomOut(300, "linear", function() {
          Metro2.utils.exec(callback ? callback : that.options.onClose, null, notify[0]);
          notify.remove();
        });
      },
      killAll: function() {
        const that = this;
        const notifies = $3(".notify");
        $3.each(notifies, function() {
          that.kill($3(this));
        });
      }
    };
    Metro2["notify"] = Notify.setup();
  })(Metro, Dom);

  // source/components/pagination/pagination.js
  (function(Metro2, $3) {
    "use strict";
    Metro2.pagination = function(c) {
      var defConf = {
        length: 0,
        //total rows
        rows: 0,
        // page size
        current: 0,
        target: "body",
        clsPagination: "",
        prevTitle: "",
        nextTitle: "",
        distance: 5,
        islandSize: 3,
        shortTrack: 10
      }, conf;
      var strings = Metro2.locales[$3("html").attr("lang") || "en"];
      var i3, prev, next;
      conf = $3.extend({}, defConf, c);
      var distance = parseInt(conf.distance);
      var shortTrack = parseInt(conf.shortTrack);
      var islandSize = parseInt(conf.islandSize);
      var totalRows = parseInt(conf.length);
      var pageSize = parseInt(conf.rows);
      var totalPages = Math.ceil(totalRows / pageSize);
      var current = parseInt(conf.current);
      var pagination_wrapper = $3(conf.target);
      pagination_wrapper.html("");
      var pagination = $3("<ul>").addClass("pagination").addClass(conf.clsPagination).appendTo(pagination_wrapper);
      if (totalRows === 0) {
        return;
      }
      if (pageSize === -1) {
        return;
      }
      var add_item = function(item_title, item_type, data2) {
        var li2, a2;
        li2 = $3("<li>").addClass("page-item").addClass(item_type);
        a2 = $3("<a>").addClass("page-link").html(item_title);
        a2.data("page", data2);
        a2.appendTo(li2);
        return li2;
      };
      prev = add_item(conf.prevTitle || strings.label_prev, "service prev-page", "prev");
      pagination.append(prev);
      pagination.append(add_item(1, current === 1 ? "active" : "", 1));
      if (distance === 0 || totalPages <= shortTrack) {
        for (i3 = 2; i3 < totalPages; i3++) {
          pagination.append(add_item(i3, i3 === current ? "active" : "", i3));
        }
      } else {
        if (current < distance) {
          for (i3 = 2; i3 <= distance; i3++) {
            pagination.append(add_item(i3, i3 === current ? "active" : "", i3));
          }
          if (totalPages > distance) {
            pagination.append(add_item("...", "no-link", null));
          }
        } else if (current <= totalPages && current > totalPages - distance + 1) {
          if (totalPages > distance) {
            pagination.append(add_item("...", "no-link", null));
          }
          for (i3 = totalPages - distance + 1; i3 < totalPages; i3++) {
            pagination.append(add_item(i3, i3 === current ? "active" : "", i3));
          }
        } else {
          pagination.append(add_item("...", "no-link", null));
          for (let i4 = islandSize; i4 > 0; i4--) {
            pagination.append(add_item(current - i4, "", current - i4));
          }
          pagination.append(add_item(current, "active", current));
          for (let i4 = 1; i4 <= islandSize; i4++) {
            pagination.append(add_item(current + i4, "", current + i4));
          }
          pagination.append(add_item("...", "no-link", null));
        }
      }
      if (totalPages > 1 || current < totalPages) pagination.append(add_item(totalPages, current === totalPages ? "active" : "", totalPages));
      next = add_item(conf.nextTitle || strings.label_next, "service next-page", "next");
      pagination.append(next);
      if (current === 1) {
        prev.addClass("disabled");
      }
      if (current === totalPages) {
        next.addClass("disabled");
      }
      if (totalRows === 0) {
        pagination.addClass("disabled");
        pagination.children().addClass("disabled");
      }
      return pagination;
    };
  })(Metro, Dom);

  // source/components/panel/panel.js
  (function(Metro2, $3) {
    "use strict";
    var PanelDefaultConfig = {
      panelDeferred: 0,
      id: null,
      titleCaption: "",
      titleIcon: "",
      collapsible: false,
      collapsed: false,
      collapseDuration: 100,
      width: "auto",
      height: "auto",
      draggable: false,
      customButtons: null,
      clsCustomButton: "",
      clsPanel: "",
      clsTitle: "",
      clsTitleCaption: "",
      clsTitleIcon: "",
      clsContent: "",
      clsCollapseToggle: "",
      onCollapse: Metro2.noop,
      onExpand: Metro2.noop,
      onDragStart: Metro2.noop,
      onDragStop: Metro2.noop,
      onDragMove: Metro2.noop,
      onPanelCreate: Metro2.noop
    };
    Metro2.panelSetup = function(options) {
      PanelDefaultConfig = $3.extend({}, PanelDefaultConfig, options);
    };
    if (typeof globalThis["metroPanelSetup"] !== void 0) {
      Metro2.panelSetup(globalThis["metroPanelSetup"]);
    }
    Metro2.Component("panel", {
      init: function(options, elem) {
        this._super(elem, options, PanelDefaultConfig);
        return this;
      },
      _addCustomButtons: function(buttons) {
        var element2 = this.element, o2 = this.options;
        var title3 = element2.closest(".panel").find(".panel-title");
        var buttonsContainer, customButtons = [];
        customButtons = Metro2.utils.isObject(buttons);
        if (!customButtons) {
          console.warn("Unknown format for custom buttons", buttons);
          return;
        }
        if (title3.length === 0) {
          console.warn("No place for custom buttons");
          return;
        }
        buttonsContainer = title3.find(".custom-buttons");
        if (buttonsContainer.length === 0) {
          buttonsContainer = $3("<div>").addClass("custom-buttons").appendTo(title3);
        } else {
          buttonsContainer.find(".btn-custom").off(Metro2.events.click);
          buttonsContainer.html("");
        }
        $3.each(customButtons, function() {
          var item = this;
          var customButton = $3("<span>");
          customButton.addClass("button btn-custom").addClass(o2.clsCustomButton).addClass(item.cls).attr("tabindex", -1).html(item.html);
          if (item.attr && typeof item.attr === "object") {
            $3.each(item.attr, function(k2, v2) {
              customButton.attr(Str.dashedName(k2), v2);
            });
          }
          customButton.data("action", item.onclick);
          buttonsContainer.prepend(customButton);
        });
        title3.on(Metro2.events.click, ".btn-custom", function(e) {
          if (Metro2.utils.isRightMouse(e)) return;
          var button2 = $3(this);
          var action = button2.data("action");
          Metro2.utils.exec(action, [button2], this);
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        var panel = $3("<div>").addClass("panel").addClass(o2.clsPanel);
        var id = o2.id ? o2.id : Metro2.utils.elementId("panel");
        var original_classes = element2[0].className;
        var title3;
        panel.attr("id", id).addClass(original_classes);
        panel.insertBefore(element2);
        element2.appendTo(panel);
        element2[0].className = "";
        element2.addClass("panel-content").addClass(o2.clsContent).appendTo(panel);
        if (o2.titleCaption !== "" || o2.titleIcon !== "" || o2.collapsible === true) {
          title3 = $3("<div>").addClass("panel-title").addClass(o2.clsTitle);
          if (o2.titleCaption !== "") {
            $3("<span>").addClass("caption").addClass(o2.clsTitleCaption).html(o2.titleCaption).appendTo(title3);
          }
          if (o2.titleIcon !== "") {
            $3(o2.titleIcon).addClass("icon").addClass(o2.clsTitleIcon).appendTo(title3);
          }
          if (o2.collapsible === true) {
            var collapseToggle = $3("<span>").addClass("dropdown-toggle marker-center active-toggle").addClass(o2.clsCollapseToggle).appendTo(title3);
            Metro2.makePlugin(element2, "collapse", {
              toggleElement: collapseToggle,
              duration: o2.collapseDuration,
              onCollapse: o2.onCollapse,
              onExpand: o2.onExpand
            });
            if (o2.collapsed === true) {
              this.collapse();
            }
          }
          title3.appendTo(panel);
        }
        if (title3 && Metro2.utils.isValue(o2.customButtons)) {
          this._addCustomButtons(o2.customButtons);
        }
        if (o2.draggable === true) {
          var dragElement;
          if (title3) {
            dragElement = title3.find(".caption, .icon");
          } else {
            dragElement = panel;
          }
          Metro2.makePlugin(panel, "draggable", {
            dragContext: panel[0],
            dragElement,
            onDragStart: o2.onDragStart,
            onDragStop: o2.onDragStop,
            onDragMove: o2.onDragMove
          });
        }
        if (o2.width !== "auto" && parseInt(o2.width) >= 0) {
          panel.outerWidth(parseInt(o2.width));
        }
        if (o2.height !== "auto" && parseInt(o2.height) >= 0) {
          panel.outerHeight(parseInt(o2.height));
          element2.css({ overflow: "auto" });
        }
        this.panel = panel;
        this._fireEvent("panel-create", {
          element: element2,
          panel
        });
      },
      customButtons: function(buttons) {
        return this._addCustomButtons(buttons);
      },
      collapse: function() {
        var element2 = this.element;
        if (Metro2.utils.isMetroObject(element2, "collapse") === false) {
          return;
        }
        Metro2.getPlugin(element2, "collapse").collapse();
      },
      open: function() {
        this.expand();
      },
      close: function() {
        this.collapse();
      },
      expand: function() {
        var element2 = this.element;
        if (Metro2.utils.isMetroObject(element2, "collapse") === false) {
          return;
        }
        Metro2.getPlugin(element2, "collapse").expand();
      },
      /* eslint-disable-next-line */
      changeAttribute: function(attributeName) {
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        if (o2.collapsible === true) {
          Metro2.getPlugin(element2, "collapse").destroy();
        }
        if (o2.draggable === true) {
          Metro2.getPlugin(element2, "draggable").destroy();
        }
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/popover/popover.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var PopoverDefaultConfig = {
      popoverDeferred: 0,
      popoverText: "",
      popoverHide: 3e3,
      popoverTimeout: 10,
      popoverOffset: 10,
      popoverTrigger: Metro2.popoverEvents.HOVER,
      popoverPosition: Metro2.position.TOP,
      hideOnLeave: false,
      closeButton: true,
      clsPopover: "",
      clsPopoverContent: "",
      onPopoverShow: Metro2.noop,
      onPopoverHide: Metro2.noop,
      onPopoverCreate: Metro2.noop
    };
    Metro2.popoverSetup = function(options) {
      PopoverDefaultConfig = $3.extend({}, PopoverDefaultConfig, options);
    };
    if (typeof globalThis["metroPopoverSetup"] !== void 0) {
      Metro2.popoverSetup(globalThis["metroPopoverSetup"]);
    }
    Metro2.Component("popover", {
      init: function(options, elem) {
        this._super(elem, options, PopoverDefaultConfig, {
          popover: null,
          popovered: false,
          size: {
            width: 0,
            height: 0
          },
          id: Utils.elementId("popover")
        });
        return this;
      },
      _create: function() {
        this._createEvents();
        this._fireEvent("popover-create", {
          element: this.element
        });
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var event;
        switch (o2.popoverTrigger) {
          case Metro2.popoverEvents.CLICK:
            event = Metro2.events.click;
            break;
          case Metro2.popoverEvents.FOCUS:
            event = Metro2.events.focus;
            break;
          default:
            event = Metro2.events.enter;
        }
        element2.on(event, function() {
          if (that.popover !== null || that.popovered === true) {
            return;
          }
          setTimeout(function() {
            that.createPopover();
            that._fireEvent("popover-show", {
              popover: that.popover
            });
            if (o2.popoverHide > 0) {
              setTimeout(function() {
                that.removePopover();
              }, o2.popoverHide);
            }
          }, o2.popoverTimeout);
        });
        if (o2.hideOnLeave === true) {
          element2.on(Metro2.events.leave, function() {
            that.removePopover();
          });
        }
        $3(globalThis).on(Metro2.events.scroll, function() {
          if (that.popover !== null) that.setPosition();
        }, { ns: this.id });
      },
      setPosition: function() {
        var popover = this.popover, size = this.size, o2 = this.options, element2 = this.element;
        if (o2.popoverPosition === Metro2.position.BOTTOM) {
          popover.addClass("bottom");
          popover.css({
            top: element2.offset().top - $3(globalThis).scrollTop() + element2.outerHeight() + o2.popoverOffset,
            left: element2.offset().left + element2.outerWidth() / 2 - size.width / 2 - $3(globalThis).scrollLeft()
          });
        } else if (o2.popoverPosition === Metro2.position.RIGHT) {
          popover.addClass("right");
          popover.css({
            top: element2.offset().top + element2.outerHeight() / 2 - size.height / 2 - $3(globalThis).scrollTop(),
            left: element2.offset().left + element2.outerWidth() - $3(globalThis).scrollLeft() + o2.popoverOffset
          });
        } else if (o2.popoverPosition === Metro2.position.LEFT) {
          popover.addClass("left");
          popover.css({
            top: element2.offset().top + element2.outerHeight() / 2 - size.height / 2 - $3(globalThis).scrollTop(),
            left: element2.offset().left - size.width - $3(globalThis).scrollLeft() - o2.popoverOffset
          });
        } else {
          popover.addClass("top");
          popover.css({
            top: element2.offset().top - $3(globalThis).scrollTop() - size.height - o2.popoverOffset,
            left: element2.offset().left + element2.outerWidth() / 2 - size.width / 2 - $3(globalThis).scrollLeft()
          });
        }
      },
      createPopover: function() {
        var that = this, elem = this.elem, element2 = this.element, o2 = this.options;
        var popover;
        var neb_pos;
        var id = Utils.elementId("popover");
        var closeButton;
        if (this.popovered) {
          return;
        }
        popover = $3("<div>").addClass("popover neb").addClass(o2.clsPopover);
        popover.attr("id", id);
        $3("<div>").addClass("popover-content").addClass(o2.clsPopoverContent).html(o2.popoverText).appendTo(popover);
        if (o2.popoverHide === 0 && o2.closeButton === true) {
          closeButton = $3("<button>").addClass("square small popover-close-button").html("&times;").appendTo(popover);
          closeButton.on(Metro2.events.click, function() {
            that.removePopover();
          });
        }
        switch (o2.popoverPosition) {
          case Metro2.position.TOP:
            neb_pos = "neb-s";
            break;
          case Metro2.position.BOTTOM:
            neb_pos = "neb-n";
            break;
          case Metro2.position.RIGHT:
            neb_pos = "neb-w";
            break;
          case Metro2.position.LEFT:
            neb_pos = "neb-e";
            break;
        }
        popover.addClass(neb_pos);
        if (o2.closeButton !== true) {
          popover.on(Metro2.events.click, function() {
            that.removePopover();
          });
        }
        this.popover = popover;
        this.size = Utils.hiddenElementSize(popover);
        if (elem.tagName === "TD" || elem.tagName === "TH") {
          var wrp = $3("<div/>").css("display", "inline-block").html(element2.html());
          element2.html(wrp);
          element2 = wrp;
        }
        this.setPosition();
        popover.appendTo($3("body"));
        this.popovered = true;
        this._fireEvent("popover-create", {
          popover
        });
      },
      removePopover: function() {
        var that = this;
        var timeout = this.options.onPopoverHide === Metro2.noop ? 0 : 300;
        var popover = this.popover;
        if (!this.popovered) {
          return;
        }
        this._fireEvent("popover-hide", {
          popover
        });
        setTimeout(function() {
          popover.hide(0, function() {
            popover.remove();
            that.popover = null;
            that.popovered = false;
          });
        }, timeout);
      },
      show: function() {
        var that = this, o2 = this.options;
        if (this.popovered === true) {
          return;
        }
        setTimeout(function() {
          that.createPopover();
          that._fireEvent("popover-show", {
            popover: that.popover
          });
          if (o2.popoverHide > 0) {
            setTimeout(function() {
              that.removePopover();
            }, o2.popoverHide);
          }
        }, o2.popoverTimeout);
      },
      hide: function() {
        this.removePopover();
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        var changeText = function() {
          o2.popoverText = element2.attr("data-popover-text");
          if (that.popover) {
            that.popover.find(".popover-content").html(o2.popoverText);
            that.setPosition();
          }
        };
        var changePosition = function() {
          o2.popoverPosition = element2.attr("data-popover-position");
          that.setPosition();
        };
        switch (attributeName) {
          case "data-popover-text":
            changeText();
            break;
          case "data-popover-position":
            changePosition();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        var event;
        switch (o2.popoverTrigger) {
          case Metro2.popoverEvents.CLICK:
            event = Metro2.events.click;
            break;
          case Metro2.popoverEvents.FOCUS:
            event = Metro2.events.focus;
            break;
          default:
            event = Metro2.events.enter;
        }
        element2.off(event);
        if (o2.hideOnLeave === true) {
          element2.off(Metro2.events.leave);
        }
        $3(globalThis).off(Metro2.events.scroll, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/progress/progress.js
  (function(Metro2, $3) {
    "use strict";
    var ProgressDefaultConfig = {
      progressDeferred: 0,
      showValue: false,
      showLabel: false,
      label: "Progress:",
      value: 0,
      buffer: 0,
      type: "bar",
      small: false,
      clsProgress: "",
      clsBack: "",
      clsBar: "",
      clsBuffer: "",
      clsValue: "",
      clsLabel: "",
      clsData: "",
      onValueChange: Metro2.noop,
      onBufferChange: Metro2.noop,
      onComplete: Metro2.noop,
      onBuffered: Metro2.noop,
      onProgressCreate: Metro2.noop
    };
    Metro2.progressSetup = function(options) {
      ProgressDefaultConfig = $3.extend({}, ProgressDefaultConfig, options);
    };
    if (typeof globalThis["metroProgressSetup"] !== void 0) {
      Metro2.progressSetup(globalThis["metroProgressSetup"]);
    }
    Metro2.Component("progress", {
      init: function(options, elem) {
        this._super(elem, options, ProgressDefaultConfig, {
          value: 0,
          buffer: 0
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, elem = this.elem, o2 = this.options;
        if (typeof o2.type === "string") o2.type = o2.type.toLowerCase();
        element2.html("").addClass("progress");
        this.component = element2.wrap("<div>").addClass("progress-component").addClass(o2.clsProgress);
        function _progress() {
          elem.innerHTML = `<div class="bar"></div>`;
        }
        function _buffer() {
          elem.innerHTML = `
                    <div class="bar"></div>
                    <div class="buffer"></div>
                `;
        }
        function _load() {
          element2.addClass("with-load");
          elem.innerHTML = `
                    <div class="bar"></div>
                    <div class="buffer"></div>
                    <div class="load"></div>
                `;
        }
        function _line() {
          element2.addClass("line");
        }
        switch (o2.type) {
          case "buffer":
            _buffer();
            break;
          case "load":
            _load();
            break;
          case "line":
            _line();
            break;
          default:
            _progress();
        }
        if (o2.small === true) element2.addClass("small");
        element2.addClass(o2.clsBack);
        element2.find(".bar").addClass(o2.clsBar);
        element2.find(".buffer").addClass(o2.clsBuffer);
        var data2 = $3("<div>").addClass("progress-data").addClass(o2.clsData).insertBefore(element2);
        var label2 = $3("<div>").addClass("progress-label").addClass(o2.clsLabel).html(o2.label).appendTo(data2);
        var value = $3("<div>").addClass("progress-value").addClass(o2.clsLabel).html(o2.value).appendTo(data2);
        if (o2.showLabel === false) {
          label2.hide();
        }
        if (o2.showValue === false) {
          value.hide();
        }
        this.val(o2.value);
        this.buff(o2.buffer);
        this._fireEvent("progress-create", {
          element: element2
        });
      },
      val: function(v2) {
        var that = this, element2 = this.element, o2 = this.options;
        var value = this.component.find(".progress-value");
        if (v2 === void 0) {
          return that.value;
        }
        var bar = element2.find(".bar");
        if (bar.length === 0) {
          return false;
        }
        this.value = parseInt(v2, 10);
        bar.css("width", this.value + "%");
        value.html(this.value + "%");
        this._fireEvent("value-change", {
          val: this.value
        });
        if (this.value === 100) {
          this._fireEvent("complete", {
            val: this.value
          });
        }
      },
      buff: function(v2) {
        var that = this, element2 = this.element;
        if (v2 === void 0) {
          return that.buffer;
        }
        var bar = element2.find(".buffer");
        if (bar.length === 0) {
          return false;
        }
        this.buffer = parseInt(v2, 10);
        bar.css("width", this.buffer + "%");
        this._fireEvent("buffer-change", {
          val: this.buffer
        });
        if (this.buffer === 100) {
          this._fireEvent("buffered", {
            val: this.buffer
          });
        }
      },
      changeValue: function() {
        this.val(this.element.attr("data-value"));
      },
      changeBuffer: function() {
        this.buff(this.element.attr("data-buffer"));
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-value":
            this.changeValue();
            break;
          case "data-buffer":
            this.changeBuffer();
            break;
        }
      },
      destroy: function() {
        return this.component.remove();
      }
    });
  })(Metro, Dom);

  // source/components/rating/rating.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var RatingDefaultConfig = {
      ratingDeferred: 0,
      label: "",
      static: false,
      title: null,
      value: 0,
      values: null,
      message: "",
      stars: 5,
      onColor: null,
      offColor: null,
      roundFunc: "round",
      // ceil, floor, round
      half: true,
      symbol: "\u2605",
      clsRating: "",
      clsTitle: "",
      clsStars: "",
      clsResult: "",
      clsLabel: "",
      onStarClick: Metro2.noop,
      onRatingCreate: Metro2.noop
    };
    Metro2.ratingSetup = function(options) {
      RatingDefaultConfig = $3.extend({}, RatingDefaultConfig, options);
    };
    if (typeof globalThis["metroRatingSetup"] !== void 0) {
      Metro2.ratingSetup(globalThis["metroRatingSetup"]);
    }
    Metro2.Component("rating", {
      init: function(options, elem) {
        this._super(elem, options, RatingDefaultConfig, {
          value: 0,
          originValue: 0,
          values: [],
          rate: 0,
          rating: null
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        var i3;
        if (isNaN(o2.value)) {
          o2.value = 0;
        } else {
          o2.value = parseFloat(o2.value).toFixed(1);
        }
        if (o2.values !== null) {
          if (Array.isArray(o2.values)) {
            this.values = o2.values;
          } else if (typeof o2.values === "string") {
            this.values = o2.values.toArray();
          }
        } else {
          for (i3 = 1; i3 <= o2.stars; i3++) {
            this.values.push(i3);
          }
        }
        this.originValue = o2.value;
        this.value = o2.value > 0 && o2.roundFunc !== "none" ? Math[o2.roundFunc](o2.value) : Math.abs(o2.value);
        this._createRating();
        this._createEvents();
        this._fireEvent("rating-create", {
          element: element2
        });
      },
      _createRating: function() {
        var element2 = this.element, o2 = this.options;
        var id = Utils.elementId("rating");
        var i3, stars, result, li2;
        var sheet = Metro2.sheet;
        var value = o2.static ? Math.floor(this.originValue) : this.value;
        var rating = element2.wrap("<div>").addClass("rating " + element2[0].className).addClass(o2.clsRating);
        element2.val(this.value);
        rating.attr("id", element2.id() ? "rating--" + element2.id() : id);
        stars = $3("<ul>").addClass("stars").addClass(o2.clsStars).appendTo(rating);
        for (i3 = 1; i3 <= o2.stars; i3++) {
          li2 = $3("<li>").attr("data-symbol", o2.symbol).data("value", this.values[i3 - 1]).appendTo(stars);
          if (i3 <= value) {
            li2.addClass("on");
          }
        }
        result = $3("<span>").addClass("result").addClass(o2.clsResult).appendTo(rating);
        result.html(o2.message);
        if (o2.offColor !== null && (o2.offColor.includes("var(") || Farbe.Routines.isColor(o2.offColor))) {
        }
        if (o2.onColor !== null && (o2.onColor.includes("var(") || Farbe.Routines.isColor(o2.onColor))) {
          Utils.addCssRule(sheet, "#" + id + " .stars:hover li", "color: " + o2.onColor + ";");
          Utils.addCssRule(sheet, "#" + id + " .stars li.on", "color: " + o2.onColor + ";");
          Utils.addCssRule(sheet, "#" + id + " .stars li.half::after", "color: " + o2.onColor + ";");
        }
        if (o2.title !== null) {
          var title3 = $3("<span>").addClass("title").addClass(o2.clsTitle).html(o2.title);
          rating.prepend(title3);
        }
        if (o2.static === true) {
          rating.addClass("static");
          if (o2.half === true) {
            var dec = Math.round(this.originValue % 1 * 10);
            if (dec > 0 && dec <= 9) {
              rating.find(".stars li.on").last().next("li").addClass("half half-" + dec * 10);
            }
          }
        }
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          for (i3 = 0; i3 < element2[0].style.length; i3++) {
            rating.css(element2[0].style[i3], element2.css(element2[0].style[i3]));
          }
        }
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(rating);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        this.rating = rating;
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var rating = this.rating;
        rating.on(Metro2.events.click, ".stars li", function() {
          if (o2.static === true) {
            return;
          }
          var star = $3(this);
          var value = star.data("value");
          star.addClass("scale");
          setTimeout(function() {
            star.removeClass("scale");
          }, 300);
          element2.val(value).trigger("change");
          star.addClass("on");
          star.prevAll().addClass("on");
          star.nextAll().removeClass("on");
          that._fireEvent("star-click", {
            value,
            star: star[0]
          });
        });
      },
      val: function(v2) {
        var that = this, element2 = this.element, o2 = this.options;
        var rating = this.rating;
        if (v2 === void 0) {
          return this.value;
        }
        this.value = v2 > 0 ? Math[o2.roundFunc](v2) : 0;
        element2.val(this.value).trigger("change");
        var stars = rating.find(".stars li").removeClass("on");
        $3.each(stars, function() {
          var star = $3(this);
          if (star.data("value") <= that.value) {
            star.addClass("on");
          }
        });
        return this;
      },
      msg: function(m2) {
        var rating = this.rating;
        if (m2 === void 0) {
          return;
        }
        rating.find(".result").html(m2);
        return this;
      },
      static: function(mode) {
        var o2 = this.options;
        var rating = this.rating;
        o2.static = mode;
        if (mode === true) {
          rating.addClass("static");
        } else {
          rating.removeClass("static");
        }
      },
      changeAttributeValue: function(a2) {
        var element2 = this.element;
        var value = a2 === "value" ? element2.val() : element2.attr("data-value");
        this.val(value);
      },
      changeAttributeMessage: function() {
        var element2 = this.element;
        var message = element2.attr("data-message");
        this.msg(message);
      },
      changeAttributeStatic: function() {
        var element2 = this.element;
        var isStatic = JSON.parse(element2.attr("data-static")) === true;
        this.static(isStatic);
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "value":
          case "data-value":
            this.changeAttributeValue(attributeName);
            break;
          case "disabled":
            this.toggleState();
            break;
          case "data-message":
            this.changeAttributeMessage();
            break;
          case "data-static":
            this.changeAttributeStatic();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var rating = this.rating;
        rating.off(Metro2.events.click, ".stars li");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/remote-dataset/remote-dataset.js
  (function(Metro2, $3) {
    "use strict";
    var RemoteDatasetDefaultConfig = {
      caption: "",
      url: "",
      searchUrl: "",
      method: "GET",
      limit: 10,
      offset: 0,
      sort: "",
      limitKey: "limit",
      offsetKey: "offset",
      searchKey: "query",
      totalKey: "total",
      dataKey: "data",
      sortKey: "sortBy",
      orderKey: "order",
      shortPagination: false,
      rows: 10,
      rowsSteps: "10,25,50,100",
      sortRules: "",
      showSearch: true,
      showOrder: true,
      showRowsCount: true,
      template: "",
      clsBody: "",
      clsItem: "",
      clsPagination: "",
      clsSearchBlock: "",
      clsOrderBlock: "",
      clsRowsCountBlock: "",
      onLoad: (f3) => f3,
      onDrawRow: Metro2.noop,
      onDrawCell: Metro2.noop,
      onDatasetCreate: Metro2.noop
    };
    Metro2.remoteDatasetSetup = function(options) {
      RemoteDatasetDefaultConfig = $3.extend({}, RemoteDatasetDefaultConfig, options);
    };
    if (typeof window["metroRemoteDatasetSetup"] !== void 0) {
      Metro2.remoteDatasetSetup(window["metroRemoteDatasetSetup"]);
    }
    Metro2.Component("remote-dataset", {
      init: function(options, elem) {
        this._super(elem, options, RemoteDatasetDefaultConfig, {
          // define instance vars here
          data: null,
          total: 0
        });
        return this;
      },
      _create: function() {
        const o2 = this.options;
        this.offset = o2.offset;
        this.rowSteps = o2.rowsSteps.toArray(",");
        this.limit = +o2.rows;
        this.url = o2.url;
        this.search = "";
        const [field, order] = o2.sort.toArray(":");
        this.sortField = field;
        this.sortOrder = order;
        this.template = Metro2.utils.exec(o2.template);
        this.sortRules = o2.sortRules.toArray(",").filter((f3) => f3).map((rule) => rule.toArray(":"));
        this._createStructure();
        this._createEvents();
        this._loadData().then(() => {
        });
        this._fireEvent("dataset-create");
      },
      _loadData: async function(append2 = false) {
        const o2 = this.options;
        if (!this.url) {
          return;
        }
        let url = this.url + "?" + o2.limitKey + "=" + this.limit + "&" + o2.offsetKey + "=" + this.offset;
        if (this.sortField) {
          url += "&" + o2.sortKey + "=" + this.sortField + "&" + o2.orderKey + "=" + this.sortOrder;
        }
        if (this.search) {
          url += "&" + o2.searchKey + "=" + this.search;
        }
        const response = await fetch(url, { method: o2.method });
        if (response.ok === false) {
          return;
        }
        this.data = Metro2.utils.exec(o2.onLoad, [await response.json()], this);
        this._createEntries(append2);
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        let entries;
        element2.addClass("remote-dataset");
        element2.append(entries = $3("<div>").addClass("dataset-entry"));
        entries.html(`
                <div class="service-block">
                    <div class="search-block ${o2.clsSearchBlock} ${o2.showSearch ? "" : "hide-block"}">
                        <input name="search" type="text" data-role="input" 
                            data-prepend="${this.strings.label_search}" 
                            data-search-button="true" 
                            />
                    </div>
                   
                    <div class="order-block ${o2.clsOrderBlock} ${this.sortRules.length === 0 || o2.showOrder === false ? "hide-block" : ""}">
                        <select name="sort-order" data-role="select" data-filter="false">
                            ${this.sortRules.map((rule) => `
                                <option value="${rule[0]}:${rule[1]}" 
                                        ${rule[0] === this.sortField && rule[1] === this.sortOrder ? "selected" : ""}
                                        data-icon="${rule[3] ? rule[3] : ""}"
                                >
                                    ${rule[2]}
                                </option>
                            `).join("")}
                        </select>
                    </div>
                   
                    <div class="count-block ${o2.clsRowsCountBlock} ${o2.showRowsCount ? "" : "hide-block"}">
                        <select name="rows-count" data-role="select" data-prepend="${this.strings.label_rows_count}" data-filter="false">
                            ${this.rowSteps.map((step) => `
                                <option value="${step}" ${+step === this.rowsCount ? "selected" : ""}>
                                    ${step}
                                </option>
                            `).join("")}
                        </select>
                    </div>
                </div>
                <div class="dataset-body"></div>
            `);
        this.body = entries.find(".dataset-body").addClass(o2.clsBody);
        this.loadMore = $3("<div>").addClass("dataset-load-more");
        this.loadMore.html(`
                <button class="button large cycle link load-more-button">
                    <span class="icon">\u27F3</span>
                    ${this.strings.label_load_more}
                </button>
            `).appendTo(element2);
        element2.append(
          this.pagination = $3("<div>").addClass("dataset-pagination")
        );
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.on("click", ".page-link", function() {
          const parent2 = $3(this).parent();
          if (parent2.hasClass("service")) {
            if (parent2.hasClass("prev-page")) {
              that.offset -= that.limit;
              if (that.offset < 0) {
                that.offset = 0;
              }
            } else {
              that.offset += that.limit;
            }
            that._loadData().then(() => {
            });
            return;
          }
          that.offset = $3(this).data("page") * that.limit - that.limit;
          that._loadData().then(() => {
          });
        });
        const searchFn = Hooks.useDebounce(() => {
          const val = element2.find("input[name=search]").val().trim();
          if (val === "") {
            this.search = "";
            this.url = o2.url;
            this._loadData().then(() => {
            });
            return;
          }
          if (val.length < 3) {
            return;
          }
          this.search = val;
          this.url = o2.searchUrl;
          this._loadData().then(() => {
          });
        }, 300);
        element2.on(Metro2.events.inputchange, "input[name=search]", searchFn);
        element2.on("change", "select[name=rows-count]", function() {
          that.limit = +$3(this).val();
          that.offset = 0;
          that._loadData().then(() => {
          });
        });
        element2.on("change", "select[name=sort-order]", function() {
          const [field, order] = $3(this).val().split(":");
          that.url = o2.url;
          that.sortField = field;
          that.sortOrder = order;
          that.offset = 0;
          that._loadData().then(() => {
          });
        });
        element2.on("click", ".load-more-button", function() {
          that.offset += that.limit;
          that._loadData(true).then(() => {
          });
        });
      },
      _createEntries: function(append2 = false) {
        var that = this, element2 = this.element, o2 = this.options;
        if (!this.data) {
          return;
        }
        const usePagination = Metro2.utils.isValue(this.data[o2.totalKey]);
        this.entries = this.data[o2.dataKey];
        this.total = this.data[o2.totalKey];
        if (append2 === false) this.body.clear();
        this.entries.forEach((entry, index) => {
          const item = $3("<div>").addClass("dataset-item").addClass(o2.clsItem).addClass(index % 2 === 0 ? "even" : "odd");
          const html2 = Metro2.utils.exec(o2.template, [entry], entry);
          item.html(html2).appendTo(that.body);
        });
        if (usePagination && !o2.shortPagination) {
          Metro2.pagination({
            length: this.total,
            rows: this.limit,
            current: this.offset === 0 ? 1 : Math.round(this.offset / this.limit) + 1,
            target: this.pagination,
            clsPagination: o2.clsPagination
          });
        } else {
          this.pagination.html(`
                    <div class="short-pagination">
                        <div class="button service prev-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_prev}</a></div>
                        <div class="button service next-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_next}</a></div>
                    </div>
                `);
        }
      },
      /*
      * options = {
      *   caption: "",
      *   url: "",
      *   searchUrl: "",
      *   method: "GET",
      *   limit: 10,
      *   offset: 0,
      *   sort: "",
      *   sortOrder: "asc",
      *   limitKey: "limit",
      * }
      * */
      setup: function(options) {
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/remote-table/remote-table.js
  (function(Metro2, $3) {
    "use strict";
    let RemoteTableDefaultConfig = {
      caption: "",
      url: "",
      searchUrl: "",
      method: "GET",
      limit: 10,
      offset: 0,
      fields: "",
      sortableFields: "",
      colSize: "",
      sort: "",
      sortOrder: "asc",
      captions: null,
      limitKey: "limit",
      offsetKey: "offset",
      searchKey: "query",
      totalKey: "total",
      dataKey: "data",
      sortKey: "sortBy",
      orderKey: "order",
      shortPagination: false,
      rows: 10,
      rowsSteps: "10,25,50,100",
      clsTable: "",
      clsPagination: "",
      onLoad: (f3) => f3,
      onDrawRow: Metro2.noop,
      onDrawCell: Metro2.noop,
      onDrawHeadCell: Metro2.noop,
      onTableCreate: Metro2.noop
    };
    Metro2.remoteTableSetup = function(options) {
      RemoteTableDefaultConfig = $3.extend({}, RemoteTableDefaultConfig, options);
    };
    if (typeof window["metroRemoteTableSetup"] !== void 0) {
      Metro2.remoteTableSetup(window["metroRemoteTableSetup"]);
    }
    Metro2.Component("remote-table", {
      init: function(options, elem) {
        this._super(elem, options, RemoteTableDefaultConfig, {
          // define instance vars here
          data: null,
          total: 0
        });
        return this;
      },
      _create: function() {
        const o2 = this.options;
        this.offset = o2.offset;
        this.fields = o2.fields.toArray(",");
        this.captions = o2.captions ? o2.captions.toArray(",") : null;
        this.rowSteps = o2.rowsSteps.toArray(",");
        this.colSize = o2.colSize.toArray(",");
        this.limit = +o2.rows;
        this.url = o2.url;
        this.search = "";
        this.sortField = o2.sort;
        this.sortOrder = o2.sortOrder;
        this._createStructure();
        this._createEvents();
        this._loadData().then(() => {
        });
        this._fireEvent("table-create");
      },
      _loadData: async function() {
        const o2 = this.options;
        if (!this.url) {
          return;
        }
        let url = this.url + "?" + o2.limitKey + "=" + this.limit + "&" + o2.offsetKey + "=" + this.offset;
        if (this.sortField) {
          url += "&" + o2.sortKey + "=" + this.sortField + "&" + o2.orderKey + "=" + this.sortOrder;
        }
        if (this.search) {
          url += "&" + o2.searchKey + "=" + this.search;
        }
        const response = await fetch(url, { method: o2.method });
        if (response.ok === false) {
          return;
        }
        this.data = Metro2.utils.exec(o2.onLoad, [await response.json()], this);
        this._createEntries();
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        let entries;
        element2.addClass("table-component remote-table");
        element2.append(entries = $3("<div>").addClass("table-entry"));
        entries.html(`
                <div class="search-block row">
                    <div class="cell-sm-10">
                        <input name="search" type="text" data-role="input" 
                            data-prepend="${this.strings.label_search}" 
                            data-search-button="true" 
                            />
                    </div>
                    <div class="cell-sm-2">
                        <select name="rows-count" data-role="select" data-prepend="${this.strings.label_rows_count}" data-filter="false">
                            ${this.rowSteps.map((step) => `<option value="${step}" ${+step === this.rowsCount ? "selected" : ""}>${step}</option>`).join("")}
                        </select>
                    </div>
                </div>
                <table class="table ${o2.clsTable}">
                    <caption>${o2.caption}</caption>
                    <thead></thead>
                    <tbody></tbody>
                </table>
            `);
        this.header = entries.find("thead");
        this.body = entries.find("tbody");
        element2.append(
          this.pagination = $3("<div>").addClass("table-pagination")
        );
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.on("click", ".page-link", function() {
          const parent2 = $3(this).parent();
          if (parent2.hasClass("service")) {
            if (parent2.hasClass("prev-page")) {
              that.offset -= that.limit;
              if (that.offset < 0) {
                that.offset = 0;
              }
            } else {
              that.offset += that.limit;
            }
            that._loadData().then(() => {
            });
            return;
          }
          that.offset = $3(this).data("page") * that.limit - that.limit;
          that._loadData().then(() => {
          });
        });
        const searchFn = Hooks.useDebounce(() => {
          const val = element2.find("input[name=search]").val().trim();
          if (val === "") {
            this.search = "";
            this.url = o2.url;
            this._loadData().then(() => {
            });
            return;
          }
          if (val.length < 3) {
            return;
          }
          this.search = val;
          this.url = o2.searchUrl;
          this._loadData().then(() => {
          });
        }, 300);
        element2.on(Metro2.events.inputchange, "input[name=search]", searchFn);
        element2.on("change", "select[name=rows-count]", function() {
          that.limit = +$3(this).val();
          that.offset = 0;
          that._loadData().then(() => {
          });
        });
        element2.on("click", ".sortable-column", function() {
          const field = $3(this).attr("data-field");
          if (that.sortField === field) {
            that.sortOrder = that.sortOrder === "asc" ? "desc" : "asc";
          } else {
            that.sortField = field;
            that.sortOrder = "asc";
          }
          that._loadData().then(() => {
          });
        });
      },
      _createEntries: function() {
        const o2 = this.options;
        if (!this.data) {
          return;
        }
        const usePagination = Metro2.utils.isValue(this.data[o2.totalKey]);
        this.entries = this.data[o2.dataKey];
        this.total = this.data[o2.totalKey];
        this.header.clear();
        this.body.clear();
        const headerRow = $3("<tr>").addClass("table-header").appendTo(this.header);
        let hIndex = 0;
        for (let key of Object.keys(this.entries[0])) {
          if (this.fields.length && !this.fields.includes(key)) {
            continue;
          }
          const cellData = this.captions ? this.captions[hIndex] : key;
          const cell = $3("<th>").html(cellData).attr("data-field", key);
          if (o2.sortableFields && o2.sortableFields.includes(key)) {
            cell.addClass("sortable-column");
            if (this.sortField === key) {
              cell.addClass(`sort-${this.sortOrder}`);
            }
          }
          cell.appendTo(headerRow).addClass(`head-cell-${key}`);
          if (this.colSize[hIndex]) {
            cell.css("width", this.colSize[hIndex]);
          }
          Metro2.utils.exec(o2.onDrawHeadCell, [cell[0], cellData, key, hIndex, o2.sortableFields.includes(key), this.sortField === key, this.sortOrder], this);
          hIndex++;
        }
        this.entries.forEach((entry, index) => {
          const row = $3("<tr>").addClass("table-row");
          this.body.append(row);
          Metro2.utils.exec(o2.onDrawRow, [row, entry, index], this);
          let hIndex2 = 0;
          for (let key in entry) {
            if (this.fields.length && !this.fields.includes(key)) {
              continue;
            }
            const cell = $3("<td>").attr("data-label", this.captions ? this.captions[hIndex2] : key).addClass(`data-cell-${key}`).html(entry[key]);
            row.append(cell);
            Metro2.utils.exec(o2.onDrawCell, [cell[0], entry[key], key, entry, index], this);
            hIndex2++;
          }
        });
        if (usePagination && !o2.shortPagination) {
          Metro2.pagination({
            length: this.total,
            rows: this.limit,
            current: this.offset === 0 ? 1 : Math.round(this.offset / this.limit) + 1,
            target: this.pagination,
            clsPagination: o2.clsPagination
          });
        } else {
          this.pagination.html(`
                    <div class="short-pagination">
                        <div class="button service prev-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_prev}</a></div>
                        <div class="button service next-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_next}</a></div>
                    </div>
                `);
        }
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/resizable/resizable.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ResizableDefaultConfig = {
      resizableDeferred: 0,
      canResize: true,
      resizeElement: ".resize-element",
      minWidth: 0,
      minHeight: 0,
      maxWidth: 0,
      maxHeight: 0,
      preserveRatio: false,
      onResizeStart: Metro2.noop,
      onResizeStop: Metro2.noop,
      onResize: Metro2.noop,
      onResizableCreate: Metro2.noop
    };
    Metro2.resizableSetup = function(options) {
      ResizableDefaultConfig = $3.extend({}, ResizableDefaultConfig, options);
    };
    if (typeof globalThis["metroResizableSetup"] !== void 0) {
      Metro2.resizableSetup(globalThis["metroResizableSetup"]);
    }
    Metro2.Component("resizable", {
      init: function(options, elem) {
        this._super(elem, options, ResizableDefaultConfig, {
          resizer: null,
          id: Utils.elementId("resizable")
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("resizable-create");
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        element2.data("canResize", true);
        element2.addClass("resizable-element");
        if (Utils.isValue(o2.resizeElement) && element2.find(o2.resizeElement).length > 0) {
          this.resizer = element2.find(o2.resizeElement);
        } else {
          this.resizer = $3("<span>").addClass("resize-element").appendTo(element2);
        }
        element2.data("canResize", o2.canResize);
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        this.resizer.on(Metro2.events.start, function(e) {
          if (element2.data("canResize") === false) {
            return;
          }
          var startXY = Utils.pageXY(e);
          var startWidth = parseInt(element2.outerWidth());
          var startHeight = parseInt(element2.outerHeight());
          var size = { width: startWidth, height: startHeight };
          element2.addClass("stop-pointer");
          that._fireEvent("resize-start", {
            size
          });
          $3(document).on(Metro2.events.move, function(e2) {
            var moveXY = Utils.pageXY(e2);
            var size2 = {
              width: startWidth + moveXY.x - startXY.x,
              height: startHeight + moveXY.y - startXY.y
            };
            if (o2.maxWidth > 0 && size2.width > o2.maxWidth) {
              return true;
            }
            if (o2.minWidth > 0 && size2.width < o2.minWidth) {
              return true;
            }
            if (o2.maxHeight > 0 && size2.height > o2.maxHeight) {
              return true;
            }
            if (o2.minHeight > 0 && size2.height < o2.minHeight) {
              return true;
            }
            element2.css(size2);
            that._fireEvent("resize", {
              size: size2
            });
          }, { ns: that.id });
          $3(document).on(Metro2.events.stop, function() {
            element2.removeClass("stop-pointer");
            $3(document).off(Metro2.events.move, { ns: that.id });
            $3(document).off(Metro2.events.stop, { ns: that.id });
            var size2 = {
              width: parseInt(element2.outerWidth()),
              height: parseInt(element2.outerHeight())
            };
            that._fireEvent("resize-stop", {
              size: size2
            });
          }, { ns: that.id });
          e.preventDefault();
          e.stopPropagation();
        });
      },
      off: function() {
        this.element.data("canResize", false);
      },
      on: function() {
        this.element.data("canResize", true);
      },
      changeAttribute: function(attributeName) {
        var element2 = this.element, o2 = this.options;
        var canResize = function() {
          o2.canResize = JSON.parse(element2.attr("data-can-resize")) === true;
        };
        switch (attributeName) {
          case "data-can-resize":
            canResize();
            break;
        }
      },
      destroy: function() {
        this.resizer.off(Metro2.events.start);
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/resizer/resizer.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ResizerDefaultConfig = {
      resizerDeferred: 0,
      onMediaPoint: Metro2.noop,
      onMediaPointEnter: Metro2.noop,
      onMediaPointLeave: Metro2.noop,
      onWindowResize: Metro2.noop,
      onElementResize: Metro2.noop,
      onResizerCreate: Metro2.noop
    };
    Metro2.resizerSetup = function(options) {
      ResizerDefaultConfig = $3.extend({}, ResizerDefaultConfig, options);
    };
    if (typeof globalThis["metroResizerSetup"] !== void 0) {
      Metro2.resizerSetup(globalThis["metroResizerSetup"]);
    }
    Metro2.Component("resizer", {
      init: function(options, elem) {
        this._super(elem, options, ResizerDefaultConfig, {
          size: { width: 0, height: 0 },
          media: globalThis.METRO_MEDIA,
          id: Utils.elementId("resizer")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this.size = {
          width: element2.width(),
          height: element2.height()
        };
        this._createStructure();
        this._createEvents();
        this._fireEvent("resizer-create", {
          element: element2
        });
      },
      _createStructure: function() {
      },
      _createEvents: function() {
        var that = this, element2 = this.element;
        var win = $3.window();
        win.on("resize", function() {
          var windowWidth = win.width(), windowHeight = win.height();
          var elementWidth = element2.width(), elementHeight = element2.height();
          var oldSize = that.size;
          var point;
          that._fireEvent("window-resize", {
            width: windowWidth,
            height: windowHeight,
            media: globalThis.METRO_MEDIA
          });
          if (that.size.width !== elementWidth || that.size.height !== elementHeight) {
            that.size = {
              width: elementWidth,
              height: elementHeight
            };
            that._fireEvent("element-resize", {
              width: elementWidth,
              height: elementHeight,
              oldSize,
              media: globalThis.METRO_MEDIA
            });
          }
          if (that.media.length !== globalThis.METRO_MEDIA.length) {
            if (that.media.length > globalThis.METRO_MEDIA.length) {
              point = that.media.filter(function(x2) {
                return !globalThis.METRO_MEDIA.includes(x2);
              });
              that._fireEvent("media-point-leave", {
                point,
                media: globalThis.METRO_MEDIA
              });
            } else {
              point = globalThis.METRO_MEDIA.filter(function(x2) {
                return !that.media.includes(x2);
              });
              that._fireEvent("media-point-enter", {
                point,
                media: globalThis.METRO_MEDIA
              });
            }
            that.media = globalThis.METRO_MEDIA;
            that._fireEvent("media-point", {
              point,
              media: globalThis.METRO_MEDIA
            });
          }
        }, { ns: this.id });
      },
      changeAttribute: function() {
      },
      destroy: function() {
        $3(globalThis).off("resize", { ns: this.id });
      }
    });
  })(Metro, Dom);

  // source/components/ribbon-menu/ribbon-menu.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var RibbonMenuDefaultConfig = {
      ribbonmenuDeferred: 0,
      onStatic: Metro2.noop,
      onBeforeTab: Metro2.noop_true,
      onTab: Metro2.noop,
      onRibbonMenuCreate: Metro2.noop
    };
    Metro2.ribbonMenuSetup = function(options) {
      RibbonMenuDefaultConfig = $3.extend({}, RibbonMenuDefaultConfig, options);
    };
    if (typeof globalThis["metroRibbonMenuSetup"] !== void 0) {
      Metro2.ribbonMenuSetup(globalThis["metroRibbonMenuSetup"]);
    }
    Metro2.Component("ribbon-menu", {
      init: function(options, elem) {
        this._super(elem, options, RibbonMenuDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("ribbon-menu-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element;
        element2.addClass("ribbon-menu");
        var fluentGroups = element2.find(".ribbon-toggle-group");
        $3.each(fluentGroups, function() {
          var g2 = $3(this);
          g2.buttongroup({
            clsActive: "active"
          });
          var gw = 0;
          var btns = g2.find(".ribbon-icon-button");
          $3.each(btns, function() {
            var b2 = $3(this);
            var w2 = b2.outerWidth(true);
            if (w2 > gw) gw = w2;
          });
          g2.css("width", gw * Math.ceil(btns.length / 3) + 4);
        });
        element2.find(".section").addClass("non-active");
        var tabs = element2.find(".tabs-holder li:not(.static)");
        var active_tab = element2.find(".tabs-holder li.active");
        if (active_tab.length > 0) {
          this.open($3(active_tab[0]));
        } else {
          if (tabs.length > 0) {
            this.open($3(tabs[0]));
          }
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.click, ".tabs-holder li a", function(e) {
          var link2 = $3(this);
          var tab = $3(this).parent("li");
          if (tab.hasClass("static")) {
            if (o2.onStatic === Metro2.noop && link2.attr("href") !== void 0) {
              document.location.href = link2.attr("href");
            } else {
              that._fireEvent("static", {
                tab: tab[0]
              });
            }
          } else {
            if (Utils.exec(o2.onBeforeTab, [tab[0]], element2[0]) === true) {
              that.open(tab[0]);
            }
          }
          e.preventDefault();
        });
      },
      open: function(tab) {
        var element2 = this.element;
        var $tab = $3(tab);
        var tabs = element2.find(".tabs-holder li");
        var sections = element2.find(".content-holder .section");
        var target = $tab.children("a").attr("href");
        var target_section = target !== "#" ? element2.find(target) : null;
        sections.addClass("non-active");
        tabs.removeClass("active");
        $tab.addClass("active");
        sections.removeClass("active");
        if (target_section) {
          target_section.addClass("active").removeClass("non-active");
        }
        this._fireEvent("tab", {
          tab: $tab[0]
        });
      },
      changeAttribute: function() {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".tabs-holder li a");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/ripple/ripple.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var RippleDefaultConfig = {
      rippleDeferred: 0,
      rippleColor: "#fff",
      rippleAlpha: 0.4,
      rippleTarget: "default",
      onRippleCreate: Metro2.noop
    };
    Metro2.rippleSetup = function(options) {
      RippleDefaultConfig = $3.extend({}, RippleDefaultConfig, options);
    };
    if (typeof globalThis["metroRippleSetup"] !== void 0) {
      Metro2.rippleSetup(globalThis["metroRippleSetup"]);
    }
    var getRipple = function(target, color, alpha, event) {
      var el = $3(target);
      var rect = Utils.rect(el[0]);
      var x2, y2;
      if (el.length === 0) {
        return;
      }
      if (!Utils.isValue(color)) {
        color = "#fff";
      }
      if (!Utils.isValue(alpha)) {
        alpha = 0.4;
      }
      if (el.css("position") === "static") {
        el.css("position", "relative");
      }
      el.css({
        overflow: "hidden"
      });
      $3(".ripple").remove();
      var size = Math.max(el.outerWidth(), el.outerHeight());
      var ripple = $3("<span class='ripple'></span>").css({
        width: size,
        height: size
      });
      el.prepend(ripple);
      if (event) {
        x2 = event.pageX - el.offset().left - ripple.width() / 2;
        y2 = event.pageY - el.offset().top - ripple.height() / 2;
      } else {
        x2 = rect.width / 2 - ripple.width() / 2;
        y2 = rect.height / 2 - ripple.height() / 2;
      }
      ripple.css({
        background: Farbe.Routines.toRGBA(Farbe.Routines.parse(color), alpha),
        width: size,
        height: size,
        top: y2 + "px",
        left: x2 + "px"
      }).addClass("rippleEffect");
      setTimeout(function() {
        ripple.remove();
      }, 400);
    };
    Metro2.Component("ripple", {
      init: function(options, elem) {
        this._super(elem, options, RippleDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        var target = o2.rippleTarget === "default" ? null : o2.rippleTarget;
        element2.on(Metro2.events.click, target, function(e) {
          getRipple(this, o2.rippleColor, o2.rippleAlpha, e);
        });
        this._fireEvent("riopple-create", {
          element: element2
        });
      },
      changeAttribute: function(attributeName) {
        var element2 = this.element, o2 = this.options;
        function changeColor() {
          var color = element2.attr("data-ripple-color");
          if (!Farbe.Routines.isColor(color)) {
            return;
          }
          o2.rippleColor = color;
        }
        function changeAlpha() {
          var alpha = +element2.attr("data-ripple-alpha");
          if (isNaN(alpha)) {
            return;
          }
          o2.rippleColor = alpha;
        }
        switch (attributeName) {
          case "data-ripple-color":
            changeColor();
            break;
          case "data-ripple-alpha":
            changeAlpha();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        var target = o2.rippleTarget === "default" ? null : o2.rippleTarget;
        element2.off(Metro2.events.click, target);
      }
    });
    Metro2.ripple = getRipple;
  })(Metro, Dom);

  // source/components/searcher/searcher.js
  (function(Metro2, $3) {
    "use strict";
    var SearcherDefaultConfig = {
      onSearcherCreate: Metro2.noop
    };
    Metro2.searcherSetup = function(options) {
      SearcherDefaultConfig = $3.extend({}, SearcherDefaultConfig, options);
    };
    if (typeof globalThis["metroSearcherSetup"] !== void 0) {
      Metro2.searcherSetup(globalThis["metroSearcherSetup"]);
    }
    Metro2.Component("searcher", {
      init: function(options, elem) {
        this._super(elem, options, SearcherDefaultConfig, {
          // define instance vars here
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        this._createStructure();
        this._createEvents();
        this._fireEvent("searcher-create");
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/sidebar/sidebar.js
  (function(Metro2, $3) {
    "use strict";
    let SidebarDefaultConfig = {
      menuScrollbar: false,
      sidebarDeferred: 0,
      position: "left",
      shift: null,
      staticShift: null,
      toggle: null,
      duration: METRO_ANIMATION_DURATION,
      static: null,
      closeOutside: true,
      onOpen: Metro2.noop,
      onClose: Metro2.noop,
      onToggle: Metro2.noop,
      onStaticSet: Metro2.noop,
      onStaticLoss: Metro2.noop,
      onSidebarCreate: Metro2.noop
    };
    Metro2.sidebarSetup = function(options) {
      SidebarDefaultConfig = $3.extend({}, SidebarDefaultConfig, options);
    };
    if (typeof globalThis["metroSidebarSetup"] !== void 0) {
      Metro2.sidebarSetup(globalThis["metroSidebarSetup"]);
    }
    Metro2.Component("sidebar", {
      init: function(options, elem) {
        this._super(elem, options, SidebarDefaultConfig, {
          toggle_element: null,
          id: Metro2.utils.elementId("sidebar")
        });
        return this;
      },
      _create: function() {
        const element2 = this.element;
        this._createStructure();
        this._createEvents();
        $3(globalThis).resize();
        this._checkStatic();
        this._fireEvent("sidebar-create", {
          element: element2
        });
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        const header2 = element2.find(".sidebar-header");
        const sheet = Metro2.sheet;
        const menu = element2.find(".sidebar-menu");
        const size = element2.outerWidth();
        element2.addClass("sidebar").addClass("on-" + o2.position);
        if (o2.menuScrollbar === false) {
          menu.addClass("hide-scroll");
        }
        if (o2.toggle !== null && $3(o2.toggle).length > 0) {
          this.toggle_element = $3(o2.toggle);
        }
        if (header2.length > 0) {
          if (header2.data("image") !== void 0) {
            header2.css({
              backgroundImage: "url(" + header2.data("image") + ")"
            });
          }
        }
        if (o2.static !== null) {
          if (o2.staticShift !== null) {
            if (o2.position === "left") {
              Metro2.utils.addCssRule(sheet, "@media screen and " + Metro2.media_queries[o2.static.toUpperCase()], o2.staticShift + "{margin-left: " + size + "px; width: calc(100% - " + size + "px);}");
            } else {
              Metro2.utils.addCssRule(sheet, "@media screen and " + Metro2.media_queries[o2.static.toUpperCase()], o2.staticShift + "{margin-right: " + size + "px; width: calc(100% - " + size + "px);}");
            }
          }
        }
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const toggle = this.toggle_element;
        if (toggle !== null) {
          toggle.on(Metro2.events.click, function(e) {
            that.toggle();
            e.stopPropagation();
          });
        } else if (o2.toggle) {
          $3.document().on("click", o2.toggle, function(e) {
            that.toggle();
            e.stopPropagation();
          });
        }
        if (o2.static !== null && Metro2.media_modes.includes(o2.static)) {
          $3(globalThis).on(Metro2.events.resize, function() {
            that._checkStatic();
          }, { ns: this.id });
        }
        element2.on(Metro2.events.click, ".sidebar-menu .js-sidebar-close", function(e) {
          that.close();
          e.stopPropagation();
        });
        element2.on(Metro2.events.click, function(e) {
          e.stopPropagation();
        });
        $3(document).on(Metro2.events.click, function() {
          if (o2.closeOutside === true) {
            if (that.isOpen()) that.close();
          }
        });
      },
      _checkStatic: function() {
        const element2 = this.element, o2 = this.options;
        if (Metro2.utils.mediaExist(o2.static) && !element2.hasClass("static")) {
          element2.addClass("static");
          element2.data("opened", false).removeClass("open");
          if (o2.shift !== null) {
            $3.each(o2.shift.split(","), function() {
              $3(this).animate({
                draw: {
                  left: 0
                },
                dur: o2.duration
              });
            });
          }
          this._fireEvent("static-set");
        }
        if (!Metro2.utils.mediaExist(o2.static)) {
          element2.removeClass("static");
          this._fireEvent("static-loss");
        }
      },
      isOpen: function() {
        return this.element.data("opened") === true;
      },
      open: function() {
        const element2 = this.element, o2 = this.options;
        if (element2.hasClass("static")) {
          return;
        }
        element2.data("opened", true).addClass("open");
        if (o2.shift !== null) {
          $3(o2.shift).animate({
            draw: {
              left: element2.outerWidth()
            },
            dur: o2.duration
          });
        }
        this._fireEvent("open");
      },
      close: function() {
        const element2 = this.element, o2 = this.options;
        if (element2.hasClass("static")) {
          return;
        }
        element2.data("opened", false).removeClass("open");
        if (o2.shift !== null) {
          $3(o2.shift).animate({
            draw: {
              left: 0
            },
            dur: o2.duration
          });
        }
        this._fireEvent("close");
      },
      toggle: function() {
        if (this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
        this._fireEvent("toggle");
      },
      changeAttribute: function() {
      },
      destroy: function() {
        const element2 = this.element, o2 = this.options;
        const toggle = this.toggle_element;
        if (toggle !== null) {
          toggle.off(Metro2.events.click);
        }
        if (o2.static !== null && Metro2.media_modes.includes(o2.static)) {
          $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        }
        element2.off(Metro2.events.click, ".js-sidebar-close");
        return element2;
      }
    });
    Metro2["sidebar"] = {
      isSidebar: function(el) {
        return Metro2.utils.isMetroObject(el, "sidebar");
      },
      open: function(el) {
        if (!this.isSidebar(el)) {
          return;
        }
        Metro2.getPlugin(el, "sidebar").open();
      },
      close: function(el) {
        if (!this.isSidebar(el)) {
          return;
        }
        Metro2.getPlugin(el, "sidebar").close();
      },
      toggle: function(el) {
        if (!this.isSidebar(el)) {
          return;
        }
        Metro2.getPlugin(el, "sidebar").toggle();
      },
      isOpen: function(el) {
        if (!this.isSidebar(el)) {
          return;
        }
        return Metro2.getPlugin(el, "sidebar").isOpen();
      }
    };
  })(Metro, Dom);

  // source/components/sidenav-counter/sidenav.js
  (function(Metro2, $3) {
    "use strict";
    var SidenavCounterDefaultConfig = {
      compacted: false,
      toggle: null,
      expandPoint: "fs",
      onMenuItemClick: Metro2.noop,
      onCollapse: Metro2.noop,
      onExpand: Metro2.noop,
      onSidenavCreate: Metro2.noop
    };
    Metro2.sidenavCounterSetup = function(options) {
      SidenavCounterDefaultConfig = $3.extend({}, SidenavCounterDefaultConfig, options);
    };
    if (typeof window["metroSidenavCounterSetup"] !== void 0) {
      Metro2.sidenavCounterSetup(window["metroSidenavCounterSetup"]);
    }
    Metro2.Component("sidenav-counter", {
      init: function(options, elem) {
        this._super(elem, options, SidenavCounterDefaultConfig, {
          // define instance vars here
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        this._createStructure();
        this._createEvents();
        this._fireEvent("sidenav-create");
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.addClass("sidenav-counter");
        if (Metro2.utils.mediaExist(o2.expandPoint)) {
          element2.addClass("expanded");
        }
        const state2 = Metro2.storage.getItem("sidenav-counter:compacted");
        if (state2 === true) {
          element2.removeClass("expanded");
          element2.addClass("handmade");
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        if (o2.toggle) {
          $3(o2.toggle).on("click", function() {
            element2.toggleClass("expanded");
            element2.toggleClass("handmade");
            Metro2.storage.setItem("sidenav-counter:compacted", !element2.hasClass("expanded"));
          });
        }
        $3(globalThis).on(Metro2.events.resize, () => {
          if (element2.hasClass("handmade")) {
            return;
          }
          if (Metro2.utils.mediaExist(o2.expandPoint)) {
            element2.addClass("expanded");
          } else {
            element2.removeClass("expanded");
          }
        }, { ns: this.id });
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/sorter/sorter.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var SorterDefaultConfig = {
      sorterDeferred: 0,
      thousandSeparator: ",",
      decimalSeparator: ",",
      sortTarget: null,
      sortSource: null,
      sortDir: "asc",
      sortStart: true,
      saveInitial: true,
      onSortStart: Metro2.noop,
      onSortStop: Metro2.noop,
      onSortItemSwitch: Metro2.noop,
      onSorterCreate: Metro2.noop
    };
    Metro2.sorterSetup = function(options) {
      SorterDefaultConfig = $3.extend({}, SorterDefaultConfig, options);
    };
    if (typeof globalThis["metroSorterSetup"] !== void 0) {
      Metro2.sorterSetup(globalThis["metroSorterSetup"]);
    }
    Metro2.Component("sorter", {
      init: function(options, elem) {
        this._super(elem, options, SorterDefaultConfig, {
          initial: []
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._fireEvent("sorter-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        if (o2.sortTarget === null) {
          o2.sortTarget = element2.children()[0].tagName;
        }
        this.initial = element2.find(o2.sortTarget).get();
        if (o2.sortStart === true) {
          this.sort(o2.sortDir);
        }
      },
      _getItemContent: function(item) {
        var o2 = this.options;
        var data2, inset, i3, format;
        if (Utils.isValue(o2.sortSource)) {
          data2 = "";
          inset = item.getElementsByClassName(o2.sortSource);
          if (inset.length > 0) for (i3 = 0; i3 < inset.length; i3++) {
            data2 += inset[i3].textContent;
          }
          format = inset[0].dataset.format;
        } else {
          data2 = item.textContent;
          format = item.dataset.format;
        }
        data2 = ("" + data2).toLowerCase().replace(/[\n\r]+|[\s]{2,}/g, " ").trim();
        if (Utils.isValue(format)) {
          if (["number", "int", "float", "money"].indexOf(format) !== -1 && (o2.thousandSeparator !== "," || o2.decimalSeparator !== ".")) {
            data2 = Utils.parseNumber(data2, o2.thousandSeparator, o2.decimalSeparator);
          }
          switch (format) {
            case "date":
              data2 = Utils.isDate(data2) ? new Date(data2) : "";
              break;
            case "number":
              data2 = Number(data2);
              break;
            case "int":
              data2 = parseInt(data2);
              break;
            case "float":
              data2 = parseFloat(data2);
              break;
            case "money":
              data2 = Utils.parseMoney(data2);
              break;
            case "card":
              data2 = Utils.parseCard(data2);
              break;
            case "phone":
              data2 = Utils.parsePhone(data2);
              break;
          }
        }
        return data2;
      },
      sort: function(dir) {
        var that = this, element2 = this.element, o2 = this.options;
        var items;
        var id = Utils.elementId("temp");
        var prev;
        if (dir !== void 0) {
          o2.sortDir = dir;
        }
        items = element2.find(o2.sortTarget).get();
        if (items.length === 0) {
          return;
        }
        prev = $3("<div>").attr("id", id).insertBefore($3(element2.find(o2.sortTarget)[0]));
        this._fireEvent("sort-start", {
          items
        });
        items.sort(function(a2, b2) {
          var c1 = that._getItemContent(a2);
          var c2 = that._getItemContent(b2);
          var result = 0;
          if (c1 < c2) {
            result = -1;
          }
          if (c1 > c2) {
            result = 1;
          }
          if (result !== 0) {
            that._fireEvent("sort-item-switch", {
              a: a2,
              b: b2,
              result
            });
          }
          return result;
        });
        if (o2.sortDir === "desc") {
          items.reverse();
        }
        element2.find(o2.sortTarget).remove();
        $3.each(items, function() {
          var $this = $3(this);
          $this.insertAfter(prev);
          prev = $this;
        });
        $3("#" + id).remove();
        this._fireEvent("sort-stop", {
          items
        });
      },
      reset: function() {
        var element2 = this.element, o2 = this.options;
        var items;
        var id = Utils.elementId("sorter");
        var prev;
        items = this.initial;
        if (items.length === 0) {
          return;
        }
        prev = $3("<div>").attr("id", id).insertBefore($3(element2.find(o2.sortTarget)[0]));
        element2.find(o2.sortTarget).remove();
        $3.each(items, function() {
          var $this = $3(this);
          $this.insertAfter(prev);
          prev = $this;
        });
        $3("#" + id).remove();
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        var changeSortDir = function() {
          var dir = element2.attr("data-sort-dir").trim();
          if (dir === "") return;
          o2.sortDir = dir;
          that.sort();
        };
        var changeSortContent = function() {
          var content = element2.attr("data-sort-content").trim();
          if (content === "") return;
          o2.sortContent = content;
          that.sort();
        };
        switch (attributeName) {
          case "data-sort-dir":
            changeSortDir();
            break;
          case "data-sort-content":
            changeSortContent();
            break;
        }
      },
      destroy: function() {
        return this.element;
      }
    });
    Metro2["sorter"] = {
      create: function(el, op) {
        return Utils.$()(el).sorter(op);
      },
      isSorter: function(el) {
        return Utils.isMetroObject(el, "sorter");
      },
      sort: function(el, dir) {
        if (!this.isSorter(el)) {
          return false;
        }
        if (dir === void 0) {
          dir = "asc";
        }
        Metro2.getPlugin(el, "sorter").sort(dir);
      },
      reset: function(el) {
        if (!this.isSorter(el)) {
          return false;
        }
        Metro2.getPlugin(el, "sorter").reset();
      }
    };
  })(Metro, Dom);

  // source/components/splitter/splitter.js
  (function(Metro2, $3) {
    "use strict";
    const SPLIT_MODE = {
      VERTICAL: "vertical",
      HORIZONTAL: "horizontal"
    };
    const Storage = Metro2.storage;
    let SplitterDefaultConfig = {
      splitterDeferred: 0,
      split: SPLIT_MODE.VERTICAL,
      // horizontal or vertical
      splitSizes: null,
      gutterSize: 5,
      gutterStyle: "default",
      // ribbed, dashed, dotted, default
      minSizes: null,
      children: "*",
      gutterClick: "expand",
      // TODO expand or collapse
      saveState: false,
      noResize: false,
      onResizeStart: Metro2.noop,
      onResizeStop: Metro2.noop,
      onResizeSplit: Metro2.noop,
      onResizeWindow: Metro2.noop,
      onSplitterCreate: Metro2.noop
    };
    Metro2.splitterSetup = function(options) {
      SplitterDefaultConfig = $3.extend({}, SplitterDefaultConfig, options);
    };
    if (typeof globalThis["metroSplitterSetup"] !== "undefined") {
      Metro2.splitterSetup(globalThis["metroSplitterSetup"]);
    }
    Metro2.Component("splitter", {
      init: function(options, elem) {
        this._super(elem, options, SplitterDefaultConfig, {
          storage: Metro2.utils.isValue(Storage) ? Storage : null,
          storageKey: "SPLITTER:",
          id: Metro2.utils.elementId("splitter")
        });
        return this;
      },
      _create: function() {
        const element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("splitter-create", {
          element: element2
        });
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        const children = element2.children(o2.children).addClass("split-block");
        let i3, children_sizes = [];
        const resizeProp = o2.split === SPLIT_MODE.HORIZONTAL ? "height" : "width";
        element2.addClass("splitter");
        element2.addClass(o2.split.toLowerCase() === SPLIT_MODE.VERTICAL ? "vertical" : "horizontal");
        if (o2.gutterStyle !== "default") {
          element2.addClass(`gutter-style-${o2.gutterStyle}`);
        }
        if (o2.noResize === true) {
          element2.addClass("static-size");
        }
        for (i3 = 0; i3 < children.length - 1; i3++) {
          $3("<div>").addClass("gutter").css(resizeProp, o2.gutterSize).insertAfter($3(children[i3]));
        }
        this._setSize();
        if (Metro2.utils.isValue(o2.minSizes)) {
          if (("" + o2.minSizes).includes(",")) {
            children_sizes = o2.minSizes.toArray();
            for (i3 = 0; i3 < children_sizes.length; i3++) {
              $3(children[i3]).data("min-size", children_sizes[i3]);
              children[i3].style.setProperty("min-" + resizeProp, ("" + children_sizes[i3]).includes("%") ? children_sizes[i3] : ("" + children_sizes[i3]).replace("px", "") + "px", "important");
            }
          } else {
            $3.each(children, function() {
              this.style.setProperty("min-" + resizeProp, ("" + o2.minSizes).includes("%") ? o2.minSizes : ("" + o2.minSizes).replace("px", "") + "px", "important");
            });
          }
        }
        if (o2.saveState && this.storage !== null) {
          this._getSize();
        }
      },
      _setSize: function() {
        const element2 = this.element, o2 = this.options;
        let gutters, children_sizes;
        const children = element2.children(".split-block");
        const w2 = element2.width();
        gutters = element2.children(".gutter");
        if (!Metro2.utils.isValue(o2.splitSizes)) {
          children.css({
            flexBasis: `calc(${100 / children.length}% - ${gutters.length * o2.gutterSize}px)`
          });
        } else {
          children_sizes = ("" + o2.splitSizes).toArray();
          let remnant = 100;
          let i3 = 0;
          for (; i3 < children_sizes.length; i3++) {
            let s2 = children_sizes[i3];
            if (!s2.includes("%")) {
              s2 = +s2 * 100 / w2;
            } else {
              s2 = parseInt(s2);
            }
            remnant -= s2;
            $3(children[i3]).css({
              flexBasis: `calc(${s2}% - ${gutters.length * o2.gutterSize}px)`
            });
          }
          for (; i3 < children.length; i3++) {
            $3(children[i3]).css({
              flexBasis: `calc(${remnant / (children.length - i3)}% - ${gutters.length * o2.gutterSize}px)`
            });
          }
        }
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const gutters = element2.children(".gutter");
        gutters.on(Metro2.events.startAll, function(e) {
          if (o2.noResize === true) {
            return false;
          }
          const w2 = o2.split === SPLIT_MODE.VERTICAL ? element2.width() : element2.height();
          const gutter = $3(this);
          const prev_block = gutter.prev(".split-block");
          const next_block = gutter.next(".split-block");
          const prev_block_size = 100 * (o2.split === SPLIT_MODE.VERTICAL ? prev_block.outerWidth(true) : prev_block.outerHeight(true)) / w2;
          const next_block_size = 100 * (o2.split === SPLIT_MODE.VERTICAL ? next_block.outerWidth(true) : next_block.outerHeight(true)) / w2;
          const start_pos = Metro2.utils.getCursorPosition(element2[0], e);
          gutter.addClass("active");
          prev_block.addClass("stop-pointer");
          next_block.addClass("stop-pointer");
          that._fireEvent("resize-start", {
            pos: start_pos,
            gutter: gutter[0],
            prevBlock: prev_block[0],
            nextBlock: next_block[0]
          });
          $3(globalThis).on(Metro2.events.moveAll, function(e2) {
            const pos = Metro2.utils.getCursorPosition(element2[0], e2);
            let new_pos;
            if (o2.split === SPLIT_MODE.VERTICAL) {
              new_pos = pos.x * 100 / w2 - start_pos.x * 100 / w2;
            } else {
              new_pos = pos.y * 100 / w2 - start_pos.y * 100 / w2;
            }
            prev_block.css("flex-basis", "calc(" + (prev_block_size + new_pos) + "% - " + gutters.length * o2.gutterSize + "px)");
            next_block.css("flex-basis", "calc(" + (next_block_size - new_pos) + "% - " + gutters.length * o2.gutterSize + "px)");
            that._fireEvent("resize-split", {
              pos,
              gutter: gutter[0],
              prevBlock: prev_block[0],
              nextBlock: next_block[0]
            });
          }, { ns: that.id });
          $3(globalThis).on(Metro2.events.stopAll, function(e2) {
            let cur_pos;
            prev_block.removeClass("stop-pointer");
            next_block.removeClass("stop-pointer");
            that._saveSize();
            gutter.removeClass("active");
            $3(globalThis).off(Metro2.events.moveAll, { ns: that.id });
            $3(globalThis).off(Metro2.events.stopAll, { ns: that.id });
            cur_pos = Metro2.utils.getCursorPosition(element2[0], e2);
            that._fireEvent("resize-stop", {
              pos: cur_pos,
              gutter: gutter[0],
              prevBlock: prev_block[0],
              nextBlock: next_block[0]
            });
          }, { ns: that.id });
        }, { passive: true });
        $3(globalThis).on(Metro2.events.resize, function() {
          const gutter = element2.children(".gutter");
          const prev_block = gutter.prev(".split-block");
          const next_block = gutter.next(".split-block");
          that._fireEvent("resize-window", {
            prevBlock: prev_block[0],
            nextBlock: next_block[0]
          });
        }, { ns: that.id });
      },
      _saveSize: function() {
        const element2 = this.element, o2 = this.options;
        const storage = this.storage, itemsSize = [];
        const id = element2.attr("id") || this.id;
        if (o2.saveState === true && storage !== null) {
          $3.each(element2.children(".split-block"), function() {
            const item = $3(this);
            itemsSize.push(item.css("flex-basis"));
          });
          if (storage)
            storage.setItem(this.storageKey + id, itemsSize);
        }
      },
      _getSize: function() {
        const element2 = this.element, o2 = this.options;
        let storage = this.storage, itemsSize = [];
        const id = element2.attr("id") || this.id;
        if (o2.saveState === true && storage !== null) {
          itemsSize = storage.getItem(this.storageKey + id);
          $3.each(element2.children(".split-block"), function(i3, v2) {
            const item = $3(v2);
            if (Metro2.utils.isValue(itemsSize) && Metro2.utils.isValue(itemsSize[i3])) item.css("flex-basis", itemsSize[i3]);
          });
        }
      },
      size: function(size) {
        const that = this, o2 = this.options;
        if (Metro2.utils.isValue(size)) {
          o2.splitSizes = size;
          that._setSize();
        }
        return this;
      },
      changeAttribute: function(attributeName) {
        const that = this, element2 = this.element;
        function changeSize() {
          const size = element2.attr("data-split-sizes");
          that.size(size);
        }
        if (attributeName === "data-split-sizes") {
          changeSize();
        }
      },
      destroy: function() {
        const element2 = this.element;
        const gutters = element2.children(".gutter");
        gutters.off(Metro2.events.start);
        return element2.remove();
      }
    });
  })(Metro, Dom);

  // source/components/stepper/stepper.js
  (function(Metro2, $3) {
    "use strict";
    var StepperDefaultConfig = {
      stepperDeferred: 0,
      view: Metro2.stepperView.SQUARE,
      // square, cycle, diamond
      steps: 3,
      step: 1,
      stepClick: false,
      clsStepper: "",
      clsStep: "",
      clsComplete: "",
      clsCurrent: "",
      onStep: Metro2.noop,
      onStepClick: Metro2.noop,
      onStepperCreate: Metro2.noop
    };
    Metro2.stepperSetup = function(options) {
      StepperDefaultConfig = $3.extend({}, StepperDefaultConfig, options);
    };
    if (typeof globalThis["metroStepperSetup"] !== void 0) {
      Metro2.stepperSetup(globalThis["metroStepperSetup"]);
    }
    Metro2.Component("stepper", {
      init: function(options, elem) {
        this._super(elem, options, StepperDefaultConfig, {
          current: 0
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        if (o2.step <= 0) {
          o2.step = 1;
        }
        this._createStepper();
        this._createEvents();
        this._fireEvent("stepper-create", {
          element: element2
        });
      },
      _createStepper: function() {
        var element2 = this.element, o2 = this.options;
        var i3;
        element2.addClass("stepper").addClass(o2.view).addClass(o2.clsStepper);
        for (i3 = 1; i3 <= o2.steps; i3++) {
          $3("<span>").addClass("step").addClass(o2.clsStep).data("step", i3).html("<span>" + i3 + "</span>").appendTo(element2);
        }
        this.current = 1;
        this.toStep(o2.step);
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.click, ".step", function() {
          var step = $3(this).data("step");
          if (o2.stepClick === true) {
            that.toStep(step);
            that._fireEvent("step-click", {
              step
            });
          }
        });
      },
      next: function() {
        var element2 = this.element;
        var steps = element2.find(".step");
        if (this.current + 1 > steps.length) {
          return;
        }
        this.current++;
        this.toStep(this.current);
      },
      prev: function() {
        if (this.current - 1 === 0) {
          return;
        }
        this.current--;
        this.toStep(this.current);
      },
      last: function() {
        var element2 = this.element;
        this.toStep(element2.find(".step").length);
      },
      first: function() {
        this.toStep(1);
      },
      toStep: function(step) {
        var element2 = this.element, o2 = this.options;
        var target = $3(element2.find(".step").get(step - 1));
        var prevStep = this.current;
        if (target.length === 0) {
          return;
        }
        this.current = step;
        element2.find(".step").removeClass("complete current").removeClass(o2.clsCurrent).removeClass(o2.clsComplete);
        target.addClass("current").addClass(o2.clsCurrent);
        target.prevAll().addClass("complete").addClass(o2.clsComplete);
        this._fireEvent("step", {
          step: this.current,
          prev: prevStep
        });
      },
      changeAttribute: function() {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".step");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/storage/storage.js
  (function(Metro2) {
    "use strict";
    var Utils = Metro2.utils;
    var MetroStorage = function(type) {
      return new MetroStorage.init(type);
    };
    MetroStorage.prototype = {
      setKey: function(key) {
        this.key = key;
      },
      getKey: function() {
        return this.key;
      },
      setItem: function(key, value) {
        this.storage.setItem(this.key + ":" + key, JSON.stringify(value));
      },
      getItem: function(key, default_value, reviver) {
        var result, value;
        value = this.storage.getItem(this.key + ":" + key);
        try {
          result = JSON.parse(value, reviver);
        } catch (e) {
          result = null;
        }
        return Utils.nvl(result, default_value);
      },
      getItemPart: function(key, sub_key, default_value, reviver) {
        var i3;
        var val = this.getItem(key, default_value, reviver);
        sub_key = sub_key.split("->");
        for (i3 = 0; i3 < sub_key.length; i3++) {
          val = val[sub_key[i3]];
        }
        return val;
      },
      delItem: function(key) {
        this.storage.removeItem(this.key + ":" + key);
      },
      size: function(unit) {
        var divider;
        switch (unit) {
          case "m":
          case "M": {
            divider = 1024 * 1024;
            break;
          }
          case "k":
          case "K": {
            divider = 1024;
            break;
          }
          default:
            divider = 1;
        }
        return JSON.stringify(this.storage).length / divider;
      }
    };
    MetroStorage.init = function(type) {
      this.key = "";
      this.storage = type ? type : globalThis.localStorage;
      return this;
    };
    MetroStorage.init.prototype = MetroStorage.prototype;
    Metro2.storage = MetroStorage(globalThis.localStorage);
    Metro2.session = MetroStorage(globalThis.sessionStorage);
  })(Metro);

  // source/components/streamer/streamer.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var StreamerDefaultConfig = {
      streamerDeferred: 0,
      wheel: true,
      wheelStep: 20,
      duration: METRO_ANIMATION_DURATION,
      defaultClosedIcon: "",
      defaultOpenIcon: "",
      changeUri: true,
      encodeLink: true,
      closed: false,
      chromeNotice: false,
      startFrom: null,
      slideToStart: true,
      startSlideSleep: 1e3,
      source: null,
      data: null,
      eventClick: "select",
      selectGlobal: true,
      streamSelect: false,
      excludeSelectElement: null,
      excludeClickElement: null,
      excludeElement: null,
      excludeSelectClass: "",
      excludeClickClass: "",
      excludeClass: "",
      onDataLoad: Metro2.noop,
      onDataLoaded: Metro2.noop,
      onDataLoadError: Metro2.noop,
      onDrawEvent: Metro2.noop,
      onDrawGlobalEvent: Metro2.noop,
      onDrawStream: Metro2.noop,
      onStreamClick: Metro2.noop,
      onStreamSelect: Metro2.noop,
      onEventClick: Metro2.noop,
      onEventSelect: Metro2.noop,
      onEventsScroll: Metro2.noop,
      onStreamerCreate: Metro2.noop
    };
    Metro2.streamerSetup = function(options) {
      StreamerDefaultConfig = $3.extend({}, StreamerDefaultConfig, options);
    };
    if (typeof globalThis["metroStreamerSetup"] !== void 0) {
      Metro2.streamerSetup(globalThis["metroStreamerSetup"]);
    }
    Metro2.Component("streamer", {
      init: function(options, elem) {
        this._super(elem, options, StreamerDefaultConfig, {
          data: null,
          scroll: 0,
          scrollDir: "left",
          events: null
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass("streamer");
        if (element2.attr("id") === void 0) {
          element2.attr("id", Utils.elementId("streamer"));
        }
        if (o2.source === null && o2.data === null) {
          return false;
        }
        $3("<div>").addClass("streams").appendTo(element2);
        $3("<div>").addClass("events-area").appendTo(element2);
        if (o2.source !== null) {
          this._fireEvent("data-load", {
            source: o2.source
          });
          this._loadSource();
        } else {
          this.data = o2.data;
          this.build();
        }
      },
      _loadSource: function() {
        var that = this, o2 = this.options;
        fetch(o2.source).then(Metro2.fetch.status).then(Metro2.fetch.json).then(function(data2) {
          that._fireEvent("data-loaded", {
            source: o2.source,
            data: data2
          });
          that.data = data2;
          that.build();
        }).catch(function(error) {
          that._fireEvent("data-load-error", {
            source: o2.source,
            error
          });
        });
      },
      build: function() {
        var that = this, element2 = this.element, o2 = this.options, data2 = this.data;
        var streams = element2.find(".streams").html("");
        var events_area = element2.find(".events-area").html("");
        var fake_timeline;
        var timeline = $3("<ul>").addClass("streamer-timeline").html("").appendTo(events_area);
        var streamer_events = $3("<div>").addClass("streamer-events").appendTo(events_area);
        var event_group_main = $3("<div>").addClass("event-group").appendTo(streamer_events);
        var StreamerIDS = Utils.getURIParameter(null, "StreamerIDS");
        if (StreamerIDS !== null && o2.encodeLink === true) {
          StreamerIDS = atob(StreamerIDS);
        }
        var StreamerIDS_i = StreamerIDS ? StreamerIDS.split("|")[0] : null;
        var StreamerIDS_a = StreamerIDS ? StreamerIDS.split("|")[1].split(",") : [];
        if (data2.actions !== void 0) {
          var actions = $3("<div>").addClass("streamer-actions").appendTo(streams);
          $3.each(data2.actions, function() {
            var item = this;
            var button2 = $3("<button>").addClass("streamer-action").addClass(item.cls).html(item.html);
            if (item.onclick !== void 0) button2.on(Metro2.events.click, function() {
              Utils.exec(item.onclick, [element2]);
            });
            button2.appendTo(actions);
          });
        }
        timeline.html("");
        if (data2.timeline === void 0) {
          data2.timeline = {
            start: "09:00",
            stop: "18:00",
            step: 20
          };
        }
        var start = /* @__PURE__ */ new Date(), stop = /* @__PURE__ */ new Date();
        var start_time_array = data2.timeline.start ? data2.timeline.start.split(":") : [9, 0];
        var stop_time_array = data2.timeline.stop ? data2.timeline.stop.split(":") : [18, 0];
        var step = data2.timeline.step ? parseInt(data2.timeline.step) * 60 : 1200;
        start.setHours(start_time_array[0]);
        start.setMinutes(start_time_array[1]);
        start.setSeconds(0);
        stop.setHours(stop_time_array[0]);
        stop.setMinutes(stop_time_array[1]);
        stop.setSeconds(0);
        var i3, t, h7, v2, m2, j2, fm, li2, fli, fli_w;
        for (i3 = start.getTime() / 1e3; i3 <= stop.getTime() / 1e3; i3 += step) {
          t = new Date(i3 * 1e3);
          h7 = t.getHours();
          m2 = t.getMinutes();
          v2 = Str.lpad(h7, "0", 2) + ":" + Str.lpad(m2, "0", 2);
          li2 = $3("<li>").data("time", v2).addClass("js-time-point-" + v2.replace(":", "-")).html("<em>" + v2 + "</em>").appendTo(timeline);
          fli_w = li2.width() / parseInt(data2.timeline.step);
          fake_timeline = $3("<ul>").addClass("streamer-fake-timeline").html("").appendTo(li2);
          for (j2 = 0; j2 < parseInt(data2.timeline.step); j2++) {
            fm = m2 + j2;
            v2 = Str.lpad(h7, "0", 2) + ":" + Str.lpad(fm, "0", 2);
            fli = $3("<li>").data("time", v2).addClass("js-fake-time-point-" + v2.replace(":", "-")).html("|").appendTo(fake_timeline);
            fli.css({
              width: fli_w
            });
          }
        }
        if (data2.streams !== void 0) {
          $3.each(data2.streams, function(stream_index) {
            var stream_height = 75, rows = 0;
            var stream_item = this;
            var stream = $3("<div>").addClass("stream").addClass(this.cls).appendTo(streams);
            stream.addClass(stream_item.cls).data("one", false).data("data", stream_item.data);
            $3("<div>").addClass("stream-title").html(stream_item.title).appendTo(stream);
            $3("<div>").addClass("stream-secondary").html(stream_item.secondary).appendTo(stream);
            $3(stream_item.icon).addClass("stream-icon").appendTo(stream);
            var bg = Farbe.Routines.toHEX(Utils.getStyleOne(stream, "background-color"));
            var fg = Farbe.Routines.toHEX(Utils.getStyleOne(stream, "color"));
            var stream_events = $3("<div>").addClass("stream-events").data("background-color", bg).data("text-color", fg).appendTo(event_group_main);
            if (stream_item.events !== void 0) {
              $3.each(stream_item.events, function(event_index) {
                var event_item = this;
                var row = event_item.row === void 0 ? 1 : parseInt(event_item.row);
                var _icon;
                var sid = stream_index + ":" + event_index;
                var custom_html = event_item.custom !== void 0 ? event_item.custom : "";
                var custom_html_open = event_item.custom_open !== void 0 ? event_item.custom_open : "";
                var custom_html_close = event_item.custom_close !== void 0 ? event_item.custom_close : "";
                var event;
                if (event_item.skip !== void 0 && Utils.bool(event_item.skip)) {
                  return;
                }
                event = $3("<div>").data("origin", event_item).data("sid", sid).data("data", event_item.data).data("time", event_item.time).data("target", event_item.target).addClass("stream-event").addClass("size-" + event_item.size + (["half", "one-third"].includes(event_item.size) ? "" : "x")).addClass(event_item.cls).appendTo(stream_events);
                var time_point = timeline.find(".js-fake-time-point-" + this.time.replace(":", "-"));
                var left = time_point.offset().left - stream_events.offset().left;
                var top = 75 * (row - 1);
                if (row > rows) {
                  rows = row;
                }
                event.css({
                  position: "absolute",
                  left,
                  top
                });
                if (Utils.isNull(event_item.html)) {
                  var slide = $3("<div>").addClass("stream-event-slide").appendTo(event);
                  var slide_logo = $3("<div>").addClass("slide-logo").appendTo(slide);
                  var slide_data = $3("<div>").addClass("slide-data").appendTo(slide);
                  if (event_item.icon !== void 0) {
                    if (Utils.isTag(event_item.icon)) {
                      $3(event_item.icon).addClass("icon").appendTo(slide_logo);
                    } else {
                      $3("<img>").addClass("icon").attr("src", event_item.icon).attr("alt", "").appendTo(slide_logo);
                    }
                  }
                  $3("<span>").addClass("time").css({
                    backgroundColor: bg,
                    color: fg
                  }).html(event_item.time).appendTo(slide_logo);
                  $3("<div>").addClass("title").html(event_item.title).appendTo(slide_data);
                  $3("<div>").addClass("subtitle").html(event_item.subtitle).appendTo(slide_data);
                  $3("<div>").addClass("desc").html(event_item.desc).appendTo(slide_data);
                  if (o2.closed === false && (element2.attr("id") === StreamerIDS_i && StreamerIDS_a.indexOf(sid) !== -1) || event_item.selected === true || parseInt(event_item.selected) === 1) {
                    event.addClass("selected");
                  }
                  if (o2.closed === true || event_item.closed === true || parseInt(event_item.closed) === 1) {
                    _icon = event_item.closedIcon !== void 0 ? Utils.isTag(event_item.closedIcon) ? event_item.closedIcon : "<span>" + event_item.closedIcon + "</span>" : Utils.isTag(o2.defaultClosedIcon) ? o2.defaultClosedIcon : "<span>" + o2.defaultClosedIcon + "</span>";
                    $3(_icon).addClass("state-icon").addClass(event_item.clsClosedIcon).appendTo(slide);
                    event.data("closed", true).data("target", event_item.target);
                    event.append(custom_html_open);
                  } else {
                    _icon = event_item.openIcon !== void 0 ? Utils.isTag(event_item.openIcon) ? event_item.openIcon : "<span>" + event_item.openIcon + "</span>" : Utils.isTag(o2.defaultOpenIcon) ? o2.defaultOpenIcon : "<span>" + o2.defaultOpenIcon + "</span>";
                    $3(_icon).addClass("state-icon").addClass(event_item.clsOpenIcon).appendTo(slide);
                    event.data("closed", false);
                    event.append(custom_html_close);
                  }
                  event.append(custom_html);
                } else {
                  event.html(event_item.html);
                }
                that._fireEvent("draw-event", {
                  event: event[0]
                });
              });
              var last_child = stream_events.find(".stream-event").last();
              if (last_child.length > 0) stream_events.outerWidth(last_child[0].offsetLeft + last_child.outerWidth());
            }
            stream_events.css({
              height: stream_height * rows
            });
            element2.find(".stream").eq(stream_events.index()).css({
              height: stream_height * rows
            });
            that._fireEvent("draw-stream", {
              stream: stream[0]
            });
          });
        }
        if (data2.global !== void 0) {
          var streamer_events_left = streamer_events.offset().left;
          $3.each(["before", "after"], function() {
            var global_item = this;
            if (data2.global[global_item] !== void 0) {
              $3.each(data2.global[global_item], function() {
                var event_item = this;
                var group = $3("<div>").addClass("event-group").addClass("size-" + event_item.size + (["half", "one-third"].includes(event_item.size) ? "" : "x"));
                var events = $3("<div>").addClass("stream-events global-stream").appendTo(group);
                var event = $3("<div>").addClass("stream-event").appendTo(events);
                event.addClass("global-event").addClass(event_item.cls).data("time", event_item.time).data("origin", event_item).data("data", event_item.data);
                $3("<div>").addClass("event-title").html(event_item.title).appendTo(event);
                $3("<div>").addClass("event-subtitle").html(event_item.subtitle).appendTo(event);
                $3("<div>").addClass("event-html").html(event_item.html).appendTo(event);
                var left, t2 = timeline.find(".js-fake-time-point-" + this.time.replace(":", "-"));
                if (t2.length > 0) {
                  left = t2.offset().left - streamer_events_left;
                }
                group.css({
                  position: "absolute",
                  left,
                  height: "100%"
                }).appendTo(streamer_events);
                that._fireEvent("draw-global-event", {
                  event: event[0]
                });
              });
            }
          });
        }
        element2.data("stream", -1);
        element2.find(".events-area").scrollLeft(0);
        this.events = element2.find(".stream-event");
        this._createEvents();
        if (o2.startFrom !== null && o2.slideToStart === true) {
          setTimeout(function() {
            that.slideTo(o2.startFrom);
          }, o2.startSlideSleep);
        }
        this._fireEvent("streamer-create");
        this._fireScroll();
      },
      _fireScroll: function() {
        var that = this, element2 = this.element;
        var scrollable = element2.find(".events-area");
        var oldScroll = this.scroll;
        if (scrollable.length === 0) {
          return void 0;
        }
        this.scrollDir = this.scroll < scrollable[0].scrollLeft ? "left" : "right";
        this.scroll = scrollable[0].scrollLeft;
        this._fireEvent("events-scroll", {
          scrollLeft: scrollable[0].scrollLeft,
          oldScroll,
          scrollDir: that.scrollDir,
          events: $3.toArray(this.events)
        });
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        function disableScroll() {
          var scrollTop = globalThis.pageYOffset || document.documentElement.scrollTop;
          var scrollLeft = globalThis.pageXOffset || document.documentElement.scrollLeft;
          globalThis.onscroll = function() {
            globalThis.scrollTo(scrollLeft, scrollTop);
          };
        }
        function enableScroll() {
          globalThis.onscroll = function() {
          };
        }
        element2.off(Metro2.events.click, ".stream-event").on(Metro2.events.click, ".stream-event", function(e) {
          var event = $3(this);
          if (o2.excludeClass !== "" && event.hasClass(o2.excludeClass)) {
            return;
          }
          if (o2.excludeElement !== null && $3(e.target).is(o2.excludeElement)) {
            return;
          }
          if (o2.closed === false && event.data("closed") !== true && o2.eventClick === "select") {
            if (o2.excludeSelectClass !== "" && event.hasClass(o2.excludeSelectClass)) {
            } else {
              if (o2.excludeSelectElement !== null && $3(e.target).is(o2.excludeSelectElement)) {
              } else {
                if (event.hasClass("global-event")) {
                  if (o2.selectGlobal === true) {
                    event.toggleClass("selected");
                  }
                } else {
                  event.toggleClass("selected");
                }
                if (o2.changeUri === true) {
                  that._changeURI();
                }
                that._fireEvent("event-select", {
                  event: event[0],
                  selected: event.hasClass("selected")
                });
              }
            }
          } else {
            if (o2.excludeClickClass !== "" && event.hasClass(o2.excludeClickClass)) {
            } else {
              if (o2.excludeClickElement !== null && $3(e.target).is(o2.excludeClickElement)) {
              } else {
                that._fireEvent("event-click", {
                  event: event[0]
                });
                if (o2.closed === true || event.data("closed") === true) {
                  var target = event.data("target");
                  if (target) {
                    globalThis.location.href = target;
                  }
                }
              }
            }
          }
        });
        element2.off(Metro2.events.click, ".stream").on(Metro2.events.click, ".stream", function() {
          var stream = $3(this);
          var index = stream.index();
          if (o2.streamSelect === false) {
            return;
          }
          if (element2.data("stream") === index) {
            element2.find(".stream-event").removeClass("disabled");
            element2.data("stream", -1);
          } else {
            element2.data("stream", index);
            element2.find(".stream-event").addClass("disabled");
            that.enableStream(stream);
            that._fireEvent("stream-select", {
              stream
            });
          }
          that._fireEvent("stream-click", {
            stream
          });
        });
        if (o2.wheel === true) {
          element2.find(".events-area").off(Metro2.events.mousewheel).on(Metro2.events.mousewheel, function(e) {
            if (e.deltaY === void 0) {
              return;
            }
            var scroll, scrollable = $3(this);
            var dir = e.deltaY > 0 ? -1 : 1;
            var step = o2.wheelStep;
            scroll = scrollable.scrollLeft() - dir * step;
            scrollable.scrollLeft(scroll);
          }, {
            passive: true
          });
          element2.find(".events-area").off("mouseenter").on("mouseenter", function() {
            disableScroll();
          });
          element2.find(".events-area").off("mouseleave").on("mouseleave", function() {
            enableScroll();
          });
        }
        element2.find(".events-area").last().off("scroll").on("scroll", function() {
          that._fireScroll();
        });
        if ($3.touchable === true) {
          element2.off(Metro2.events.click, ".stream").on(Metro2.events.click, ".stream", function() {
            var stream = $3(this);
            stream.toggleClass("focused");
            $3.each(element2.find(".stream"), function() {
              if ($3(this).is(stream)) return;
              $3(this).removeClass("focused");
            });
          });
        }
      },
      _changeURI: function() {
        var link2 = this.getLink();
        history.pushState({}, document.title, link2);
      },
      slideTo: function(time2) {
        var element2 = this.element, o2 = this.options;
        var target;
        if (time2 === void 0) {
          target = $3(element2.find(".streamer-timeline li")[0]);
        } else {
          target = $3(element2.find(".streamer-timeline .js-time-point-" + time2.replace(":", "-"))[0]);
        }
        element2.find(".events-area").animate({
          draw: {
            scrollLeft: target[0].offsetLeft - element2.find(".streams .stream").outerWidth()
          },
          dur: o2.duration
        });
      },
      enableStream: function(stream) {
        var element2 = this.element;
        var index = stream.index() - 1;
        stream.removeClass("disabled").data("streamDisabled", false);
        element2.find(".stream-events").eq(index).find(".stream-event").removeClass("disabled");
      },
      disableStream: function(stream) {
        var element2 = this.element;
        var index = stream.index() - 1;
        stream.addClass("disabled").data("streamDisabled", true);
        element2.find(".stream-events").eq(index).find(".stream-event").addClass("disabled");
      },
      toggleStream: function(stream) {
        if (stream.data("streamDisabled") === true) {
          this.enableStream(stream);
        } else {
          this.disableStream(stream);
        }
      },
      getLink: function() {
        var element2 = this.element, o2 = this.options;
        var events = element2.find(".stream-event");
        var a2 = [];
        var link2;
        var origin = globalThis.location.href;
        $3.each(events, function() {
          var event = $3(this);
          if (event.data("sid") === void 0 || !event.hasClass("selected")) {
            return;
          }
          a2.push(event.data("sid"));
        });
        link2 = element2.attr("id") + "|" + a2.join(",");
        if (o2.encodeLink === true) {
          link2 = btoa(link2);
        }
        return Utils.updateURIParameter(origin, "StreamerIDS", link2);
      },
      getTimes: function() {
        var element2 = this.element;
        var times = element2.find(".streamer-timeline > li");
        var result = [];
        $3.each(times, function() {
          result.push($3(this).data("time"));
        });
        return result;
      },
      getEvents: function(event_type, include_global) {
        var element2 = this.element;
        var items, events = [];
        switch (event_type) {
          case "selected":
            items = element2.find(".stream-event.selected");
            break;
          case "non-selected":
            items = element2.find(".stream-event:not(.selected)");
            break;
          default:
            items = element2.find(".stream-event");
        }
        $3.each(items, function() {
          var item = $3(this);
          var origin;
          if (include_global !== true && item.parent().hasClass("global-stream")) return;
          origin = item.data("origin");
          events.push(origin);
        });
        return events;
      },
      source: function(s2) {
        var element2 = this.element;
        if (s2 === void 0) {
          return this.options.source;
        }
        element2.attr("data-source", s2);
        this.options.source = s2;
        this.changeSource();
      },
      dataSet: function(s2) {
        if (s2 === void 0) {
          return this.options.data;
        }
        this.options.data = s2;
        this.changeData(s2);
      },
      getStreamerData: function() {
        return this.data;
      },
      toggleEvent: function(event) {
        var o2 = this.options;
        event = $3(event);
        if (event.hasClass("global-event") && o2.selectGlobal !== true) {
          return;
        }
        if (event.hasClass("selected")) {
          this.selectEvent(event, false);
        } else {
          this.selectEvent(event, true);
        }
      },
      selectEvent: function(event, state2) {
        var that = this, o2 = this.options;
        if (state2 === void 0) {
          state2 = true;
        }
        event = $3(event);
        if (event.hasClass("global-event") && o2.selectGlobal !== true) {
          return;
        }
        if (state2 === true) event.addClass("selected");
        else event.removeClass("selected");
        if (o2.changeUri === true) {
          that._changeURI();
        }
        this._fireEvent("event-select", {
          event: event[0],
          selected: state2
        });
      },
      changeSource: function() {
        var element2 = this.element, o2 = this.options;
        var new_source = element2.attr("data-source");
        if (String(new_source).trim() === "") {
          return;
        }
        o2.source = new_source;
        this._fireEvent("data-load", {
          source: o2.source
        });
        this._loadSource();
        this._fireEvent("source-change");
      },
      changeData: function(data2) {
        var element2 = this.element, o2 = this.options;
        var old_data = this.data;
        o2.data = typeof data2 === "object" ? data2 : JSON.parse(element2.attr("data-data"));
        this.data = o2.data;
        this.build();
        this._fireEvent("data-change", {
          oldData: old_data,
          newData: o2.data
        });
      },
      changeStreamSelectOption: function() {
        var element2 = this.element, o2 = this.options;
        o2.streamSelect = element2.attr("data-stream-select").toLowerCase() === "true";
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-source":
            this.changeSource();
            break;
          case "data-data":
            this.changeData();
            break;
          case "data-stream-select":
            this.changeStreamSelectOption();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".stream-event");
        element2.off(Metro2.events.click, ".stream");
        element2.find(".events-area").off(Metro2.events.mousewheel);
        element2.find(".events-area").last().off("scroll");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/swipe/swipe.js
  (function(Metro2, $3) {
    "use strict";
    let SwipeDefaultConfig = {
      swipeThreshold: 32,
      onSwipe: Metro2.noop,
      onSwipeRight: Metro2.noop,
      onSwipeLeft: Metro2.noop,
      onSwipeUp: Metro2.noop,
      onSwipeDown: Metro2.noop,
      onSwipeCreate: Metro2.noop
    };
    Metro2.swipeSetup = function(options) {
      SwipeDefaultConfig = $3.extend({}, SwipeDefaultConfig, options);
    };
    if (typeof window["metroSwipeSetup"] !== void 0) {
      Metro2.swipeSetup(window["metroSwipeSetup"]);
    }
    Metro2.Component("swipe", {
      init: function(options, elem) {
        this._super(elem, options, SwipeDefaultConfig, {});
        return this;
      },
      _create: function() {
        this.element.css({
          userSelect: "none"
        });
        this._createEvents();
        this._fireEvent("swipe-create");
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.on("touchstart mousedown", function(e) {
          let start = Metro2.utils.pageXY(e);
          let swipe = {
            x: 0,
            y: 0
          };
          element2.on("touchmove mousemove", function(e2) {
            let changes = Metro2.utils.pageXY(e2);
            swipe.x = changes.x - start.x;
            swipe.y = changes.y - start.y;
          });
          element2.on("touchend mouseup", function(e2) {
            let direction = "";
            if (Math.abs(swipe.x) > o2.swipeThreshold || Math.abs(swipe.y) > o2.swipeThreshold) {
              if (Math.abs(swipe.x) > Math.abs(swipe.y)) {
                if (swipe.x > 0) {
                  direction = "right";
                  that._fireEvent("swipe-right", {
                    start,
                    swipe
                  });
                } else {
                  direction = "left";
                  that._fireEvent("swipe-left", {
                    start,
                    swipe
                  });
                }
              } else {
                if (swipe.y > 0) {
                  direction = "down";
                  that._fireEvent("swipe-down", {
                    start,
                    swipe
                  });
                } else {
                  direction = "up";
                  that._fireEvent("swipe-up", {
                    start,
                    swipe
                  });
                }
              }
              that._fireEvent("swipe", {
                start,
                swipe,
                direction
              });
            }
            element2.off("touchmove mousemove");
            element2.off("touchend mouseup");
          });
        });
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/switch/switch.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var SwitchDefaultConfig = {
      switchDeferred: 0,
      material: false,
      prepend: "",
      append: "",
      clsSwitch: "",
      clsCheck: "",
      clsCaption: "",
      onoff: false,
      on: "",
      off: "",
      showOnOff: false,
      onSwitchCreate: Metro2.noop
    };
    Metro2.switchSetup = function(options) {
      SwitchDefaultConfig = $3.extend({}, SwitchDefaultConfig, options);
    };
    if (typeof globalThis["metroSwitchSetup"] !== void 0) {
      Metro2.switchSetup(globalThis["metroSwitchSetup"]);
    }
    Metro2.Component("switch", {
      init: function(options, elem) {
        this._super(elem, options, SwitchDefaultConfig, {});
        return this;
      },
      _create: function() {
        const element2 = this.element, o2 = this.options;
        const strings = this.strings;
        const container = element2.wrap("<label>").addClass("switch").addClass(element2[0].className).addClass(o2.clsSwitch);
        element2.attr("type", "checkbox");
        if (element2.attr("readonly") !== void 0) {
          element2.on("click", function(e) {
            e.preventDefault();
          });
        }
        this.component = container;
        element2[0].className = "";
        if (o2.prepend) {
          container.prepend($3("<span>").addClass("caption-prepend").addClass(o2.clsPrepend).addClass(o2.clsCaption).html(o2.prepend));
        }
        if (o2.append) {
          container.append($3("<span>").addClass("caption-append").addClass(o2.clsAppend).addClass(o2.clsCaption).html(o2.append));
        }
        if (o2.onoff === true) {
          element2.attr("data-on", o2.on || strings.label_on);
          element2.attr("data-off", o2.off || strings.label_off);
        } else {
          element2.removeAttr("data-on");
          element2.removeAttr("data-off");
        }
        if (o2.material === true) {
          container.addClass("material");
        }
        this._fireEvent("switch-create");
      },
      toggle: function(v2) {
        const element2 = this.element;
        if (element2.is(":disabled")) return this;
        if (!Utils.isValue(v2)) {
          element2.prop("checked", !Utils.bool(element2.prop("checked")));
        } else {
          element2.prop("checked", v2 === 1);
        }
        return this;
      },
      changeAttribute: function(attr, newVal) {
      },
      destroy: function() {
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/typer/typer.js
  (function(Metro2, $3) {
    "use strict";
    var TyperDefaultConfig = {
      splitter: ",",
      variance: 0,
      delay: 100,
      blinkDelay: 400,
      deleteDelay: 800,
      loop: true,
      cursor: "_",
      colors: "",
      onType: Metro2.noop,
      onTyperCreate: Metro2.noop
    };
    Metro2.typerSetup = function(options) {
      TyperDefaultConfig = $3.extend({}, TyperDefaultConfig, options);
    };
    if (typeof globalThis["metroTyperSetup"] !== void 0) {
      Metro2.typerSetup(globalThis["metroTyperSetup"]);
    }
    Metro2.Component("typer", {
      init: function(options, elem) {
        this._super(elem, options, TyperDefaultConfig, {
          // define instance vars here
          original: null,
          lines: null,
          text: null,
          cursor: null,
          on: true,
          interval: null,
          colors: null,
          colorIndex: 0
        });
        return this;
      },
      _create: function() {
        const element2 = this.element, o2 = this.options;
        element2.addClass("typer");
        this.original = element2.text();
        this.words = this.original.split(o2.splitter).pack();
        this.colors = o2.colors.split(",").pack();
        this.cursor = $3("<span>").addClass("typer-cursor").html(o2.cursor).insertAfter(element2);
        this.interval = setInterval(() => this._blink(), +o2.blinkDelay);
        this.progress = { word: 0, char: 0, building: true, looped: 0 };
        element2.clear();
        this.start();
      },
      _blink: function() {
        if (this.on) {
          this.cursor[0].style.opacity = 0;
          this.on = false;
        } else {
          this.cursor[0].style.opacity = 1;
          this.on = true;
        }
      },
      doTyping: function() {
        const that = this, element2 = this.element, elem = this.elem, o2 = this.options;
        let atWordEnd;
        const p3 = this.progress;
        const w2 = p3.word;
        const c = p3.char;
        const curr = [...this.words[w2]].slice(0, c).join("");
        const timeout = (2 * Math.random() - 1) * o2.variance + o2.delay;
        {
          this.cursor[0].style.opacity = "1";
          this.on = true;
          clearInterval(this.interval);
          this.interval = setInterval(() => this._blink(), +o2.blinkDelay);
        }
        element2.html(curr);
        if (p3.building) {
          atWordEnd = p3.char === this.words[w2].length;
          if (atWordEnd) {
            p3.building = false;
          } else {
            p3.char += 1;
          }
        } else {
          if (p3.char === 0) {
            p3.building = true;
            p3.word = (p3.word + 1) % this.words.length;
            if (this.colors.length) {
              this.colorIndex = (this.colorIndex + 1) % this.colors.length;
              elem.style.color = this.colors[this.colorIndex];
            }
          } else {
            p3.char -= 1;
          }
        }
        if (p3.word === this.words.length - 1) {
          p3.looped += 1;
        }
        if (!p3.building && this.loop <= p3.looped) {
          this.typing = false;
        }
        setTimeout(() => {
          if (this.typing) {
            this.doTyping();
          }
        }, atWordEnd ? o2.deleteDelay : timeout);
      },
      start: function() {
        if (!this.typing) {
          this.typing = true;
          this.doTyping();
        }
      },
      stop: function() {
        this.typing = false;
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/table/table.js
  var TABLE_COL_OPTIONS = {
    title: void 0,
    format: void 0,
    formatMask: void 0,
    name: void 0,
    colspan: null,
    size: void 0,
    sortable: false,
    sortDir: void 0,
    clsColumn: void 0,
    cls: void 0,
    show: true,
    required: true,
    field: void 0,
    fieldType: void 0,
    validator: void 0,
    template: void 0,
    type: "data"
  };
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var TableDefaultConfig = {
      caption: "",
      cardMode: "",
      useCurrentSlice: false,
      showInspectorButton: false,
      inspectorButtonIcon: "\u{1F527}",
      tableDeferred: 0,
      templateBeginToken: "<%",
      templateEndToken: "%>",
      paginationDistance: 5,
      paginationIslandSize: 3,
      paginationShortTrack: 10,
      horizontalScroll: false,
      horizontalScrollStop: null,
      check: false,
      checkType: "checkbox",
      checkColIndex: 0,
      checkName: null,
      checkStoreKey: "TABLE:$1:KEYS",
      rownum: false,
      rownumTitle: "#",
      filters: null,
      filtersOperator: "and",
      head: null,
      body: null,
      source: null,
      static: false,
      searchMinLength: 1,
      searchThreshold: 500,
      searchFields: null,
      showRowsSteps: true,
      showSearch: true,
      showTableInfo: true,
      showPagination: true,
      paginationShortMode: true,
      showActivity: true,
      muteTable: true,
      showSkip: false,
      rows: 10,
      rowsSteps: "10,25,50,100",
      staticView: false,
      viewSaveMode: "client",
      viewSavePath: "TABLE:$1:OPTIONS",
      sortDir: "asc",
      decimalSeparator: ".",
      thousandSeparator: ",",
      tableRowsCountTitle: null,
      tableSearchTitle: null,
      tableSearchPlaceholder: "",
      tableInfoTitle: null,
      paginationPrevTitle: null,
      paginationNextTitle: null,
      allRecordsTitle: null,
      inspectorTitle: null,
      tableSkipTitle: null,
      emptyTableTitle: null,
      activityType: "atom",
      activityStyle: "color",
      activityTimeout: 100,
      searchWrapper: null,
      rowsWrapper: null,
      infoWrapper: null,
      paginationWrapper: null,
      skipWrapper: null,
      cellWrapper: true,
      clsComponent: "",
      clsTableContainer: "",
      clsTable: "",
      clsHead: "",
      clsHeadRow: "",
      clsHeadCell: "",
      clsBody: "",
      clsBodyRow: "",
      clsBodyCell: "",
      clsCellWrapper: "",
      clsFooter: "",
      clsFooterRow: "",
      clsFooterCell: "",
      clsTableTop: "",
      clsRowsCount: "",
      clsSearch: "",
      clsTableBottom: "",
      clsTableInfo: "",
      clsTablePagination: "",
      clsPagination: "",
      clsTableSkip: "",
      clsTableSkipInput: "",
      clsTableSkipButton: "",
      clsEvenRow: "",
      clsOddRow: "",
      clsRow: "",
      clsEmptyTableTitle: "",
      onDraw: Metro2.noop,
      onDrawRow: Metro2.noop,
      onDrawCell: Metro2.noop,
      onAppendRow: Metro2.noop,
      onAppendCell: Metro2.noop,
      onSortStart: Metro2.noop,
      onSortStop: Metro2.noop,
      onSortItemSwitch: Metro2.noop,
      onSearch: Metro2.noop,
      onRowsCountChange: Metro2.noop,
      onDataLoad: Metro2.noop,
      onDataLoadError: Metro2.noop,
      onDataLoaded: Metro2.noop,
      onDataLoadEnd: Metro2.noop,
      onDataSaveError: Metro2.noop,
      onFilterRowAccepted: Metro2.noop,
      onFilterRowDeclined: Metro2.noop,
      onCheckClick: Metro2.noop,
      onCheckClickAll: Metro2.noop,
      onCheckDraw: Metro2.noop,
      onViewSave: Metro2.noop,
      onViewGet: Metro2.noop,
      onViewCreated: Metro2.noop,
      onTableCreate: Metro2.noop,
      onSkip: Metro2.noop
    };
    Metro2.tableSetup = function(options) {
      TableDefaultConfig = $3.extend({}, TableDefaultConfig, options);
    };
    if (typeof globalThis["metroTableSetup"] !== void 0) {
      Metro2.tableSetup(globalThis["metroTableSetup"]);
    }
    Metro2.Component("table", {
      init: function(options, elem) {
        this._super(elem, options, TableDefaultConfig, {
          currentPage: 1,
          pagesCount: 1,
          searchString: "",
          data: null,
          activity: null,
          loadActivity: null,
          busy: false,
          filters: [],
          wrapperInfo: null,
          wrapperSearch: null,
          wrapperRows: null,
          wrapperPagination: null,
          wrapperSkip: null,
          filterIndex: null,
          filtersIndexes: [],
          component: null,
          inspector: null,
          view: {},
          viewDefault: {},
          input_interval: null,
          searchFields: [],
          id: Utils.elementId("table"),
          sort: {
            dir: "asc",
            colIndex: 0
          },
          service: [],
          heads: [],
          items: [],
          foots: [],
          filteredItems: [],
          currentSlice: [],
          index: {}
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var id = Utils.elementId("table");
        var table_component, table_container, activity;
        if (!element2.id()) {
          console.warn(`To use all table component features, please set an ID for the table element!`);
          element2.id(id);
        }
        if (Utils.isValue(o2.searchFields)) {
          this.searchFields = o2.searchFields.toArray();
        }
        if (Utils.isValue(o2.head)) {
          var _head = o2.head;
          o2.head = Utils.isObject(o2.head);
          if (!o2.head) {
            console.warn("Head " + _head + " defined but not exists!");
            o2.head = null;
          }
        }
        if (Utils.isValue(o2.body)) {
          var _body = o2.body;
          o2.body = Utils.isObject(o2.body);
          if (!o2.body) {
            console.warn("Body " + _body + " defined but not exists!");
            o2.body = null;
          }
        }
        if (o2.static === true) {
          o2.showPagination = false;
          o2.showRowsSteps = false;
          o2.showSearch = false;
          o2.showTableInfo = false;
          o2.showSkip = false;
          o2.rows = -1;
        }
        table_component = $3("<div>").addClass("table-component");
        table_component.insertBefore(element2);
        table_container = $3("<div>").addClass("table-container").addClass(o2.clsTableContainer).appendTo(table_component);
        element2.appendTo(table_container);
        if (o2.horizontalScroll === true) {
          table_container.addClass("horizontal-scroll");
        }
        if (!Utils.isNull(o2.horizontalScrollStop) && Utils.mediaExist(o2.horizontalScrollStop)) {
          table_container.removeClass("horizontal-scroll");
        }
        table_component.addClass(o2.clsComponent);
        this.activity = $3("<div>").addClass("table-progress").appendTo(table_component);
        activity = $3("<div>").appendTo(this.activity);
        Metro2.makePlugin(activity, "activity", {
          type: o2.activityType,
          style: o2.activityStyle
        });
        if (o2.showActivity !== true) {
          this.activity.css({
            visibility: "hidden"
          });
        }
        this.component = table_component[0];
        if (o2.source !== null) {
          this._fireEvent("data-load", {
            source: o2.source
          });
          var objSource = Utils.isObject(o2.source);
          if (objSource !== false && $3.isPlainObject(objSource)) {
            that._build(objSource);
          } else {
            this.activity.show(function() {
              fetch(o2.source).then(Metro2.fetch.status).then(Metro2.fetch.json).then(function(data2) {
                that.activity.hide();
                if (typeof data2 !== "object") {
                  throw new Error("Data for table is not a object");
                }
                that._fireEvent("data-loaded", {
                  source: o2.source,
                  data: data2
                });
                that._build(data2);
              }).catch(function(error) {
                that.activity.hide();
                that._fireEvent("data-load-error", {
                  source: o2.source,
                  error
                });
              });
            });
          }
        } else {
          that._build();
        }
      },
      _createIndex: function() {
        var that = this, colIndex = this.options.checkColIndex;
        setImmediate(function() {
          that.items.forEach(function(v2, i3) {
            that.index[v2[colIndex]] = i3;
          });
        });
      },
      _build: function(data2) {
        var that = this, element2 = this.element, o2 = this.options;
        var view, id = element2.attr("id"), viewPath;
        o2.rows = +o2.rows;
        this.items = [];
        this.heads = [];
        this.foots = [];
        if (Array.isArray(o2.head)) {
          this.heads = o2.head;
        }
        if (Array.isArray(o2.body)) {
          this.items = o2.body;
        }
        if (Utils.isValue(data2)) {
          this._createItemsFromJSON(data2);
        } else {
          this._createItemsFromHTML();
        }
        this._createIndex();
        this.view = this._createView();
        this.viewDefault = Utils.objectClone(this.view);
        viewPath = o2.viewSavePath.replace("$1", id);
        if (o2.viewSaveMode.toLowerCase() === "client") {
          view = Metro2.storage.getItem(viewPath);
          if (Utils.isValue(view) && Utils.objectLength(view) === Utils.objectLength(this.view)) {
            this.view = view;
            this._fireEvent("view-get", {
              source: "client",
              view
            });
          }
          this._final();
        } else {
          fetch(viewPath).then(Metro2.fetch.status).then(Metro2.fetch.json).then(function(view2) {
            if (Utils.isValue(view2) && Utils.objectLength(view2) === Utils.objectLength(that.view)) {
              that.view = view2;
              that._fireEvent("view-get", {
                source: "server",
                view: view2
              });
            }
            that._final();
          }).catch(function(error) {
            that._final();
            console.warn("Warning! Error loading view for table " + element2.attr("id") + ": " + error);
          });
        }
      },
      _final: function() {
        var element2 = this.element, o2 = this.options;
        var id = element2.attr("id");
        Metro2.storage.delItem(o2.checkStoreKey.replace("$1", id));
        this._service();
        this._createStructure();
        this._createInspector();
        this._createEvents();
        this._fireEvent("table-create", {
          element: element2
        });
      },
      _service: function() {
        var o2 = this.options;
        this.service = [
          {
            // Rownum
            ...TABLE_COL_OPTIONS,
            title: o2.rownumTitle,
            clsColumn: "rownum-cell " + (o2.rownum !== true ? "d-none" : ""),
            cls: "rownum-cell " + (o2.rownum !== true ? "d-none" : ""),
            type: "rownum"
          },
          {
            // Checkbox
            ...TABLE_COL_OPTIONS,
            title: o2.checkType === "checkbox" ? "<input type='checkbox' data-role='checkbox' class='table-service-check-all' data-style='" + o2.checkStyle + "'>" : "",
            clsColumn: "check-cell " + (o2.check !== true ? "d-none" : ""),
            cls: "check-cell " + (o2.check !== true ? "d-none" : ""),
            type: "rowcheck"
          }
        ];
      },
      _createView: function() {
        var view;
        view = {};
        $3.each(this.heads, function(i3) {
          if (Utils.isValue(this.cls)) {
            this.cls = this.cls.replace("hidden", "");
          }
          if (Utils.isValue(this.clsColumn)) {
            this.clsColumn = this.clsColumn.replace("hidden", "");
          }
          view[i3] = {
            index: i3,
            "index-view": i3,
            show: !Utils.isValue(this.show) ? true : this.show,
            size: Utils.isValue(this.size) ? this.size : ""
          };
        });
        this._fireEvent("view-created", {
          view
        });
        return view;
      },
      _createInspectorItems: function(table2) {
        var that = this, o2 = this.options;
        var j2, tds = [], row;
        var cells = this.heads;
        table2.html("");
        for (j2 = 0; j2 < cells.length; j2++) {
          tds[j2] = null;
        }
        $3.each(cells, function(i3) {
          row = $3("<tr>");
          row.data("index", i3);
          row.data("index-view", i3);
          $3("<td>").html(
            "<input type='checkbox' data-style='" + o2.checkStyle + "' data-role='checkbox' name='column_show_check[]' value='" + i3 + "' " + (Utils.bool(that.view[i3]["show"]) ? "checked" : "") + ">"
          ).appendTo(row);
          $3("<td>").html(`<div>${this.title}</div>`).appendTo(row);
          $3("<td>").html("<input type='number' data-role='spinner' name='column_size' value='" + that.view[i3]["size"] + "' data-index='" + i3 + "'>").appendTo(row);
          $3("<td>").html(
            "<button class='button square js-table-inspector-field-up' type='button'>\u2191</button><button class='button square js-table-inspector-field-down' type='button'>\u2193</button>"
          ).appendTo(row);
          tds[that.view[i3]["index-view"]] = row;
        });
        for (j2 = 0; j2 < cells.length; j2++) {
          tds[j2].appendTo(table2);
        }
      },
      _createInspector: function() {
        var o2 = this.options, strings = this.strings;
        var inspector, table_wrap, table2, tbody2, actions;
        inspector = $3("<div data-role='draggable' data-drag-element='.table-inspector-header' data-drag-area='body'>").addClass("table-inspector");
        inspector.attr("for", this.element.attr("id"));
        $3("<div class='table-inspector-header'>" + (o2.inspectorTitle || strings.label_inspector) + "</div>").appendTo(inspector);
        table_wrap = $3("<div>").addClass("table-wrap").appendTo(inspector);
        table2 = $3("<table>").addClass("table subcompact");
        tbody2 = $3("<tbody>").appendTo(table2);
        table2.appendTo(table_wrap);
        this._createInspectorItems(tbody2);
        actions = $3("<div class='table-inspector-actions'>").appendTo(inspector);
        $3("<button class='button primary js-table-inspector-save' type='button'>").html(strings.label_save).appendTo(actions);
        $3("<button class='button secondary js-table-inspector-reset ml-2 mr-2' type='button'>").html(strings.label_reset).appendTo(actions);
        $3("<button class='button link js-table-inspector-cancel place-right' type='button'>").html(strings.label_cancel).appendTo(actions);
        inspector.data("open", false);
        this.inspector = inspector;
        $3("body").append(inspector);
        this._createInspectorEvents();
      },
      _resetInspector: function() {
        var inspector = this.inspector;
        var table2 = inspector.find("table tbody");
        this._createInspectorItems(table2);
        this._createInspectorEvents();
      },
      _createHeadsFromHTML: function() {
        var that = this, element2 = this.element;
        var head2 = element2.find("thead");
        if (head2.length > 0) {
          $3.each(head2.find("tr > *"), function() {
            var item = $3(this);
            var dir, head_item, item_class;
            if (item.hasClass("rownum-cell") || item.hasClass("check-cell")) return;
            if (Utils.isValue(item.data("sort-dir"))) {
              dir = item.data("sort-dir");
            } else {
              if (item.hasClass("sort-asc")) {
                dir = "asc";
              } else if (item.hasClass("sort-desc")) {
                dir = "desc";
              } else {
                dir = void 0;
              }
            }
            item_class = item[0].className.replace("sortable-column", "");
            item_class = item_class.replace("sort-asc", "");
            item_class = item_class.replace("sort-desc", "");
            item_class = item_class.replace("hidden", "");
            head_item = {
              type: "data",
              title: item.html(),
              name: Utils.isValue(item.data("name")) ? item.data("name") : item.text().replace(" ", "_"),
              sortable: item.hasClass("sortable-column") || Utils.isValue(item.data("sortable")) && JSON.parse(item.data("sortable")) === true,
              sortDir: dir,
              format: Utils.isValue(item.data("format")) ? item.data("format") : "string",
              formatMask: Utils.isValue(item.data("format-mask")) ? item.data("format-mask") : null,
              clsColumn: Utils.isValue(item.data("cls-column")) ? item.data("cls-column") : "",
              cls: item_class,
              colspan: item.attr("colspan"),
              size: Utils.isValue(item.data("size")) ? item.data("size") : "",
              show: !(item.hasClass("hidden") || Utils.isValue(item.data("show")) && JSON.parse(item.data("show")) === false),
              required: Utils.isValue(item.data("required")) ? JSON.parse(item.data("required")) === true : false,
              field: Utils.isValue(item.data("field")) ? item.data("field") : "input",
              fieldType: Utils.isValue(item.data("field-type")) ? item.data("field-type") : "text",
              validator: Utils.isValue(item.data("validator")) ? item.data("validator") : null,
              template: Utils.isValue(item.data("template")) ? item.data("template") : null
            };
            that.heads.push(head_item);
          });
        }
      },
      _createFootsFromHTML: function() {
        var that = this, element2 = this.element;
        var foot = element2.find("tfoot");
        if (foot.length > 0)
          $3.each(foot.find("tr > *"), function() {
            var item = $3(this);
            var foot_item;
            foot_item = {
              title: item.html(),
              name: Utils.isValue(item.data("name")) ? item.data("name") : false,
              cls: item[0].className,
              colspan: item.attr("colspan")
            };
            that.foots.push(foot_item);
          });
      },
      _createItemsFromHTML: function() {
        var that = this, element2 = this.element;
        var body2 = element2.find("tbody");
        if (body2.length > 0)
          $3.each(body2.find("tr"), function() {
            var row = $3(this);
            var tr3 = [];
            $3.each(row.children("td"), function() {
              var td2 = $3(this);
              tr3.push(td2.html());
            });
            that.items.push(tr3);
          });
        this._createHeadsFromHTML();
        this._createFootsFromHTML();
      },
      _createItemsFromJSON: function(source2) {
        var that = this;
        if (typeof source2 === "string") {
          source2 = JSON.parse(source2);
        }
        if (source2.header !== void 0) {
          that.heads = source2.header;
        } else {
          this._createHeadsFromHTML();
        }
        if (source2.data !== void 0) {
          $3.each(source2.data, function() {
            var row = this;
            var tr3 = [];
            $3.each(row, function() {
              var td2 = this;
              tr3.push(td2);
            });
            that.items.push(tr3);
          });
        }
        if (source2.footer !== void 0) {
          this.foots = source2.footer;
        } else {
          this._createFootsFromHTML();
        }
      },
      _createTableHeader: function() {
        var element2 = this.element, o2 = this.options;
        var head2 = element2.find("thead");
        var tr3, th2, tds = [], j2, cells;
        var view = o2.staticView ? this._createView() : this.view;
        if (head2.length === 0) {
          head2 = $3("<thead>");
          element2.prepend(head2);
        }
        head2.clear().addClass(o2.clsHead);
        if (o2.caption) {
          $3("<caption>").html(o2.caption).insertBefore(head2);
        }
        if (this.heads.length === 0) {
          return head2;
        }
        tr3 = $3("<tr>").addClass(o2.clsHeadRow).appendTo(head2);
        $3.each(this.service, function() {
          var item = this, classes = [];
          var th3 = $3("<th>");
          if (Utils.isValue(item.title)) {
            th3.html(item.title);
          }
          if (Utils.isValue(item.size)) {
            th3.css({ width: item.size });
          }
          if (Utils.isValue(item.cls)) {
            classes.push(item.cls);
          }
          classes.push(o2.clsHeadCell);
          th3.addClass(classes.join(" "));
          tr3.append(th3);
        });
        cells = this.heads;
        for (j2 = 0; j2 < cells.length; j2++) {
          tds[j2] = null;
        }
        $3.each(cells, function(cell_index) {
          var item = this;
          var classes = [];
          var th3 = $3("<th>");
          th3.data("index", cell_index);
          if (Utils.isValue(item.title)) {
            th3.html(item.title);
          }
          if (Utils.isValue(item.format)) {
            th3.attr("data-format", item.format);
          }
          if (Utils.isValue(item.formatMask)) {
            th3.attr("data-format-mask", item.formatMask);
          }
          if (Utils.isValue(item.name)) {
            th3.attr("data-name", item.name);
          }
          if (Utils.isValue(item.colspan)) {
            th3.attr("colspan", item.colspan);
          }
          if (Utils.isValue(item.size)) {
            th3.attr("data-size", item.size);
          }
          if (Utils.isValue(item.sortable)) {
            th3.attr("data-sortable", item.sortable);
          }
          if (Utils.isValue(item.sortDir)) {
            th3.attr("data-sort-dir", item.sortDir);
          }
          if (Utils.isValue(item.clsColumn)) {
            th3.attr("data-cls-column", item.clsColumn);
          }
          if (Utils.isValue(item.cls)) {
            th3.attr("data-cls", item.cls);
          }
          if (Utils.isValue(item.show)) {
            th3.attr("data-show", item.show);
          }
          if (Utils.isValue(item.required)) {
            th3.attr("data-required", item.required);
          }
          if (Utils.isValue(item.field)) {
            th3.attr("data-field", item.field);
          }
          if (Utils.isValue(item.fieldType)) {
            th3.attr("data-field-type", item.fieldType);
          }
          if (Utils.isValue(item.validator)) {
            th3.attr("data-validator", item.validator);
          }
          if (Utils.isValue(item.template)) {
            th3.attr("data-template", item.template);
          }
          if (Utils.isValue(view[cell_index]["size"])) {
            th3.css({ width: view[cell_index]["size"] });
          }
          if (item.sortable === true) {
            classes.push("sortable-column");
            if (Utils.isValue(item.sortDir)) {
              classes.push("sort-" + item.sortDir);
            }
          }
          if (Utils.isValue(item.cls)) {
            $3.each(item.cls.toArray(), function() {
              classes.push(this);
            });
          }
          if (Utils.bool(view[cell_index]["show"]) === false) {
            if (classes.indexOf("hidden") === -1) classes.push("hidden");
          }
          classes.push(o2.clsHeadCell);
          if (Utils.bool(view[cell_index]["show"])) {
            Utils.arrayDelete(classes, "hidden");
          }
          th3.addClass(classes.join(" "));
          tds[view[cell_index]["index-view"]] = th3;
        });
        for (j2 = 0; j2 < cells.length; j2++) {
          tds[j2].appendTo(tr3);
        }
      },
      _createTableBody: function() {
        var body2, head2, element2 = this.element;
        head2 = element2.find("thead");
        body2 = element2.find("tbody");
        if (body2.length === 0) {
          body2 = $3("<tbody>").addClass(this.options.clsBody);
          if (head2.length !== 0) {
            body2.insertAfter(head2);
          } else {
            element2.append(body2);
          }
        }
        body2.clear();
      },
      _createTableFooter: function() {
        var element2 = this.element, o2 = this.options;
        var foot = element2.find("tfoot");
        var tr3, th2;
        if (foot.length === 0) {
          foot = $3("<tfoot>").appendTo(element2);
        }
        foot.clear().addClass(o2.clsFooter);
        if (this.foots.length === 0) {
          return;
        }
        tr3 = $3("<tr>").addClass(o2.clsHeadRow).appendTo(foot);
        $3.each(this.foots, function() {
          var item = this;
          th2 = $3("<th>").appendTo(tr3);
          if (item.title !== void 0) {
            th2.html(item.title);
          }
          if (item.name !== void 0) {
            th2.addClass("foot-column-name-" + item.name);
          }
          if (item.cls !== void 0) {
            th2.addClass(item.cls);
          }
          if (Utils.isValue(item.colspan)) {
            th2.attr("colspan", item.colspan);
          }
          th2.appendTo(tr3);
        });
      },
      _createTopBlock: function() {
        var that = this, element2 = this.element, o2 = this.options, strings = this.strings;
        var top_block = $3("<div>").addClass("table-top").addClass(o2.clsTableTop).insertBefore(element2.parent());
        var search_block, search_input, rows_block, rows_select;
        search_block = Utils.isValue(this.wrapperSearch) ? this.wrapperSearch : $3("<div>").addClass("table-search-block").addClass(o2.clsSearch).appendTo(top_block);
        search_block.addClass(o2.clsSearch);
        search_input = $3("<input>").attr("type", "text").attr("placeholder", o2.tableSearchPlaceholder).appendTo(search_block);
        Metro2.makePlugin(search_input, "input", {
          prepend: o2.tableSearchTitle || strings.label_search
        });
        if (o2.showSearch !== true) {
          search_block.hide();
        }
        rows_block = Utils.isValue(this.wrapperRows) ? this.wrapperRows : $3("<div>").addClass("table-rows-block").appendTo(top_block);
        rows_block.addClass(o2.clsRowsCount);
        rows_select = $3("<select>").appendTo(rows_block);
        $3.each(o2.rowsSteps.toArray(), function() {
          var val = parseInt(this);
          var option2 = $3("<option>").attr("value", val).text(val === -1 ? o2.allRecordsTitle || strings.label_all : val).appendTo(rows_select);
          if (val === parseInt(o2.rows)) {
            option2.attr("selected", "selected");
          }
        });
        Metro2.makePlugin(rows_select, "select", {
          filter: false,
          prepend: o2.tableRowsCountTitle || strings.label_rows_count,
          onChange: function(val) {
            val = parseInt(val);
            if (val === parseInt(o2.rows)) {
              return;
            }
            o2.rows = val;
            that.currentPage = 1;
            that._draw();
            that._fireEvent("rows-count-change", {
              val
            });
          }
        });
        if (o2.showInspectorButton) {
          $3("<button>").addClass("button inspector-button").attr("type", "button").html(o2.inspectorButtonIcon).insertAfter(rows_block);
        }
        if (o2.showRowsSteps !== true) {
          rows_block.hide();
        }
        return top_block;
      },
      _createBottomBlock: function() {
        var element2 = this.element, o2 = this.options, strings = this.strings;
        var bottom_block = $3("<div>").addClass("table-bottom").addClass(o2.clsTableBottom).insertAfter(element2.parent());
        var info6, pagination, skip;
        info6 = Utils.isValue(this.wrapperInfo) ? this.wrapperInfo : $3("<div>").addClass("table-info").appendTo(bottom_block);
        info6.addClass(o2.clsTableInfo);
        if (o2.showTableInfo !== true) {
          info6.hide();
        }
        pagination = Utils.isValue(this.wrapperPagination) ? this.wrapperPagination : $3("<div>").addClass("table-pagination").appendTo(bottom_block);
        pagination.addClass(o2.clsTablePagination);
        if (o2.showPagination !== true) {
          pagination.hide();
        }
        skip = Utils.isValue(this.wrapperSkip) ? this.wrapperSkip : $3("<div>").appendTo(bottom_block);
        skip.addClass("table-skip").addClass(o2.clsTableSkip);
        $3(`<input type='text' data-role='input' placeholder="${strings.label_enter_page}">`).addClass("table-skip-input").addClass(o2.clsTableSkipInput).appendTo(skip);
        $3("<button>").addClass("button table-skip-button").addClass(o2.clsTableSkipButton).html(o2.tableSkipTitle || strings.label_goto_page).appendTo(skip);
        if (o2.showSkip !== true) {
          skip.hide();
        }
        return bottom_block;
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var columns;
        var w_search = $3(o2.searchWrapper), w_info = $3(o2.infoWrapper), w_rows = $3(o2.rowsWrapper), w_paging = $3(o2.paginationWrapper), w_skip = $3(o2.skipWrapper);
        if (w_search.length > 0) {
          this.wrapperSearch = w_search;
        }
        if (w_info.length > 0) {
          this.wrapperInfo = w_info;
        }
        if (w_rows.length > 0) {
          this.wrapperRows = w_rows;
        }
        if (w_paging.length > 0) {
          this.wrapperPagination = w_paging;
        }
        if (w_skip.length > 0) {
          this.wrapperSkip = w_skip;
        }
        element2.addClass(o2.clsTable);
        this._createTableHeader();
        this._createTableBody();
        this._createTableFooter();
        this._createTopBlock();
        this._createBottomBlock();
        var need_sort = false;
        if (this.heads.length > 0)
          $3.each(this.heads, function(i3) {
            var item = this;
            if (!need_sort && ["asc", "desc"].indexOf(item.sortDir) > -1) {
              need_sort = true;
              that.sort.colIndex = i3;
              that.sort.dir = item.sortDir;
            }
          });
        if (need_sort) {
          columns = element2.find("thead th");
          this._resetSortClass(columns);
          $3(columns.get(this.sort.colIndex + that.service.length)).addClass("sort-" + this.sort.dir);
          this.sorting();
        }
        var filter_func;
        if (Utils.isValue(o2.filters) && typeof o2.filters === "string") {
          $3.each(o2.filters.toArray(), function() {
            filter_func = Utils.isFunc(this);
            if (filter_func !== false) {
              that.filtersIndexes.push(that.addFilter(filter_func));
            }
          });
        }
        this.currentPage = 1;
        this._draw();
      },
      _resetSortClass: function(el) {
        $3(el).removeClass("sort-asc sort-desc");
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var component = element2.closest(".table-component");
        var table_container = component.find(".table-container");
        var search = component.find(".table-search-block input");
        var skip_button = o2.skipWrapper ? $3(o2.skipWrapper).find(".table-skip-button") : component.find(".table-skip-button");
        var skip_input = o2.skipWrapper ? $3(o2.skipWrapper).find(".table-skip-input") : component.find(".table-skip-input");
        var customSearch;
        var id = element2.attr("id");
        var inspectorButton = component.find(".inspector-button");
        inspectorButton.on(Metro2.events.click, function() {
          that.toggleInspector();
        });
        skip_button.on(Metro2.events.click, function() {
          var skipTo = parseInt(skip_input.val().trim());
          if (isNaN(skipTo) || skipTo <= 0 || skipTo > that.pagesCount) {
            skip_input.val("");
            return false;
          }
          skip_input.val("");
          that._fireEvent("skip", {
            skipTo,
            skipFrom: that.currentPage
          });
          that.page(skipTo);
        });
        $3(globalThis).on(
          Metro2.events.resize,
          function() {
            if (o2.horizontalScroll === true) {
              if (!Utils.isNull(o2.horizontalScrollStop) && Utils.mediaExist(o2.horizontalScrollStop)) {
                table_container.removeClass("horizontal-scroll");
              } else {
                table_container.addClass("horizontal-scroll");
              }
            }
          },
          { ns: this.id }
        );
        element2.on(Metro2.events.click, ".sortable-column", function() {
          if (o2.muteTable === true) element2.addClass("disabled");
          if (that.busy) {
            return false;
          }
          that.busy = true;
          var col2 = $3(this);
          that.activity.show(function() {
            setImmediate(function() {
              that.currentPage = 1;
              that.sort.colIndex = col2.data("index");
              if (!col2.hasClass("sort-asc") && !col2.hasClass("sort-desc")) {
                that.sort.dir = o2.sortDir;
              } else {
                if (col2.hasClass("sort-asc")) {
                  that.sort.dir = "desc";
                } else {
                  that.sort.dir = "asc";
                }
              }
              that._resetSortClass(element2.find(".sortable-column"));
              col2.addClass("sort-" + that.sort.dir);
              that.sorting();
              that._draw(function() {
                that.busy = false;
                if (o2.muteTable === true) element2.removeClass("disabled");
              });
            });
          });
        });
        element2.on(Metro2.events.click, ".table-service-check input", function() {
          var check = $3(this);
          var status = check.is(":checked");
          var val = "" + check.val();
          var store_key = o2.checkStoreKey.replace("$1", id);
          var storage = Metro2.storage;
          var data2 = storage.getItem(store_key);
          var is_radio = check.attr("type") === "radio";
          if (is_radio) {
            data2 = [];
          }
          if (status) {
            if (!Utils.isValue(data2)) {
              data2 = [val];
            } else {
              if (Array(data2).indexOf(val) === -1) {
                data2.push(val);
              }
            }
          } else {
            if (Utils.isValue(data2)) {
              Utils.arrayDelete(data2, val);
            } else {
              data2 = [];
            }
          }
          storage.setItem(store_key, data2);
          that._fireEvent("check-click", {
            check: this,
            status,
            data: data2
          });
        });
        element2.on(Metro2.events.click, ".table-service-check-all input", function() {
          var checked = $3(this).is(":checked");
          var store_key = o2.checkStoreKey.replace("$1", id);
          var storage = Metro2.storage;
          var data2 = [];
          var stored_keys;
          if (o2.useCurrentSlice === true) {
            stored_keys = storage.getItem(store_key, []);
            if (checked) {
              $3.each(that.currentSlice, function() {
                if (stored_keys.indexOf("" + this[o2.checkColIndex]) === -1) {
                  stored_keys.push("" + this[o2.checkColIndex]);
                }
              });
            } else {
              $3.each(that.currentSlice, function() {
                var key = "" + this[o2.checkColIndex];
                if (stored_keys.indexOf(key) !== -1) {
                  Metro2.utils.arrayDelete(stored_keys, key);
                }
              });
            }
            data2 = stored_keys;
          } else {
            if (checked) {
              $3.each(that.filteredItems, function() {
                if (data2.indexOf(this[o2.checkColIndex]) !== -1) return;
                data2.push("" + this[o2.checkColIndex]);
              });
            } else {
              data2 = [];
            }
          }
          storage.setItem(store_key, data2);
          that._draw();
          that._fireEvent("check-click-all", {
            check: this,
            status: checked,
            data: data2
          });
        });
        var _search = function() {
          that.searchString = this.value.trim().toLowerCase();
          that.currentPage = 1;
          that._draw();
        };
        _search = Hooks.useDebounce(_search, o2.searchThreshold);
        search.on(Metro2.events.inputchange, _search);
        if (Utils.isValue(this.wrapperSearch)) {
          customSearch = this.wrapperSearch.find("input");
          if (customSearch.length > 0) {
            customSearch.on(Metro2.events.inputchange, _search);
          }
        }
        function pageLinkClick(l2) {
          var link2 = $3(l2);
          var item = link2.parent();
          if (that.filteredItems.length === 0) {
            return;
          }
          if (item.hasClass("active")) {
            return;
          }
          if (item.hasClass("service")) {
            if (link2.data("page") === "prev") {
              that.currentPage--;
              if (that.currentPage === 0) {
                that.currentPage = 1;
              }
            } else {
              that.currentPage++;
              if (that.currentPage > that.pagesCount) {
                that.currentPage = that.pagesCount;
              }
            }
          } else {
            that.currentPage = link2.data("page");
          }
          that._draw();
        }
        component.on(Metro2.events.click, ".pagination .page-link", function() {
          pageLinkClick(this);
        });
        if (Utils.isValue(this.wrapperPagination)) {
          this.wrapperPagination.on(Metro2.events.click, ".pagination .page-link", function() {
            pageLinkClick(this);
          });
        }
        this._createInspectorEvents();
        element2.on(Metro2.events.click, ".js-table-crud-button", function() {
        });
      },
      _createInspectorEvents: function() {
        var that = this, inspector = this.inspector;
        this._removeInspectorEvents();
        inspector.on(Metro2.events.click, ".js-table-inspector-field-up", function() {
          var button2 = $3(this), tr3 = button2.closest("tr");
          var tr_prev = tr3.prev("tr");
          var index = tr3.data("index");
          var index_view;
          if (tr_prev.length === 0) {
            return;
          }
          tr3.insertBefore(tr_prev);
          tr3.addClass("flash");
          setTimeout(function() {
            tr3.removeClass("flash");
          }, 1e3);
          index_view = tr3.index();
          tr3.data("index-view", index_view);
          that.view[index]["index-view"] = index_view;
          $3.each(tr3.nextAll(), function() {
            var t = $3(this);
            index_view++;
            t.data("index-view", index_view);
            that.view[t.data("index")]["index-view"] = index_view;
          });
          that._createTableHeader();
          that._draw();
        });
        inspector.on(Metro2.events.click, ".js-table-inspector-field-down", function() {
          var button2 = $3(this), tr3 = button2.closest("tr");
          var tr_next = tr3.next("tr");
          var index = tr3.data("index");
          var index_view;
          if (tr_next.length === 0) {
            return;
          }
          tr3.insertAfter(tr_next);
          tr3.addClass("flash");
          setTimeout(function() {
            tr3.removeClass("flash");
          }, 1e3);
          index_view = tr3.index();
          tr3.data("index-view", index_view);
          that.view[index]["index-view"] = index_view;
          $3.each(tr3.prevAll(), function() {
            var t = $3(this);
            index_view--;
            t.data("index-view", index_view);
            that.view[t.data("index")]["index-view"] = index_view;
          });
          that._createTableHeader();
          that._draw();
        });
        inspector.on(Metro2.events.click, "input[type=checkbox]", function() {
          var check = $3(this);
          var status = check.is(":checked");
          var index = check.val();
          var op = ["cls", "clsColumn"];
          if (status) {
            $3.each(op, function() {
              var a2;
              a2 = Utils.isValue(that.heads[index][this]) ? that.heads[index][this].toArray(" ") : [];
              Utils.arrayDelete(a2, "hidden");
              that.heads[index][this] = a2.join(" ");
              that.view[index]["show"] = true;
            });
          } else {
            $3.each(op, function() {
              var a2;
              a2 = Utils.isValue(that.heads[index][this]) ? that.heads[index][this].toArray(" ") : [];
              if (a2.indexOf("hidden") === -1) {
                a2.push("hidden");
              }
              that.heads[index][this] = a2.join(" ");
              that.view[index]["show"] = false;
            });
          }
          that._createTableHeader();
          that._draw();
        });
        inspector.find("input[type=number]").on(Metro2.events.inputchange, function() {
          var input2 = $3(this);
          var index = input2.attr("data-index");
          var val = parseInt(input2.val());
          that.view[index]["size"] = val === 0 ? "" : val;
          that._createTableHeader();
        });
        inspector.on(Metro2.events.click, ".js-table-inspector-save", function() {
          that._saveTableView();
          that.openInspector(false);
        });
        inspector.on(Metro2.events.click, ".js-table-inspector-cancel", function() {
          that.openInspector(false);
        });
        inspector.on(Metro2.events.click, ".js-table-inspector-reset", function() {
          that.resetView();
        });
      },
      _removeInspectorEvents: function() {
        var inspector = this.inspector;
        inspector.off(Metro2.events.click, ".js-table-inspector-field-up");
        inspector.off(Metro2.events.click, ".js-table-inspector-field-down");
        inspector.off(Metro2.events.click, "input[type=checkbox]");
        inspector.off(Metro2.events.click, ".js-table-inspector-save");
        inspector.off(Metro2.events.click, ".js-table-inspector-cancel");
        inspector.off(Metro2.events.click, ".js-table-inspector-reset");
        inspector.off(Metro2.events.inputchange, "input[type=number]");
      },
      _saveTableView: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var view = this.view;
        var id = element2.attr("id");
        var viewPath = o2.viewSavePath.replace("$1", id);
        var storage = Metro2.storage;
        if (o2.viewSaveMode.toLowerCase() === "client") {
          storage.setItem(viewPath, view);
          this._fireEvent("view-save", {
            target: "client",
            path: o2.viewSavePath,
            view
          });
        } else {
          var post_data = {
            id: element2.attr("id"),
            view
          };
          fetch(viewPath, {
            method: "POST",
            body: JSON.stringify(post_data),
            header: {
              "Content-type": "application/json;charset=utf-8"
            }
          }).then(Metro2.fetch.status).then(Metro2.fetch.text).then(function(data2) {
            that._fireEvent("view-save", {
              target: "server",
              path: o2.viewSavePath,
              view,
              post_data,
              response: data2
            });
          }).catch(function(error) {
            that._fireEvent("data-save-error", {
              source: o2.viewSavePath,
              error,
              post_data
            });
          });
        }
      },
      _info: function(start, stop, length) {
        var element2 = this.element, o2 = this.options, strings = this.strings;
        var component = element2.closest(".table-component");
        var info6 = Utils.isValue(this.wrapperInfo) ? this.wrapperInfo : component.find(".table-info");
        var text;
        if (info6.length === 0) {
          return;
        }
        if (stop > length) {
          stop = length;
        }
        if (this.items.length === 0) {
          start = stop = length = 0;
        }
        text = o2.tableInfoTitle || strings.table_info;
        text = text.replace("$1", start);
        text = text.replace("$2", stop);
        text = text.replace("$3", length);
        info6.html(text);
      },
      _paging: function(length) {
        var element2 = this.element, o2 = this.options, strings = this.strings;
        var component = element2.closest(".table-component");
        this.pagesCount = Math.ceil(length / o2.rows);
        Metro2.pagination({
          length,
          rows: o2.rows,
          current: this.currentPage,
          target: Utils.isValue(this.wrapperPagination) ? this.wrapperPagination : component.find(".table-pagination"),
          claPagination: o2.clsPagination,
          prevTitle: o2.paginationPrevTitle || strings.label_prev,
          nextTitle: o2.paginationNextTitle || strings.label_next,
          distance: o2.paginationDistance,
          islandSize: o2.paginationIslandSize,
          shortTrack: o2.paginationShortTrack
        });
      },
      _filter: function() {
        var that = this, o2 = this.options;
        var items;
        if (Utils.isValue(this.searchString) && that.searchString.length >= o2.searchMinLength || this.filters.length > 0) {
          items = this.items.filter(function(row) {
            var row_data = "", result, search_result, i3, j2 = 0;
            if (that.filters.length > 0) {
              result = o2.filtersOperator.toLowerCase() === "and";
              for (i3 = 0; i3 < that.filters.length; i3++) {
                if (Utils.isNull(that.filters[i3])) continue;
                j2++;
                result = o2.filtersOperator.toLowerCase() === "and" ? result && Utils.exec(that.filters[i3], [row, that.heads]) : result || Utils.exec(that.filters[i3], [row, that.heads]);
              }
              if (j2 === 0) result = true;
            } else {
              result = true;
            }
            if (that.searchFields.length > 0) {
              $3.each(that.heads, function(i4, v2) {
                if (that.searchFields.indexOf(v2.name) > -1) {
                  row_data += "\u2022" + row[i4];
                }
              });
            } else {
              row_data = row.join("\u2022");
            }
            row_data = row_data.replace(/[\n\r]+|[\s]{2,}/g, " ").trim().toLowerCase();
            search_result = Utils.isValue(that.searchString) && that.searchString.length >= o2.searchMinLength ? ~row_data.indexOf(that.searchString) : true;
            result = result && search_result;
            if (result) {
              that._fireEvent("filter-row-accepted", {
                row
              });
            } else {
              that._fireEvent("filter-row-declined", {
                row
              });
            }
            return result;
          });
        } else {
          items = this.items;
        }
        this._fireEvent("search", {
          search: that.searchString,
          items
        });
        this.filteredItems = items;
        return items;
      },
      _draw: function(cb) {
        var that = this, element2 = this.element, o2 = this.options, strings = this.strings;
        var body2 = element2.find("tbody");
        var i3, j2, tr3, td2, check, cells, tds, is_even_row;
        var start = parseInt(o2.rows) === -1 ? 0 : o2.rows * (this.currentPage - 1), stop = parseInt(o2.rows) === -1 ? this.items.length - 1 : start + o2.rows - 1;
        var items, checkedItems = [];
        var stored_keys = Metro2.storage.getItem(o2.checkStoreKey.replace("$1", element2.attr("id")));
        var view = o2.staticView ? this.viewDefault : this.view;
        body2.html("");
        if (!this.heads.length) {
          console.warn("Heads is not defined for table ID " + element2.attr("id"));
          return;
        }
        items = this._filter();
        this.currentSlice = items.slice(start, stop + 1);
        checkedItems = [];
        if (items.length > 0) {
          for (i3 = start; i3 <= stop; i3++) {
            cells = items[i3];
            tds = [];
            if (!Utils.isValue(cells)) {
              continue;
            }
            tr3 = $3("<tr>").addClass(o2.clsBodyRow);
            tr3.data("original", cells);
            is_even_row = i3 % 2 === 0;
            td2 = $3("<td>").attr("data-label", "#").attr("aria-label", "#").html(i3 + 1);
            if (that.service[0].clsColumn !== void 0) {
              td2.addClass(that.service[0].clsColumn);
            }
            td2.appendTo(tr3);
            td2 = $3("<td>").attr("data-label", "CHK").attr("aria-label", "CHK");
            if (o2.checkType === "checkbox") {
              check = $3(
                "<input type='checkbox' data-style='" + o2.checkStyle + "' data-role='checkbox' name='" + (Utils.isValue(o2.checkName) ? o2.checkName : "table_row_check") + "[]' value='" + items[i3][o2.checkColIndex] + "'>"
              );
            } else {
              check = $3(
                "<input type='radio' data-style='" + o2.checkStyle + "' data-role='radio' name='" + (Utils.isValue(o2.checkName) ? o2.checkName : "table_row_check") + "' value='" + items[i3][o2.checkColIndex] + "'>"
              );
            }
            if (Utils.isValue(stored_keys) && Array.isArray(stored_keys) && stored_keys.indexOf("" + items[i3][o2.checkColIndex]) > -1) {
              check.prop("checked", true);
              checkedItems.push(cells);
            }
            check.addClass("table-service-check");
            this._fireEvent("check-draw", {
              check
            });
            check.appendTo(td2);
            if (that.service[1].clsColumn !== void 0) {
              td2.addClass(that.service[1].clsColumn);
            }
            td2.appendTo(tr3);
            for (j2 = 0; j2 < cells.length; j2++) {
              tds[j2] = null;
            }
            $3.each(cells, function(cell_index) {
              var val = this;
              var td3 = $3("<td>").attr("data-label", that.heads[cell_index].title).attr("aria-label", that.heads[cell_index].title);
              if (Utils.isValue(that.heads[cell_index].template)) {
                val = that.heads[cell_index].template.replace(/%VAL%/g, val);
              }
              td3.html(val);
              td3.addClass(o2.clsBodyCell);
              if (Utils.isValue(that.heads[cell_index].clsColumn)) {
                td3.addClass(that.heads[cell_index].clsColumn);
              }
              if (Utils.bool(view[cell_index].show) === false) {
                td3.addClass("hidden");
              }
              if (Utils.bool(view[cell_index].show)) {
                td3.removeClass("hidden");
              }
              td3.data("original", this);
              tds[view[cell_index]["index-view"]] = td3;
              that._fireEvent("draw-cell", {
                td: td3,
                val,
                cellIndex: cell_index,
                head: that.heads[cell_index],
                items: cells
              });
              if (o2.cellWrapper === true) {
                val = $3("<div>").addClass("data-wrapper").addClass(o2.clsCellWrapper).html(td3.html());
                td3.html("").append(val);
              }
            });
            for (j2 = 0; j2 < cells.length; j2++) {
              tds[j2].appendTo(tr3);
              that._fireEvent("append-cell", {
                td: tds[j2],
                tr: tr3,
                index: j2
              });
            }
            that._fireEvent("draw-row", {
              tr: tr3,
              view: that.view,
              heads: that.heads,
              items: cells
            });
            tr3.addClass(o2.clsRow).addClass(is_even_row ? o2.clsEvenRow : o2.clsOddRow).appendTo(body2);
            that._fireEvent("append-row", {
              tr: tr3
            });
          }
          $3(this.component).find(".table-service-check-all input").prop("checked", checkedItems.length);
        } else {
          j2 = 0;
          $3.each(view, function() {
            if (this.show) j2++;
          });
          if (o2.check === true) {
            j2++;
          }
          if (o2.rownum === true) {
            j2++;
          }
          tr3 = $3("<tr>").addClass(o2.clsBodyRow).appendTo(body2);
          td2 = $3("<td>").attr("colspan", j2).addClass("text-center").html(
            $3("<span>").addClass(o2.clsEmptyTableTitle).html(o2.emptyTableTitle || strings.label_empty)
          );
          td2.appendTo(tr3);
        }
        this._info(start + 1, stop + 1, items.length);
        this._paging(items.length);
        if (this.activity) this.activity.hide();
        this._fireEvent("draw");
        if (cb !== void 0) {
          Utils.exec(cb, null, element2[0]);
        }
      },
      _getItemContent: function(row) {
        var o2 = this.options, locale = this.locale;
        var result, col2 = row[this.sort.colIndex];
        var format = this.heads[this.sort.colIndex].format;
        var formatMask = !Utils.isNull(this.heads) && !Utils.isNull(this.heads[this.sort.colIndex]) && Utils.isValue(this.heads[this.sort.colIndex]["formatMask"]) ? this.heads[this.sort.colIndex]["formatMask"] : "%Y-%m-%d";
        var thousandSeparator = this.heads && this.heads[this.sort.colIndex] && this.heads[this.sort.colIndex]["thousandSeparator"] ? this.heads[this.sort.colIndex]["thousandSeparator"] : o2.thousandSeparator;
        var decimalSeparator = this.heads && this.heads[this.sort.colIndex] && this.heads[this.sort.colIndex]["decimalSeparator"] ? this.heads[this.sort.colIndex]["decimalSeparator"] : o2.decimalSeparator;
        result = ("" + col2).toLowerCase().replace(/[\n\r]+|[\s]{2,}/g, " ").trim();
        if (Utils.isValue(result) && Utils.isValue(format)) {
          if (["number", "int", "float", "money"].indexOf(format) !== -1) {
            result = Utils.parseNumber(result, thousandSeparator, decimalSeparator);
          }
          switch (format) {
            case "date":
              result = formatMask ? Datetime.from(result, formatMask, locale) : datetime(result);
              break;
            case "number":
              result = +result;
              break;
            case "int":
              result = parseInt(result);
              break;
            case "float":
              result = parseFloat(result);
              break;
            case "money":
              result = Utils.parseMoney(result);
              break;
            case "card":
              result = Utils.parseCard(result);
              break;
            case "phone":
              result = Utils.parsePhone(result);
              break;
          }
        }
        return result;
      },
      addItem: function(item, redraw) {
        if (!Array.isArray(item)) {
          console.warn("Item is not an array and can't be added");
          return this;
        }
        this.items.push(item);
        if (redraw !== false) this.draw();
      },
      addItems: function(items, redraw) {
        if (!Array.isArray(items)) {
          console.warn("Items is not an array and can't be added");
          return this;
        }
        items.forEach(function(item) {
          if (Array.isArray(item)) this.items.push(item, false);
        });
        this.draw();
        if (redraw !== false) this.draw();
      },
      updateItem: function(key, field, value) {
        var item = this.items[this.index[key]];
        var fieldIndex = null;
        if (Utils.isNull(item)) {
          console.warn("Item is undefined for update");
          return this;
        }
        if (isNaN(field)) {
          this.heads.forEach(function(v2, i3) {
            if (v2["name"] === field) {
              fieldIndex = i3;
            }
          });
        }
        if (Utils.isNull(fieldIndex)) {
          console.warn("Item is undefined for update. Field " + field + " not found in data structure");
          return this;
        }
        item[fieldIndex] = value;
        this.items[this.index[key]] = item;
        return this;
      },
      getItem: function(key) {
        return this.items[this.index[key]];
      },
      deleteItem: function(fieldIndex, value) {
        var i3, deleteIndexes = [];
        var is_func = Utils.isFunc(value);
        for (i3 = 0; i3 < this.items.length; i3++) {
          if (is_func) {
            if (Utils.exec(value, [this.items[i3][fieldIndex]])) {
              deleteIndexes.push(i3);
            }
          } else {
            if (this.items[i3][fieldIndex] === value) {
              deleteIndexes.push(i3);
            }
          }
        }
        this.items = Utils.arrayDeleteByMultipleKeys(this.items, deleteIndexes);
        return this;
      },
      deleteItemByName: function(fieldName, value) {
        var i3, fieldIndex, deleteIndexes = [];
        var is_func = Utils.isFunc(value);
        for (i3 = 0; i3 < this.heads.length; i3++) {
          if (this.heads[i3]["name"] === fieldName) {
            fieldIndex = i3;
            break;
          }
        }
        for (i3 = 0; i3 < this.items.length; i3++) {
          if (is_func) {
            if (Utils.exec(value, [this.items[i3][fieldIndex]])) {
              deleteIndexes.push(i3);
            }
          } else {
            if (this.items[i3][fieldIndex] === value) {
              deleteIndexes.push(i3);
            }
          }
        }
        this.items = Utils.arrayDeleteByMultipleKeys(this.items, deleteIndexes);
        return this;
      },
      draw: function() {
        this._draw();
        return this;
      },
      sorting: function(dir) {
        var that = this;
        if (Utils.isValue(dir)) {
          this.sort.dir = dir;
        }
        this._fireEvent("sort-start", {
          items: this.items
        });
        this.items.sort(function(a2, b2) {
          var c1 = that._getItemContent(a2);
          var c2 = that._getItemContent(b2);
          var result = 0;
          if (c1 < c2) {
            result = that.sort.dir === "asc" ? -1 : 1;
          }
          if (c1 > c2) {
            result = that.sort.dir === "asc" ? 1 : -1;
          }
          if (result !== 0) {
            that._fireEvent("sort-item-switch", {
              a: a2,
              b: b2,
              result
            });
          }
          return result;
        });
        this._fireEvent("sort-stop", {
          items: this.items
        });
        return this;
      },
      search: function(val) {
        this.searchString = val.trim().toLowerCase();
        this.currentPage = 1;
        this._draw();
        return this;
      },
      _rebuild: function(review) {
        var that = this, element2 = this.element;
        var need_sort = false, sortable_columns;
        this._createIndex();
        if (review === true) {
          this.view = this._createView();
        }
        this._createTableHeader();
        this._createTableBody();
        this._createTableFooter();
        if (this.heads.length > 0)
          $3.each(this.heads, function(i3) {
            var item = this;
            if (!need_sort && ["asc", "desc"].indexOf(item.sortDir) > -1) {
              need_sort = true;
              that.sort.colIndex = i3;
              that.sort.dir = item.sortDir;
            }
          });
        if (need_sort) {
          sortable_columns = element2.find(".sortable-column");
          this._resetSortClass(sortable_columns);
          $3(sortable_columns.get(that.sort.colIndex)).addClass("sort-" + that.sort.dir);
          this.sorting();
        }
        that.currentPage = 1;
        that._draw();
      },
      setHeads: function(data2) {
        this.heads = data2;
        return this;
      },
      setHeadItem: function(name2, data2) {
        var i3, index;
        for (i3 = 0; i3 < this.heads.length; i3++) {
          if (this.heads[i3].name === name2) {
            index = i3;
            break;
          }
        }
        this.heads[index] = data2;
        return this;
      },
      setItems: function(data2) {
        this.items = data2;
        return this;
      },
      setData: function(data2) {
        var that = this, o2 = this.options;
        this.activity.show(function() {
          that.items = [];
          that.heads = [];
          that.foots = [];
          if (Array.isArray(o2.head)) {
            that.heads = o2.head;
          }
          if (Array.isArray(o2.body)) {
            that.items = o2.body;
          }
          that._createItemsFromJSON(data2);
          that._rebuild(true);
          that.activity.hide();
        });
        return this;
      },
      loadData: function(source2, review) {
        var that = this, element2 = this.element, o2 = this.options;
        if (!Utils.isValue(review)) {
          review = true;
        }
        element2.html("");
        if (!Utils.isValue(source2)) {
          this._rebuild(review);
        } else {
          o2.source = source2;
          this._fireEvent("data-load", {
            source: o2.source
          });
          that.activity.show(function() {
            fetch(o2.source).then(Metro2.fetch.status).then(Metro2.fetch.json).then(function(data2) {
              that.activity.hide();
              that.items = [];
              that.heads = [];
              that.foots = [];
              that._fireEvent("data-loaded", {
                source: o2.source,
                data: data2
              });
              if (Array.isArray(o2.head)) {
                that.heads = o2.head;
              }
              if (Array.isArray(o2.body)) {
                that.items = o2.body;
              }
              that._createItemsFromJSON(data2);
              that._rebuild(review);
              that._resetInspector();
              that._fireEvent("data-load-end", {
                source: o2.source,
                data: data2
              });
            }).catch(function(error) {
              that.activity.hide();
              that._fireEvent("data-load-error", {
                source: o2.source,
                error
              });
            });
          });
        }
      },
      reload: function(review) {
        this.loadData(this.options.source, review);
      },
      clear: function() {
        this.items = [];
        return this.draw();
      },
      next: function() {
        if (this.items.length === 0) return;
        this.currentPage++;
        if (this.currentPage > this.pagesCount) {
          this.currentPage = this.pagesCount;
          return;
        }
        this._draw();
        return this;
      },
      prev: function() {
        if (this.items.length === 0) return;
        this.currentPage--;
        if (this.currentPage === 0) {
          this.currentPage = 1;
          return;
        }
        this._draw();
        return this;
      },
      first: function() {
        if (this.items.length === 0) return;
        this.currentPage = 1;
        this._draw();
        return this;
      },
      last: function() {
        if (this.items.length === 0) return;
        this.currentPage = this.pagesCount;
        this._draw();
        return this;
      },
      page: function(num) {
        if (num <= 0) {
          num = 1;
        }
        if (num > this.pagesCount) {
          num = this.pagesCount;
        }
        this.currentPage = num;
        this._draw();
        return this;
      },
      addFilter: function(f3, redraw) {
        var filterIndex = null, i3, func = Utils.isFunc(f3);
        if (func === false) {
          return;
        }
        for (i3 = 0; i3 < this.filters.length; i3++) {
          if (Utils.isNull(this.filters[i3])) {
            filterIndex = i3;
            this.filters[i3] = func;
            break;
          }
        }
        if (Utils.isNull(filterIndex)) {
          this.filters.push(func);
          filterIndex = this.filters.length - 1;
        }
        if (redraw === true) {
          this.currentPage = 1;
          this.draw();
        }
        return filterIndex;
      },
      removeFilter: function(key, redraw) {
        this.filters[key] = null;
        if (redraw === true) {
          this.currentPage = 1;
          this.draw();
        }
        return this;
      },
      removeFilters: function(redraw) {
        this.filters = [];
        if (redraw === true) {
          this.currentPage = 1;
          this.draw();
        }
        return this;
      },
      getItems: function() {
        return this.items;
      },
      getHeads: function() {
        return this.heads;
      },
      getView: function() {
        return this.view;
      },
      getFilteredItems: function() {
        return this.filteredItems.length > 0 ? this.filteredItems : this.items;
      },
      getSelectedItems: function() {
        var element2 = this.element, o2 = this.options;
        var stored_keys = Metro2.storage.getItem(o2.checkStoreKey.replace("$1", element2.attr("id")));
        var selected = [];
        if (!Utils.isValue(stored_keys)) {
          return [];
        }
        $3.each(this.items, function() {
          if (stored_keys.indexOf("" + this[o2.checkColIndex]) !== -1) {
            selected.push(this);
          }
        });
        return selected;
      },
      getStoredKeys: function() {
        var element2 = this.element, o2 = this.options;
        return Metro2.storage.getItem(o2.checkStoreKey.replace("$1", element2.attr("id")), []);
      },
      clearSelected: function(redraw) {
        var element2 = this.element, o2 = this.options;
        Metro2.storage.setItem(o2.checkStoreKey.replace("$1", element2.attr("id")), []);
        element2.find("table-service-check-all input").prop("checked", false);
        if (redraw === true) this._draw();
      },
      getFilters: function() {
        return this.filters;
      },
      getFiltersIndexes: function() {
        return this.filtersIndexes;
      },
      openInspector: function(mode) {
        var ins2 = this.inspector;
        if (mode) {
          ins2.show(0, function() {
            ins2.css({
              top: ($3(globalThis).height() - ins2.outerHeight(true)) / 2 + pageYOffset,
              left: ($3(globalThis).width() - ins2.outerWidth(true)) / 2 + pageXOffset
            }).data("open", true);
          });
        } else {
          ins2.hide().data("open", false);
        }
      },
      closeInspector: function() {
        this.openInspector(false);
      },
      toggleInspector: function() {
        this.openInspector(!this.inspector.data("open"));
      },
      resetView: function() {
        this.view = this._createView();
        this._createTableHeader();
        this._createTableFooter();
        this._draw();
        this._resetInspector();
        this._saveTableView();
      },
      rebuildIndex: function() {
        this._createIndex();
      },
      getIndex: function() {
        return this.index;
      },
      export: function(to, mode, filename, options) {
        var Export = Metro2.export;
        var that = this, o2 = this.options;
        var table2 = document.createElement("table");
        var head2 = $3("<thead>").appendTo(table2);
        var body2 = $3("<tbody>").appendTo(table2);
        var i3, j2, cells, tds = [], items, tr3, td2;
        var start, stop;
        if (typeof Export.tableToCSV !== "function") {
          return;
        }
        mode = Utils.isValue(mode) ? mode.toLowerCase() : "all-filtered";
        filename = Utils.isValue(filename) ? filename : Utils.elementId("table") + "-export.csv";
        tr3 = $3("<tr>");
        cells = this.heads;
        for (j2 = 0; j2 < cells.length; j2++) {
          tds[j2] = null;
        }
        $3.each(cells, function(cell_index) {
          var item = this;
          if (Utils.bool(that.view[cell_index]["show"]) === false) {
            return;
          }
          td2 = $3("<th>");
          if (Utils.isValue(item.title)) {
            td2.html(item.title);
          }
          tds[that.view[cell_index]["index-view"]] = td2;
        });
        for (j2 = 0; j2 < cells.length; j2++) {
          if (Utils.isValue(tds[j2])) tds[j2].appendTo(tr3);
        }
        tr3.appendTo(head2);
        if (mode === "checked") {
          items = this.getSelectedItems();
          start = 0;
          stop = items.length - 1;
        } else if (mode === "view") {
          items = this._filter();
          start = parseInt(o2.rows) === -1 ? 0 : o2.rows * (this.currentPage - 1);
          stop = parseInt(o2.rows) === -1 ? items.length - 1 : start + o2.rows - 1;
        } else if (mode === "all") {
          items = this.items;
          start = 0;
          stop = items.length - 1;
        } else {
          items = this._filter();
          start = 0;
          stop = items.length - 1;
        }
        for (i3 = start; i3 <= stop; i3++) {
          if (Utils.isValue(items[i3])) {
            tr3 = $3("<tr>");
            cells = items[i3];
            for (j2 = 0; j2 < cells.length; j2++) {
              tds[j2] = null;
            }
            $3.each(cells, function(cell_index) {
              if (Utils.bool(that.view[cell_index].show) === false) {
                return;
              }
              td2 = $3("<td>").html(this);
              tds[that.view[cell_index]["index-view"]] = td2;
            });
            for (j2 = 0; j2 < cells.length; j2++) {
              if (Utils.isValue(tds[j2])) tds[j2].appendTo(tr3);
            }
            tr3.appendTo(body2);
          }
        }
        Export.tableToCSV(table2, filename, options);
        table2.remove();
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        function dataCheck() {
          o2.check = Utils.bool(element2.attr("data-check"));
          that._service();
          that._createTableHeader();
          that._draw();
        }
        function dataRownum() {
          o2.rownum = Utils.bool(element2.attr("data-rownum"));
          that._service();
          that._createTableHeader();
          that._draw();
        }
        switch (attributeName) {
          case "data-check":
            dataCheck();
            break;
          case "data-rownum":
            dataRownum();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var component = element2.closest(".table-component");
        var search_input = component.find("input");
        var rows_select = component.find("select");
        search_input.data("input").destroy();
        rows_select.data("select").destroy();
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        element2.off(Metro2.events.click, ".sortable-column");
        element2.off(Metro2.events.click, ".table-service-check input");
        element2.off(Metro2.events.click, ".table-service-check-all input");
        search_input.off(Metro2.events.inputchange);
        if (Utils.isValue(this.wrapperSearch)) {
          var customSearch = this.wrapperSearch.find("input");
          if (customSearch.length > 0) {
            customSearch.off(Metro2.events.inputchange);
          }
        }
        component.off(Metro2.events.click, ".pagination .page-link");
        if (Utils.isValue(this.wrapperPagination)) {
          this.wrapperPagination.off(Metro2.events.click, ".pagination .page-link");
        }
        element2.off(Metro2.events.click, ".js-table-crud-button");
        this._removeInspectorEvents();
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/tabs/tabs.js
  (function(Metro2, $3) {
    "use strict";
    let TabsDefaultConfig = {
      tabsDeferred: 0,
      expand: false,
      expandPoint: null,
      type: "default",
      // default, text, group, pills
      updateUri: false,
      position: "top",
      // top, bottom, left, right
      align: "left",
      // left, center, right
      // linked: false,
      clsTabs: "",
      clsTabsList: "",
      clsTabsListItem: "",
      clsTabsListItemActive: "",
      onTab: Metro2.noop,
      onTabOpen: Metro2.noop,
      onTabClose: Metro2.noop,
      onBeforeTab: Metro2.noop_true,
      onTabsCreate: Metro2.noop
    };
    Metro2.tabsSetup = function(options) {
      TabsDefaultConfig = $3.extend({}, TabsDefaultConfig, options);
    };
    if (typeof globalThis["metroTabsSetup"] !== void 0) {
      Metro2.tabsSetup(globalThis["metroTabsSetup"]);
    }
    Metro2.Component("tabs", {
      init: function(options, elem) {
        this._super(elem, options, TabsDefaultConfig, {
          _targets: [],
          id: Metro2.utils.elementId("tabs")
        });
        return this;
      },
      _create: function() {
        const element2 = this.element;
        const tab = element2.find(".active").length > 0 ? $3(element2.find(".active")[0]) : void 0;
        this._createStructure();
        this._createEvents();
        this._open(tab);
        this._fireEvent("tabs-create", {
          element: element2
        });
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        const container = element2.wrap("<div>").addClass("tabs");
        let expandTitle, hamburger;
        container.addClass(`tabs-${o2.position}`);
        element2.addClass("tabs-list");
        element2.addClass("tabs-" + o2.type);
        element2.addClass("align-" + o2.align);
        element2.data("expanded", false);
        expandTitle = $3("<div>").addClass("expand-title");
        container.prepend(expandTitle);
        hamburger = container.find(".hamburger");
        if (hamburger.length === 0) {
          hamburger = $3("<button>").attr("type", "button").addClass("hamburger menu-down").appendTo(container);
          for (let i3 = 0; i3 < 3; i3++) {
            $3("<span>").addClass("line").appendTo(hamburger);
          }
        }
        container.addClass(o2.clsTabs);
        element2.addClass(o2.clsTabsList);
        element2.children("li").addClass(o2.clsTabsListItem);
        if (o2.expand === true) {
          if (!["left", "right"].includes(o2.position)) {
            container.addClass("tabs-expand");
          }
        } else {
          if (Metro2.utils.isValue(o2.expandPoint) && Metro2.utils.mediaExist(o2.expandPoint) && !["left", "right"].includes(o2.position)) {
            container.addClass("tabs-expand");
          }
        }
        if (["left", "right"].includes(o2.position)) {
          container.addClass("tabs-expand");
        }
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const container = element2.parent();
        $3(globalThis).on(
          Metro2.events.resize,
          function() {
            if (["left", "right"].includes(o2.position)) {
              return;
            }
            if (o2.expand === true) {
              if (!["left", "right"].includes(o2.position)) {
                container.addClass("tabs-expand");
              }
            } else {
              if (Metro2.utils.isValue(o2.expandPoint) && Metro2.utils.mediaExist(o2.expandPoint) && !["left", "right"].includes(o2.position)) {
                if (!container.hasClass("tabs-expand")) container.addClass("tabs-expand");
              } else {
                if (container.hasClass("tabs-expand")) container.removeClass("tabs-expand");
              }
            }
          },
          { ns: this.id }
        );
        container.on(Metro2.events.click, ".hamburger, .expand-title", function() {
          if (element2.data("expanded") === false) {
            element2.addClass("expand");
            element2.data("expanded", true);
            container.find(".hamburger").addClass("active");
          } else {
            element2.removeClass("expand");
            element2.data("expanded", false);
            container.find(".hamburger").removeClass("active");
          }
        });
        element2.on(Metro2.events.click, "a", function(e) {
          const link2 = $3(this);
          const href = link2.attr("href").trim();
          const tab = link2.parent("li");
          that._fireEvent("tab", {
            tab: tab[0],
            target: tab.children("a").attr("href")
          });
          if (tab.hasClass("active")) {
            e.preventDefault();
          }
          if (element2.data("expanded") === true) {
            element2.removeClass("expand");
            element2.data("expanded", false);
            container.find(".hamburger").removeClass("active");
          }
          if (Metro2.utils.exec(o2.onBeforeTab, [tab, element2], tab[0]) !== true) {
            return false;
          }
          if (Metro2.utils.isValue(href) && href[0] === "#") {
            that._open(tab);
            e.preventDefault();
          }
        });
        $3(globalThis).on("hashchange", function() {
          let hash, tab;
          if (o2.updateUri) {
            hash = globalThis.location.hash;
            tab = that._findTabByTarget(hash);
            that._open($3(tab));
          }
        });
      },
      _findTabByTarget: function(target) {
        const element2 = this.element;
        const tabs = element2.find("li");
        let tab = void 0;
        tabs.each(function(i3, el) {
          if (!tab && $3(el).children("a").attr("href") === target) {
            tab = el;
          }
        });
        return tab;
      },
      _collectTargets: function() {
        const that = this, element2 = this.element;
        const tabs = element2.find("li");
        this._targets = [];
        $3.each(tabs, function() {
          const tab = $3(this);
          if (tab.hasClass("divider")) return;
          const target = tab.find("a").attr("href").trim();
          if (target.length > 1 && target[0] === "#") {
            that._targets.push(target);
          }
        });
      },
      _open: function(tab) {
        const element2 = this.element, o2 = this.options;
        const tabs = element2.find("li");
        const expandTitle = element2.siblings(".expand-title");
        const activeTab = element2.find("li.active");
        if (tabs.length === 0) {
          return;
        }
        this._collectTargets();
        if (tab === void 0) {
          tab = $3(tabs[0]);
        }
        const target = tab.find("a").attr("href");
        if (target === void 0) {
          return;
        }
        tabs.removeClass("active").removeClass(o2.clsTabsListItemActive);
        if (tab.parent().hasClass("d-menu")) {
          tab.parent().parent().addClass("active");
        } else {
          tab.addClass("active");
        }
        $3.each(this._targets, function() {
          const t = $3(this);
          if (t.length > 0) t.hide();
        });
        if (target !== "#" && target[0] === "#") {
          if (o2.updateUri) {
            globalThis.location.hash = target;
          }
          $3(target).show();
        }
        expandTitle.html(tab.find("a").html());
        tab.addClass(o2.clsTabsListItemActive);
        if (!activeTab.is(tab)) {
          this._fireEvent("tab-open", {
            tab: tab[0],
            target: tab.children("a").attr("href")
          });
          this._fireEvent("tab-close", {
            tab: activeTab[0],
            target: activeTab.children("a").attr("href")
          });
        }
      },
      next: function() {
        const element2 = this.element;
        let next, active_tab = element2.find("li.active");
        next = active_tab.next("li");
        if (next.length > 0) {
          this._open(next);
        }
      },
      prev: function() {
        const element2 = this.element;
        let next, active_tab = element2.find("li.active");
        next = active_tab.prev("li");
        if (next.length > 0) {
          this._open(next);
        }
      },
      openByTarget: function(target) {
        const tab = this._findTabByTarget(target);
        if (tab) {
          this._open($3(tab));
        }
      },
      open: function(tab) {
        const element2 = this.element;
        const tabs = element2.find("li");
        if (!Metro2.utils.isValue(tab)) {
          tab = 1;
        }
        if (Metro2.utils.isInt(tab)) {
          if (Metro2.utils.isValue(tabs[tab - 1])) this._open($3(tabs[tab - 1]));
        } else {
          this._open($3(tab));
        }
      },
      changeAttribute: function() {
      },
      destroy: function() {
        const element2 = this.element;
        const container = element2.parent();
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        container.off(Metro2.events.click, ".hamburger, .expand-title");
        element2.off(Metro2.events.click, "a");
        element2.remove();
      }
    });
  })(Metro, Dom);

  // source/components/tabs-material/tabs-material.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var MaterialTabsDefaultConfig = {
      wheelStep: 20,
      materialtabsDeferred: 0,
      deep: false,
      fixedTabs: false,
      duration: 300,
      appBar: false,
      clsComponent: "",
      clsTabs: "",
      clsTab: "",
      clsTabActive: "",
      clsMarker: "",
      onBeforeTabOpen: Metro2.noop_true,
      onTabOpen: Metro2.noop,
      onTabsScroll: Metro2.noop,
      onTabsCreate: Metro2.noop
    };
    Metro2.materialTabsSetup = function(options) {
      MaterialTabsDefaultConfig = $3.extend({}, MaterialTabsDefaultConfig, options);
    };
    if (typeof globalThis["metroMaterialTabsSetup"] !== void 0) {
      Metro2.materialTabsSetup(globalThis["metroMaterialTabsSetup"]);
    }
    Metro2.Component("material-tabs", {
      init: function(options, elem) {
        this._super(elem, options, MaterialTabsDefaultConfig, {
          marker: null,
          scroll: 0,
          scrollDir: "left"
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("tabs-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        var tabs = element2.find("li"), active_tab = element2.find("li.active");
        var wrapper = $3("<div>").addClass("tabs-material-wrapper").addClass(o2.clsComponent).insertBefore(element2);
        if (o2.appBar === true) {
          wrapper.addClass("app-bar-present");
        }
        if (o2.appBar === "more") {
          wrapper.addClass("app-bar-present-more");
        }
        element2.appendTo(wrapper);
        element2.addClass("tabs-material").addClass(o2.clsTabs);
        tabs.addClass(o2.clsTab);
        if (o2.deep === true) {
          element2.addClass("deep");
        }
        if (o2.fixedTabs === true) {
          element2.addClass("fixed-tabs");
        }
        this.marker = element2.find(".tab-marker");
        if (this.marker.length === 0) {
          this.marker = $3("<span>").addClass("tab-marker").addClass(o2.clsMarker).appendTo(element2);
        }
        this.openTab(active_tab.length === 0 ? tabs[0] : active_tab[0]);
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.click, "li", function(e) {
          var tab = $3(this);
          var active_tab = element2.find("li.active");
          var tab_next = tab.index() > active_tab.index();
          var target = tab.children("a").attr("href");
          e.preventDefault();
          if (Utils.isValue(target) && target[0] === "#") {
            if (tab.hasClass("active")) return;
            if (tab.hasClass("disabled")) return;
            if (Utils.exec(o2.onBeforeTabOpen, [tab, target, tab_next], this) === false) return;
            that.openTab(tab, tab_next);
          }
        });
        element2.on(Metro2.events.scroll, function() {
          var oldScroll = that.scroll;
          that.scrollDir = that.scroll < element2[0].scrollLeft ? "left" : "right";
          that.scroll = element2[0].scrollLeft;
          that._fireEvent("tabs-scroll", {
            scrollLeft: element2[0].scrollLeft,
            oldScroll,
            scrollDir: that.scrollDir
          });
        });
        element2.on(Metro2.events.mousewheel, function(e) {
          if (e.deltaY === void 0) {
            return;
          }
          var scroll, scrollable = $3(this);
          var dir = e.deltaY > 0 ? -1 : 1;
          var step = o2.wheelStep;
          scroll = scrollable.scrollLeft() - dir * step;
          scrollable.scrollLeft(scroll);
        }, {
          passive: true
        });
      },
      openTab: function(tab, tab_next) {
        var element2 = this.element, o2 = this.options;
        var tabs = element2.find("li");
        var magic = 52, shift2, width, tab_width, target, tab_left, scroll, scrollLeft;
        tab = $3(tab);
        $3.each(tabs, function() {
          var target2 = $3(this).find("a").attr("href");
          if (!Utils.isValue(target2)) return;
          if (target2[0] === "#" && target2.length > 1) {
            $3(target2).hide();
          }
        });
        width = element2.width();
        scroll = element2.scrollLeft();
        tab_left = tab.position().left;
        tab_width = tab.width();
        shift2 = tab_left + tab_width;
        tabs.removeClass("active").removeClass(o2.clsTabActive);
        tab.addClass("active").addClass(o2.clsTabActive);
        if (shift2 + magic > width + scroll) {
          scrollLeft = scroll + magic * 2;
        } else if (tab_left < scroll) {
          scrollLeft = tab_left - magic * 2;
        } else {
          scrollLeft = scroll;
        }
        element2.animate({
          draw: {
            scrollLeft
          },
          dur: o2.duration
        });
        this.marker.animate({
          draw: {
            left: tab_left,
            width: tab_width
          },
          dur: o2.duration
        });
        target = tab.find("a").attr("href");
        if (Utils.isValue(target)) {
          if (target[0] === "#" && target.length > 1) {
            $3(target).show();
          }
        }
        this._fireEvent("tab-open", {
          tab: tab[0],
          target,
          tab_next
        });
      },
      open: function(tab_num) {
        var element2 = this.element;
        var tabs = element2.find("li");
        var active_tab = element2.find("li.active");
        var tab = tabs.eq(tab_num - 1);
        var tab_next = tabs.index(tab) > tabs.index(active_tab);
        this.openTab(tab, tab_next);
      },
      changeAttribute: function() {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, "li");
        element2.off(Metro2.events.scroll);
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/tag-input/tag-input.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var TagInputDefaultConfig = {
      autocomplete: null,
      autocompleteUnique: true,
      autocompleteUrl: null,
      autocompleteUrlMethod: "GET",
      autocompleteUrlKey: null,
      autocompleteDivider: ",",
      autocompleteListHeight: 200,
      label: "",
      size: "normal",
      taginputDeferred: 0,
      static: false,
      clearButton: true,
      clearButtonIcon: "\u274C",
      randomColor: false,
      maxTags: 0,
      tagSeparator: ",",
      tagTrigger: "Enter, Space, Comma",
      backspace: true,
      clsComponent: "",
      clsInput: "",
      clsClearButton: "",
      clsTag: "",
      clsTagTitle: "",
      clsTagAction: "",
      clsLabel: "",
      onBeforeTagAdd: Metro2.noop_true,
      onTagAdd: Metro2.noop,
      onBeforeTagRemove: Metro2.noop_true,
      onTagRemove: Metro2.noop,
      onTag: Metro2.noop,
      onClear: Metro2.noop,
      onTagTrigger: Metro2.noop,
      onTagInputCreate: Metro2.noop
    };
    Metro2.tagInputSetup = function(options) {
      TagInputDefaultConfig = $3.extend({}, TagInputDefaultConfig, options);
    };
    if (typeof globalThis["metroTagInputSetup"] !== void 0) {
      Metro2.tagInputSetup(globalThis["metroTagInputSetup"]);
    }
    Metro2.Component("tag-input", {
      init: function(options, elem) {
        this._super(elem, options, TagInputDefaultConfig, {
          values: [],
          triggers: [],
          autocomplete: []
        });
        return this;
      },
      _create: function() {
        this.triggers = ("" + this.options.tagTrigger).toArray(",");
        if (this.triggers.includes("Space") || this.triggers.includes("Spacebar")) {
          this.triggers.push(" ");
          this.triggers.push("Spacebar");
        }
        if (this.triggers.includes("Comma")) {
          this.triggers.push(",");
        }
        this._createStructure();
        this._createEvents();
        this._fireEvent("tag-input-create", {
          element: this.element
        });
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var container, input2, clearButton;
        var values = element2.val().trim();
        container = $3("<div>").addClass("tag-input " + element2[0].className).addClass(o2.clsComponent).insertBefore(element2);
        element2.appendTo(container);
        container.addClass("input-" + o2.size);
        element2[0].className = "";
        element2.addClass("original-input");
        input2 = $3("<input type='text'>").addClass("input-wrapper").addClass(o2.clsInput).attr("size", 1);
        input2.appendTo(container);
        if (o2.clearButton !== false && !element2[0].readOnly) {
          container.addClass("padding-for-clear");
          clearButton = $3("<button>").addClass("button input-clear-button").attr("tabindex", -1).attr("type", "button").html(o2.clearButtonIcon);
          clearButton.appendTo(container);
        }
        if (Utils.isValue(values)) {
          $3.each(values.toArray(o2.tagSeparator), function() {
            that._addTag(this);
          });
        }
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(container);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        if (o2.static === true || element2.attr("readonly") !== void 0) {
          container.addClass("static-mode");
        }
        if (!Utils.isNull(o2.autocomplete) || !Utils.isNull(o2.autocompleteUrl)) {
          $3("<div>").addClass("autocomplete-list").css({
            maxHeight: o2.autocompleteListHeight,
            display: "none"
          }).appendTo(container);
        }
        if (Utils.isValue(o2.autocomplete)) {
          var autocomplete_obj = Utils.isObject(o2.autocomplete);
          if (autocomplete_obj !== false) {
            this.autocomplete = autocomplete_obj;
          } else {
            this.autocomplete = o2.autocomplete.toArray(
              o2.autocompleteDivider
            );
          }
        }
        if (Utils.isValue(o2.autocompleteUrl)) {
          fetch(o2.autocompleteUrl, {
            method: o2.autocompleteUrlMethod
          }).then(function(response) {
            return response.text();
          }).then(function(data2) {
            var newData = [];
            try {
              newData = JSON.parse(data2);
              if (o2.autocompleteUrlKey) {
                newData = newData[o2.autocompleteUrlKey];
              }
            } catch (e) {
              newData = data2.split("\n");
            }
            that.autocomplete = that.autocomplete.concat(newData);
          });
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var container = element2.closest(".tag-input");
        var input2 = container.find(".input-wrapper");
        var autocompleteList = container.find(".autocomplete-list");
        input2.on(Metro2.events.focus, function() {
          container.addClass("focused");
        });
        input2.on(Metro2.events.blur, function() {
          container.removeClass("focused");
        });
        input2.on(Metro2.events.inputchange, function() {
          input2.attr("size", Math.ceil(input2.val().length / 2) + 2);
        });
        input2.on(Metro2.events.keydown, function(e) {
          var val = input2.val().trim();
          var key = e.key;
          if (key === "Enter") e.preventDefault();
          if (o2.backspace === true && key === "Backspace" && val.length === 0) {
            if (that.values.length > 0) {
              that.values.splice(-1, 1);
              element2.siblings(".tag").last().remove();
              element2.val(that.values.join(o2.tagSeparator));
            }
            return;
          }
          if (val === "") {
            return;
          }
          if (!that.triggers.includes(key)) {
            return;
          }
          that._fireEvent("tag-trigger", {
            key
          });
          input2.val("");
          that._addTag(val);
          input2.attr("size", 1);
        });
        input2.on(Metro2.events.keyup, function(e) {
          var val = input2.val();
          var key = e.key;
          if (that.triggers.includes(key) && val[val.length - 1] === key) {
            input2.val(val.slice(0, -1));
          }
        });
        container.on(Metro2.events.click, ".tag .action", function() {
          var tag = $3(this).closest(".tag");
          that._delTag(tag);
        });
        container.on(Metro2.events.click, function() {
          input2.focus();
        });
        container.on(
          Metro2.events.click,
          ".input-clear-button",
          function() {
            var val = element2.val();
            that.clear();
            that._fireEvent("clear", {
              val
            });
          }
        );
        input2.on(Metro2.events.input, function() {
          var val = this.value.toLowerCase();
          that._drawAutocompleteList(val);
        });
        container.on(
          Metro2.events.click,
          ".autocomplete-list .item",
          function() {
            var val = $3(this).attr("data-autocomplete-value");
            input2.val("");
            that._addTag(val);
            input2.attr("size", 1);
            autocompleteList.css({
              display: "none"
            });
            that._fireEvent("autocomplete-select", {
              value: val
            });
          }
        );
      },
      _drawAutocompleteList: function(val) {
        var that = this, element2 = this.element, o2 = this.options;
        var container = element2.closest(".tag-input");
        var input2 = container.find(".input-wrapper");
        var autocompleteList = container.find(".autocomplete-list");
        var items;
        if (autocompleteList.length === 0) {
          return;
        }
        autocompleteList.html("");
        items = this.autocomplete.filter(function(item) {
          return item.toLowerCase().indexOf(val) > -1;
        });
        autocompleteList.css({
          display: items.length > 0 ? "block" : "none",
          left: input2.position().left
        });
        $3.each(items, function() {
          if (o2.autocompleteUnique && that.values.indexOf(this) !== -1) {
            return;
          }
          var v2 = this;
          var index = v2.toLowerCase().indexOf(val), content;
          var item = $3("<div>").addClass("item").attr("data-autocomplete-value", v2);
          if (index === 0) {
            content = "<strong>" + v2.substr(0, val.length) + "</strong>" + v2.substr(val.length);
          } else {
            content = v2.substr(0, index) + "<strong>" + v2.substr(index, val.length) + "</strong>" + v2.substr(index + val.length);
          }
          item.html(content).appendTo(autocompleteList);
          that._fireEvent("draw-autocomplete-item", {
            item
          });
        });
      },
      _addTag: function(val) {
        var element2 = this.element, o2 = this.options;
        var container = element2.closest(".tag-input");
        var input2 = container.find(".input-wrapper");
        var tag, title3, remover;
        var tagSize, tagStatic;
        if (container.hasClass("input-large")) {
          tagSize = "large";
        } else if (container.hasClass("input-small")) {
          tagSize = "small";
        }
        if (o2.maxTags > 0 && this.values.length === o2.maxTags) {
          return;
        }
        if (("" + val).trim() === "") {
          return;
        }
        if (!Utils.exec(o2.onBeforeTagAdd, [val, this.values], element2[0])) {
          return;
        }
        tag = $3("<span>").addClass("tag").addClass(tagSize).addClass(o2.clsTag).insertBefore(input2);
        tag.data("value", val);
        tagStatic = o2.static || container.hasClass("static-mode") || element2.readonly || element2.disabled || container.hasClass("disabled");
        if (tagStatic) {
          tag.addClass("static");
        }
        title3 = $3("<span>").addClass("title").addClass(o2.clsTagTitle).html(val);
        remover = $3("<span>").addClass("action").addClass(o2.clsTagAction).html("&times;");
        title3.appendTo(tag);
        remover.appendTo(tag);
        if (o2.randomColor === true) {
          var colors = Object.values(
            Object.assign(
              {},
              Farbe.StandardColors,
              Farbe.MetroColors
            )
          ), bg, fg, bg_r;
          bg = colors[$3.random(0, colors.length - 1)];
          bg_r = Farbe.Routines.darken(bg, 15);
          fg = Farbe.Routines.isDark(bg) ? "#ffffff" : "#000000";
          tag.css({
            backgroundColor: bg,
            color: fg
          });
          remover.css({
            backgroundColor: bg_r,
            color: fg
          });
        }
        this.values.push(val);
        element2.val(this.values.join(o2.tagSeparator));
        this._fireEvent("tag-add", {
          tag: tag[0],
          val,
          values: this.values
        });
        this._fireEvent("tag", {
          tag: tag[0],
          val,
          values: this.values
        });
      },
      _delTag: function(tag) {
        var element2 = this.element, o2 = this.options;
        var val = tag.data("value");
        if (!Utils.exec(
          o2.onBeforeTagRemove,
          [tag, val, this.values],
          element2[0]
        )) {
          return;
        }
        Utils.arrayDelete(this.values, val);
        element2.val(this.values.join(o2.tagSeparator));
        this._fireEvent("tag-remove", {
          tag: tag[0],
          val,
          values: this.values
        });
        this._fireEvent("tag", {
          tag: tag[0],
          val,
          values: this.values
        });
        tag.remove();
      },
      tags: function() {
        return this.values;
      },
      val: function(v2) {
        var that = this, element2 = this.element, o2 = this.options;
        var container = element2.closest(".tag-input");
        var newValues = [];
        if (!Utils.isValue(v2)) {
          return this.tags();
        }
        this.values = [];
        container.find(".tag").remove();
        if (typeof v2 === "string") {
          newValues = ("" + v2).toArray(o2.tagSeparator);
        } else {
          if (Array.isArray(v2)) {
            newValues = v2;
          }
        }
        $3.each(newValues, function() {
          that._addTag(this);
        });
        return this;
      },
      append: function(v2) {
        var that = this, o2 = this.options;
        var newValues = this.values;
        if (typeof v2 === "string") {
          newValues = ("" + v2).toArray(o2.tagSeparator);
        } else {
          if (Array.isArray(v2)) {
            newValues = v2;
          }
        }
        $3.each(newValues, function() {
          that._addTag(this);
        });
        return this;
      },
      clear: function() {
        var element2 = this.element;
        var container = element2.closest(".tag-input");
        this.values = [];
        element2.val("").trigger("change");
        container.find(".tag").remove();
        return this;
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      toggleStatic: function(val) {
        var container = this.element.closest(".tag-input");
        var staticMode;
        if (Utils.isValue(val)) {
          staticMode = Utils.bool(val);
        } else {
          staticMode = !container.hasClass("static-mode");
        }
        if (staticMode) {
          container.addClass("static-mode");
        } else {
          container.removeClass("static-mode");
        }
      },
      setAutocompleteList: function(l2) {
        var autocomplete_list = Utils.isObject(l2);
        if (autocomplete_list !== false) {
          this.autocomplete = autocomplete_list;
        } else if (typeof l2 === "string") {
          this.autocomplete = l2.toArray(this.options.autocompleteDivider);
        }
      },
      changeAttribute: function(attributeName) {
        var that = this, element2 = this.element, o2 = this.options;
        var changeValue = function() {
          var val = element2.attr("value").trim();
          that.clear();
          if (!Utils.isValue(val)) {
            return;
          }
          that.val(val.toArray(o2.tagSeparator));
        };
        switch (attributeName) {
          case "value":
            changeValue();
            break;
          case "disabled":
            this.toggleState();
            break;
          case "static":
            this.toggleStatic();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var container = element2.closest(".tag-input");
        var input2 = container.find(".input-wrapper");
        input2.off(Metro2.events.focus);
        input2.off(Metro2.events.blur);
        input2.off(Metro2.events.keydown);
        container.off(Metro2.events.click, ".tag .action");
        container.off(Metro2.events.click);
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3(".tag-input .autocomplete-list").hide();
    });
  })(Metro, Dom);

  // source/components/task-bar/task-bar.js
  (function(Metro2, $3) {
    "use strict";
    let TaskBarDefaultConfig = {
      onTaskClick: Metro2.noop,
      onMyObjectCreate: Metro2.noop
    };
    Metro2.taskBarSetup = function(options) {
      TaskBarDefaultConfig = $3.extend({}, TaskBarDefaultConfig, options);
    };
    if (typeof window["metroTaskBarSetup"] !== void 0) {
      Metro2.taskBarSetup(window["metroTaskBarSetup"]);
    }
    Metro2.Component("task-bar", {
      init: function(options, elem) {
        this._super(elem, options, TaskBarDefaultConfig, {
          // define instance vars here
          tasks: [],
          systemTray: [],
          widgets: []
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("task-bar-create");
      },
      _createStructure: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.addClass("task-bar");
        element2.append($3("<div>").addClass("widgets"));
        element2.append($3("<div>").addClass("tasks"));
        element2.append($3("<div>").addClass("system-tray"));
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.click, ".task", function() {
          const task = that.tasks[$3(this).index()];
          for (const t of that.tasks) {
            t.active = false;
          }
          task.active = true;
          that._renderTasks();
          that._fireEvent("task-click", {
            task,
            element: task.ref
          });
        });
        element2.on(Metro2.events.click, ".system-tray-item", function() {
          const item = that.systemTray[$3(this).index()];
          that._fireEvent("system-tray-click", {
            item
          });
        });
        element2.on(Metro2.events.click, ".widget", function() {
          const item = that.widgets[$3(this).index()];
          that._fireEvent("widget-click", {
            item
          });
        });
      },
      _renderTasks: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const tasks = element2.find(".tasks").clear();
        for (const task of this.tasks) {
          const taskItem = $3("<div>").addClass("task").attr("title", task.title).html(task.icon);
          if (task.active) {
            taskItem.addClass("active");
          }
          tasks.append(taskItem);
        }
      },
      _renderSystemTray: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const systemTray = element2.find(".system-tray").clear();
        for (const item of this.systemTray) {
          systemTray.append($3(item).addClass("system-tray-item"));
        }
      },
      _renderWidgets: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const widgets = element2.find(".widgets").clear();
        for (const widget of this.widgets) {
          widgets.append($3(widget).addClass("widget"));
        }
      },
      /*
      * task = {
      *   title: "Task title",
      *   description: "Task description",
      *   icon: "<span class='mif-cogs'></span>",
      *   ref: null, // Reference to the element in the DOM
      * }
      * */
      addTask: function(task, active = false) {
        if (active) {
          for (const t of this.tasks) {
            t.active = false;
          }
        }
        this.tasks.push({ ...task, active });
        this._renderTasks();
      },
      removeTask: function(task) {
        this.tasks = this.tasks.filter((t) => t.ref !== task);
        this._renderTasks();
      },
      activateTask: function(ref) {
        const tasks = this.tasks.filter((t) => t.ref === ref);
        if (tasks.length === 0) {
          return;
        }
        const task = tasks[0];
        for (const t of this.tasks) {
          t.active = false;
        }
        task.active = true;
        this._renderTasks();
      },
      /*
      * item = HTMLElement
      * */
      addToSystemTray: function(item) {
        this.systemTray.push(item);
        this._renderSystemTray();
      },
      /*
      * widget = HTMLElement
      * */
      addWidget: function(widget) {
        this.widgets.push(widget);
        this._renderWidgets();
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/template/template.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var Engine = function(html2, options, conf) {
      var ReEx, re3 = "<%(.+?)%>", reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g, code2 = "with(obj) { var r=[];\n", cursor = 0, result, match;
      var add2 = function(line, js) {
        js ? code2 += line.match(reExp) ? line + "\n" : "r.push(" + line + ");\n" : code2 += line !== "" ? 'r.push("' + line.replace(/"/g, '\\"') + '");\n' : "";
        return add2;
      };
      if (Utils.isValue(conf)) {
        if ($3.hasProp(conf, "beginToken")) {
          re3 = re3.replace("<%", conf.beginToken);
        }
        if ($3.hasProp(conf, "endToken")) {
          re3 = re3.replace("%>", conf.endToken);
        }
      }
      ReEx = new RegExp(re3, "g");
      match = ReEx.exec(html2);
      while (match) {
        add2(html2.slice(cursor, match.index))(match[1], true);
        cursor = match.index + match[0].length;
        match = ReEx.exec(html2);
      }
      add2(html2.substr(cursor, html2.length - cursor));
      code2 = (code2 + 'return r.join(""); }').replace(/[\r\t\n]/g, " ");
      try {
        result = new Function("obj", code2).apply(options, [options]);
      } catch (err) {
        console.error("'" + err.message + "'", " in \n\nCode:\n", code2, "\n");
      }
      return result;
    };
    var TemplateDefaultConfig = {
      templateData: null,
      onTemplateCompile: Metro2.noop,
      onTemplateCreate: Metro2.noop
    };
    Metro2.templateSetup = function(options) {
      TemplateDefaultConfig = $3.extend({}, TemplateDefaultConfig, options);
    };
    if (typeof globalThis["metroTemplateSetup"] !== void 0) {
      Metro2.templateSetup(globalThis["metroTemplateSetup"]);
    }
    Metro2.Component("template", {
      init: function(options, elem) {
        this._super(elem, options, TemplateDefaultConfig, {
          template: null,
          data: {}
        });
        return this;
      },
      _compile: function() {
        var element2 = this.element;
        var template2, compiled;
        template2 = this.template.replace(/(&lt;%)/gm, "<%").replace(/(%&gt;)/gm, "%>").replace(/(&lt;)/gm, "<").replace(/(&gt;)/gm, ">");
        compiled = Engine(template2, this.data);
        element2.html(compiled);
        this._fireEvent("template-compile", {
          template: template2,
          compiled,
          element: element2
        });
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this.template = element2.html();
        this.data = Utils.isObject(o2.templateData) || {};
        this._compile();
        this._fireEvent("template-create", {
          element: element2
        });
      },
      buildWith: function(obj) {
        var data2 = Utils.isObject(obj);
        if (!data2) {
          return;
        }
        this.data = data2;
        this._compile();
      },
      changeAttribute: function(a2, v2) {
        if (a2 === "data-template-data") {
          this.options.templateData = v2;
          this.data = Utils.isObject(v2) || {};
          this._compile();
        }
      },
      destroy: function() {
        return this.element;
      }
    });
    Metro2.template = Engine;
  })(Metro, Dom);

  // source/components/textarea/textarea.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var TextareaDefaultConfig = {
      label: "",
      textareaDeferred: 0,
      charsCounter: null,
      charsCounterTemplate: "$1",
      defaultValue: "",
      prepend: "",
      append: "",
      copyInlineStyles: false,
      clearButton: true,
      clearButtonIcon: "\u274C",
      autoSize: true,
      maxHeight: 0,
      clsPrepend: "",
      clsAppend: "",
      clsComponent: "",
      clsTextarea: "",
      clsLabel: "",
      onChange: Metro2.noop,
      onTextareaCreate: Metro2.noop
    };
    Metro2.textareaSetup = function(options) {
      TextareaDefaultConfig = $3.extend({}, TextareaDefaultConfig, options);
    };
    if (typeof globalThis["metroTextareaSetup"] !== void 0) {
      Metro2.textareaSetup(globalThis["metroTextareaSetup"]);
    }
    Metro2.Component("textarea", {
      init: function(options, elem) {
        this._super(elem, options, TextareaDefaultConfig);
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createStructure();
        this._createEvents();
        this._fireEvent("textarea-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var that = this, element2 = this.element, elem = this.elem, o2 = this.options;
        var container = $3("<div>").addClass("textarea " + element2[0].className);
        var fakeTextarea = $3("<textarea>").addClass("fake-textarea");
        var clearButton;
        container.insertBefore(element2);
        element2.appendTo(container);
        fakeTextarea.appendTo(container);
        if (o2.clearButton !== false && !element2[0].readOnly) {
          clearButton = $3("<button>").addClass("button input-clear-button").attr("tabindex", -1).attr("type", "button").html(o2.clearButtonIcon);
          clearButton.appendTo(container);
        }
        if (element2.attr("dir") === "rtl") {
          container.addClass("rtl").attr("dir", "rtl");
        }
        if (o2.prepend !== "") {
          var prepend2 = $3("<div>").html(o2.prepend);
          prepend2.addClass("prepend").addClass(o2.clsPrepend).appendTo(container);
        }
        if (o2.append !== "") {
          var append2 = $3("<div>").html(o2.append);
          append2.addClass("append").addClass(o2.clsAppend).appendTo(container);
          clearButton.css({
            right: append2.outerWidth() + 4
          });
        }
        elem.className = "";
        if (o2.copyInlineStyles === true) {
          for (var i3 = 0, l2 = elem.style.length; i3 < l2; i3++) {
            container.css(elem.style[i3], element2.css(elem.style[i3]));
          }
        }
        if (Utils.isValue(o2.defaultValue) && element2.val().trim() === "") {
          element2.val(o2.defaultValue);
        }
        container.addClass(o2.clsComponent);
        element2.addClass(o2.clsTextarea);
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(container);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        if (element2.is(":disabled")) {
          this.disable();
        } else {
          this.enable();
        }
        fakeTextarea.val(element2.val());
        if (o2.autoSize === true) {
          container.addClass("autosize no-scroll-vertical");
          setTimeout(function() {
            that.resize();
          }, 100);
        }
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var textarea2 = element2.closest(".textarea");
        var fakeTextarea = textarea2.find(".fake-textarea");
        var chars_counter = $3(o2.charsCounter);
        textarea2.on(Metro2.events.click, ".input-clear-button", function(e) {
          element2.val(Utils.isValue(o2.defaultValue) ? o2.defaultValue : "").trigger("change").trigger("keyup").focus();
          e.preventDefault();
          e.stopPropagation();
        });
        if (o2.autoSize) {
          element2.on(Metro2.events.inputchange + " " + Metro2.events.keyup, function() {
            fakeTextarea.val(this.value);
            that.resize();
          });
        }
        element2.on(Metro2.events.blur, function() {
          textarea2.removeClass("focused");
        });
        element2.on(Metro2.events.focus, function() {
          textarea2.addClass("focused");
        });
        element2.on(Metro2.events.keyup, function() {
          if (Utils.isValue(o2.charsCounter) && chars_counter.length > 0) {
            if (chars_counter[0].tagName === "INPUT") {
              chars_counter.val(that.length());
            } else {
              chars_counter.html(o2.charsCounterTemplate.replace("$1", that.length()));
            }
          }
          that._fireEvent("change", {
            val: element2.val(),
            length: that.length()
          });
        });
      },
      resize: function() {
        var element2 = this.element, o2 = this.options, textarea2 = element2.closest(".textarea"), fakeTextarea = textarea2.find(".fake-textarea"), currentHeight = fakeTextarea[0].scrollHeight;
        if (o2.maxHeight && currentHeight >= o2.maxHeight) {
          textarea2.removeClass("no-scroll-vertical");
          return;
        }
        if (o2.maxHeight && currentHeight < o2.maxHeight) {
          textarea2.addClass("no-scroll-vertical");
        }
        fakeTextarea[0].style.cssText = "height:auto;";
        fakeTextarea[0].style.cssText = "height:" + fakeTextarea[0].scrollHeight + "px";
        element2[0].style.cssText = "height:" + fakeTextarea[0].scrollHeight + "px";
      },
      clear: function() {
        this.element.val("").trigger("change").trigger("keyup").focus();
      },
      toDefault: function() {
        this.element.val(Utils.isValue(this.options.defaultValue) ? this.options.defaultValue : "").trigger("change").trigger("keyup").focus();
      },
      length: function() {
        var characters = this.elem.value.split("");
        return characters.length;
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "disabled":
            this.toggleState();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        var textarea2 = element2.closest(".textarea");
        textarea2.off(Metro2.events.click, ".input-clear-button");
        if (o2.autoSize) {
          element2.off(Metro2.events.inputchange + " " + Metro2.events.keyup);
        }
        element2.off(Metro2.events.blur);
        element2.off(Metro2.events.focus);
        element2.off(Metro2.events.keyup);
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/theme-switcher/theme-switcher.js
  (function(Metro2, $3) {
    "use strict";
    var ThemeSwitcherDefaultConfig = {
      state: Metro2.theme.LIGHT,
      target: "html",
      saveState: true,
      saveStateKey: "THEME:SWITCHER",
      clsDark: "",
      darkSymbol: "\u{1F319}",
      lightSymbol: "\u{1F31E}",
      mode: "switch",
      onThemeSwitcherCreate: Metro2.noop,
      onChangeTheme: Metro2.noop
    };
    Metro2.themeSwitcherSetup = function(options) {
      ThemeSwitcherDefaultConfig = $3.extend({}, ThemeSwitcherDefaultConfig, options);
    };
    if (typeof globalThis["metroThemeSwitcherSetup"] !== void 0) {
      Metro2.themeSwitcherSetup(globalThis["metroThemeSwitcherSetup"]);
    }
    Metro2.Component("theme-switcher", {
      init: function(options, elem) {
        this._super(elem, options, ThemeSwitcherDefaultConfig, {
          container: null,
          state: null,
          target: null
        });
        this.state = this.options.state;
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("theme-switcher-create");
      },
      _createStructure: function() {
        const element2 = this.element, o2 = this.options;
        let initState = "light";
        if (o2.saveState) {
          initState = Metro2.storage.getItem(o2.saveStateKey, false);
        }
        element2.attr("data-light-symbol", o2.lightSymbol);
        element2.attr("data-dark-symbol", o2.darkSymbol);
        Metro2.makePlugin(element2, "switch");
        this.container = element2.wrap($3("<label>").addClass("theme-switcher"));
        this.container.addClass(`mode-${o2.mode}`);
        this.target = $3(o2.target);
        if (this.target.length === 0) {
          this.target = $3("html");
        }
        this._setState(o2.saveState ? initState : o2.state === Metro2.theme.DARK);
        this._updateState();
      },
      _createEvents: function() {
        this.container.on("click", () => {
          this._updateState();
        });
        this._observeClass();
      },
      _observeClass: function() {
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.type === "attributes") {
              if (mutation.attributeName === "class") {
                this.elem.checked = this.target[0].classList.contains("dark-side");
              }
            }
          });
        });
        observer.observe(this.target[0], {
          attributes: true,
          attributeFilter: ["class"]
        });
      },
      _setState: function(state2 = false) {
        this.elem.checked = state2;
      },
      _updateState: function() {
        const usingMeta = $3.meta("metro:theme").length > 0;
        const o2 = this.options, elem = this.elem, target = this.target;
        if (usingMeta) {
          return;
        }
        if (elem.checked) {
          target.addClass("dark-side").addClass(this.options.clsDark);
        } else {
          target.removeClass("dark-side").addClass(this.options.clsDark);
        }
        if (o2.saveState) {
          Metro2.storage.setItem(o2.saveStateKey, elem.checked);
        }
        this._fireEvent("change-theme", { state: elem.checked });
      },
      val: function(value) {
        if (typeof value === void 0) {
          return this.elem.checked ? Metro2.theme.DARK : Metro2.theme.LIGHT;
        }
        this._setState(typeof value === "boolean" ? value : value === Metro2.theme.DARK);
        this._updateState();
      },
      changeAttribute: function(attr, newValue) {
        if (attr === "data-target") {
          this.target = $3(newValue);
          this._updateState();
        }
      },
      destroy: function() {
        this.container.remove();
      }
    });
  })(Metro, Dom);

  // source/components/tile/tile.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var effects = [
      "slide-up",
      "slide-down",
      "slide-left",
      "slide-right",
      "fade",
      "zoom",
      "swirl",
      "switch"
    ];
    var TileDefaultConfig = {
      tileDeferred: 0,
      size: "medium",
      cover: "",
      coverPosition: "center",
      effect: "",
      // slide-up, slide-down, slide-left, slide-right, fade, zoom, swirl, switch
      effectInterval: 3e3,
      effectDuration: 500,
      target: null,
      canTransform: true,
      onTileClick: Metro2.noop,
      onTileCreate: Metro2.noop
    };
    Metro2.tileSetup = function(options) {
      TileDefaultConfig = $3.extend({}, TileDefaultConfig, options);
    };
    if (typeof globalThis["metroTileSetup"] !== void 0) {
      Metro2.tileSetup(globalThis["metroTileSetup"]);
    }
    Metro2.Component("tile", {
      init: function(options, elem) {
        this._super(elem, options, TileDefaultConfig, {
          effectInterval: false,
          images: [],
          slides: [],
          currentSlide: -1,
          unload: false
        });
        return this;
      },
      _create: function() {
        var element2 = this.element;
        this._createTile();
        this._createEvents();
        this._fireEvent("tile-create", {
          element: element2
        });
      },
      _createTile: function() {
        function switchImage(el, img_src, i4) {
          setTimeout(function() {
            el.fadeOut(500, function() {
              el.css("background-image", "url(" + img_src + ")");
              el.fadeIn();
            });
          }, i4 * 300);
        }
        var that = this, element2 = this.element, o2 = this.options;
        var slides = element2.find(".slide");
        var slides2 = element2.find(".slide-front, .slide-back");
        element2.addClass("tile-" + o2.size);
        if (o2.effect.indexOf("hover-") > -1) {
          element2.addClass("effect-" + o2.effect);
          $3.each(slides2, function() {
            var slide = $3(this);
            if (slide.data("cover") !== void 0) {
              that._setCover(slide, slide.data("cover"), slide.data("cover-position"));
            }
          });
        }
        if (effects.includes(o2.effect) && slides.length > 1) {
          $3.each(slides, function(i4) {
            var slide = $3(this);
            that.slides.push(this);
            if (slide.data("cover") !== void 0) {
              that._setCover(slide, slide.data("cover"), slide.data("cover-position"));
            }
            if (i4 > 0) {
              if (["slide-up", "slide-down"].indexOf(o2.effect) > -1) slide.css("top", "100%");
              if (["slide-left", "slide-right"].indexOf(o2.effect) > -1) slide.css("left", "100%");
              if (["fade", "zoom", "swirl", "switch"].indexOf(o2.effect) > -1) slide.css("opacity", 0);
            }
          });
          this.currentSlide = 0;
          this._runEffects();
        }
        if (o2.cover !== "") {
          this._setCover(element2, o2.cover);
        }
        if (o2.effect === "image-set") {
          element2.addClass("image-set");
          $3.each(element2.children("img"), function() {
            that.images.push(this);
            $3(this).remove();
          });
          var temp = this.images.slice();
          for (var i3 = 0; i3 < 5; i3++) {
            var rnd_index = $3.random(0, temp.length - 1);
            var div2 = $3("<div>").addClass("img -js-img-" + i3).css("background-image", "url(" + temp[rnd_index].src + ")");
            element2.prepend(div2);
            temp.splice(rnd_index, 1);
          }
          var a2 = [0, 1, 4, 3, 2];
          setInterval(function() {
            var temp2 = that.images.slice();
            var bg = Farbe.Routines.randomColor();
            element2.css("background-color", bg);
            for (var i4 = 0; i4 < a2.length; i4++) {
              var rnd_index2 = $3.random(0, temp2.length - 1);
              var div3 = element2.find(".-js-img-" + a2[i4]);
              switchImage(div3, temp2[rnd_index2].src, i4);
              temp2.splice(rnd_index2, 1);
            }
            a2 = a2.reverse();
          }, 5e3);
        }
      },
      _runEffects: function() {
        var that = this, o2 = this.options;
        if (this.effectInterval === false) this.effectInterval = setInterval(function() {
          var current, next;
          current = $3(that.slides[that.currentSlide]);
          that.currentSlide++;
          if (that.currentSlide === that.slides.length) {
            that.currentSlide = 0;
          }
          next = that.slides[that.currentSlide];
          if (effects.includes(o2.effect)) {
            Metro2.Effects[Str.camelCase(o2.effect)]($3(current)[0], $3(next)[0], { duration: o2.effectDuration });
          }
        }, o2.effectInterval);
      },
      _stopEffects: function() {
        $3.clearInterval(this.effectInterval);
        this.effectInterval = false;
      },
      _setCover: function(to, src, pos) {
        if (!Utils.isValue(pos)) {
          pos = this.options.coverPosition;
        }
        to.css({
          backgroundImage: "url(" + src + ")",
          backgroundSize: "cover",
          backgroundRepeat: "no-repeat",
          backgroundPosition: pos
        });
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options;
        element2.on(Metro2.events.startAll, function(e) {
          var tile = $3(this);
          var dim = { w: element2.width(), h: element2.height() };
          var X2 = Utils.pageXY(e).x - tile.offset().left, Y2 = Utils.pageXY(e).y - tile.offset().top;
          var side;
          if (Utils.isRightMouse(e) === false) {
            if (X2 < dim.w * 1 / 3 && (Y2 < dim.h * 1 / 2 || Y2 > dim.h * 1 / 2)) {
              side = "left";
            } else if (X2 > dim.w * 2 / 3 && (Y2 < dim.h * 1 / 2 || Y2 > dim.h * 1 / 2)) {
              side = "right";
            } else if (X2 > dim.w * 1 / 3 && X2 < dim.w * 2 / 3 && Y2 > dim.h / 2) {
              side = "bottom";
            } else {
              side = "top";
            }
            if (o2.canTransform === true) tile.addClass("transform-" + side);
            if (o2.target !== null) {
              setTimeout(function() {
                document.location.href = o2.target;
              }, 100);
            }
            that._fireEvent("tile-click", {
              side
            });
          }
        });
        element2.on([Metro2.events.stopAll, Metro2.events.leave].join(" "), function() {
          $3(this).removeClass("transform-left").removeClass("transform-right").removeClass("transform-top").removeClass("transform-bottom");
        });
      },
      changeAttribute: function() {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.startAll);
        element2.off([Metro2.events.stopAll, Metro2.events.leave].join(" "));
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/timepicker/timepicker.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var TimePickerDefaultConfig = {
      label: "",
      timepickerDeferred: 0,
      hoursStep: 1,
      minutesStep: 1,
      secondsStep: 1,
      value: null,
      distance: 3,
      hours: true,
      minutes: true,
      seconds: true,
      showLabels: true,
      scrollSpeed: 4,
      copyInlineStyles: false,
      openMode: "auto",
      clsPicker: "",
      clsPart: "",
      clsHours: "",
      clsMinutes: "",
      clsSeconds: "",
      clsLabel: "",
      clsButton: "",
      clsOkButton: "",
      clsCancelButton: "",
      okButtonIcon: "\u2713",
      cancelButtonIcon: "\u{10102}",
      onSet: Metro2.noop,
      onOpen: Metro2.noop,
      onClose: Metro2.noop,
      onScroll: Metro2.noop,
      onTimePickerCreate: Metro2.noop
    };
    Metro2.timePickerSetup = function(options) {
      TimePickerDefaultConfig = $3.extend({}, TimePickerDefaultConfig, options);
    };
    if (typeof globalThis["metroTimePickerSetup"] !== void 0) {
      Metro2.timePickerSetup(globalThis["metroTimePickerSetup"]);
    }
    Metro2.Component("time-picker", {
      init: function(options, elem) {
        this._super(elem, options, TimePickerDefaultConfig, {
          picker: null,
          isOpen: false,
          value: [],
          listTimer: {
            hours: null,
            minutes: null,
            seconds: null
          },
          id: Utils.elementId("time-picker")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        var i3;
        if (o2.distance < 1) {
          o2.distance = 1;
        }
        if (o2.hoursStep < 1) {
          o2.hoursStep = 1;
        }
        if (o2.hoursStep > 23) {
          o2.hoursStep = 23;
        }
        if (o2.minutesStep < 1) {
          o2.minutesStep = 1;
        }
        if (o2.minutesStep > 59) {
          o2.minutesStep = 59;
        }
        if (o2.secondsStep < 1) {
          o2.secondsStep = 1;
        }
        if (o2.secondsStep > 59) {
          o2.secondsStep = 59;
        }
        if (element2.val() === "" && !Utils.isValue(o2.value)) {
          o2.value = datetime().format("HH:mm:ss");
        }
        this.value = (element2.val() !== "" ? element2.val() : "" + o2.value).toArray(":");
        for (i3 = 0; i3 < 3; i3++) {
          if (this.value[i3] === void 0 || this.value[i3] === null) {
            this.value[i3] = 0;
          } else {
            this.value[i3] = parseInt(this.value[i3]);
          }
        }
        this._normalizeValue();
        this._createStructure();
        this._createEvents();
        this._set();
        this._fireEvent("time-picker-create", {
          element: element2
        });
      },
      _normalizeValue: function() {
        var o2 = this.options;
        if (o2.hoursStep > 1) {
          this.value[0] = Utils.nearest(this.value[0], o2.hoursStep, true);
        }
        if (o2.minutesStep > 1) {
          this.value[1] = Utils.nearest(this.value[1], o2.minutesStep, true);
        }
        if (o2.minutesStep > 1) {
          this.value[2] = Utils.nearest(this.value[2], o2.secondsStep, true);
        }
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options, strings = this.strings;
        var picker, hours, minutes, seconds, i3;
        var timeWrapper, selectWrapper, selectBlock, actionBlock;
        var id = Utils.elementId("timepicker");
        picker = $3("<div>").addClass("wheel-picker time-picker " + element2[0].className).addClass(o2.clsPicker);
        if (!picker.attr("id")) {
          picker.attr("id", id);
        }
        picker.insertBefore(element2);
        element2.attr("readonly", true).appendTo(picker);
        if (o2.label) {
          var label2 = $3("<label>").addClass("label-for-input").addClass(o2.clsLabel).html(o2.label).insertBefore(picker);
          if (element2.attr("id")) {
            label2.attr("for", element2.attr("id"));
          }
          if (element2.attr("dir") === "rtl") {
            label2.addClass("rtl");
          }
        }
        timeWrapper = $3("<div>").addClass("time-wrapper").appendTo(picker);
        if (o2.hours === true) {
          hours = $3("<div>").attr("data-title", strings["label_hours"]).addClass("hours").addClass(o2.clsPart).addClass(o2.clsHours).appendTo(timeWrapper);
        }
        if (o2.minutes === true) {
          minutes = $3("<div>").attr("data-title", strings["label_minutes"]).addClass("minutes").addClass(o2.clsPart).addClass(o2.clsMinutes).appendTo(timeWrapper);
        }
        if (o2.seconds === true) {
          seconds = $3("<div>").attr("data-title", strings["label_seconds"]).addClass("seconds").addClass(o2.clsPart).addClass(o2.clsSeconds).appendTo(timeWrapper);
        }
        selectWrapper = $3("<div>").addClass("select-wrapper").appendTo(picker);
        selectBlock = $3("<div>").addClass("select-block").appendTo(selectWrapper);
        if (o2.hours === true) {
          hours = $3("<ul>").addClass("sel-hours").appendTo(selectBlock);
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(hours);
          for (i3 = 0; i3 < 24; i3 = i3 + o2.hoursStep) {
            $3("<li>").addClass("js-hours-" + i3).html(Str.lpad(i3, "0", 2)).data("value", i3).appendTo(hours);
          }
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(hours);
        }
        if (o2.minutes === true) {
          minutes = $3("<ul>").addClass("sel-minutes").appendTo(selectBlock);
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(minutes);
          for (i3 = 0; i3 < 60; i3 = i3 + o2.minutesStep) {
            $3("<li>").addClass("js-minutes-" + i3).html(Str.lpad(i3, "0", 2)).data("value", i3).appendTo(minutes);
          }
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(minutes);
        }
        if (o2.seconds === true) {
          seconds = $3("<ul>").addClass("sel-seconds").appendTo(selectBlock);
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(seconds);
          for (i3 = 0; i3 < 60; i3 = i3 + o2.secondsStep) {
            $3("<li>").addClass("js-seconds-" + i3).html(Str.lpad(i3, "0", 2)).data("value", i3).appendTo(seconds);
          }
          for (i3 = 0; i3 < o2.distance; i3++) $3("<li>").html("&nbsp;").data("value", -1).appendTo(seconds);
        }
        selectBlock.height((o2.distance * 2 + 1) * 40);
        actionBlock = $3("<div>").addClass("action-block").appendTo(selectWrapper);
        $3("<button>").attr("type", "button").addClass("button action-now").addClass(o2.clsButton).addClass(o2.clsTodayButton).html(`<span class="caption">${this.strings.label_now}</span>`).appendTo(actionBlock);
        $3("<button>").attr("type", "button").addClass("button action-ok").addClass(o2.clsButton).addClass(o2.clsOkButton).html(`<span class="icon">${o2.okButtonIcon}</span>`).appendTo(actionBlock);
        $3("<button>").attr("type", "button").addClass("button action-cancel").addClass(o2.clsButton).addClass(o2.clsCancelButton).html(`<span class="icon">${o2.cancelButtonIcon}</span>`).appendTo(actionBlock);
        element2[0].className = "";
        if (o2.copyInlineStyles === true) {
          for (i3 = 0; i3 < element2[0].style.length; i3++) {
            picker.css(element2[0].style[i3], element2.css(element2[0].style[i3]));
          }
        }
        if (o2.showLabels === true) {
          picker.addClass("show-labels");
        }
        if (element2.prop("disabled")) {
          picker.addClass("disabled");
        }
        this.picker = picker;
      },
      _createEvents: function() {
        var that = this, o2 = this.options;
        var picker = this.picker;
        picker.on("touchstart", ".select-block ul", function(e) {
          if (e.changedTouches) {
            return;
          }
          var target = this;
          var pageY = Utils.pageXY(e).y;
          $3(document).on(
            "touchmove",
            function(e2) {
              target.scrollTop -= o2.scrollSpeed * (pageY > Utils.pageXY(e2).y ? -1 : 1);
              pageY = Utils.pageXY(e2).y;
            },
            { ns: that.id }
          );
          $3(document).on(
            "touchend",
            function() {
              $3(document).off(Metro2.events.move, { ns: that.id });
              $3(document).off(Metro2.events.stop, { ns: that.id });
            },
            { ns: that.id }
          );
        });
        picker.on(Metro2.events.click, function(e) {
          if (that.isOpen === false) that.open();
          e.stopPropagation();
        });
        picker.on(Metro2.events.click, ".action-ok", function(e) {
          var h7, m2, s2;
          var sh = picker.find(".sel-hours li.active"), sm = picker.find(".sel-minutes li.active"), ss = picker.find(".sel-seconds li.active");
          h7 = sh.length === 0 ? 0 : sh.data("value");
          m2 = sm.length === 0 ? 0 : sm.data("value");
          s2 = ss.length === 0 ? 0 : ss.data("value");
          that.value = [h7, m2, s2];
          that._normalizeValue();
          that._set();
          that.close();
          e.stopPropagation();
        });
        picker.on(Metro2.events.click, ".action-cancel", function(e) {
          that.close();
          e.stopPropagation();
        });
        var scrollLatency = 150;
        $3.each(["hours", "minutes", "seconds"], function() {
          var part = this, list = picker.find(".sel-" + part);
          const scrollFn = Hooks.useDebounce(function(e) {
            var target, targetElement, scrollTop;
            that.listTimer[part] = null;
            target = Math.round(Math.ceil(list.scrollTop()) / 40);
            if (part === "hours" && o2.hoursStep) {
              target *= parseInt(o2.hoursStep);
            }
            if (part === "minutes" && o2.minutesStep) {
              target *= parseInt(o2.minutesStep);
            }
            if (part === "seconds" && o2.secondsStep) {
              target *= parseInt(o2.secondsStep);
            }
            targetElement = list.find(".js-" + part + "-" + target);
            scrollTop = targetElement.position().top - o2.distance * 40;
            list.find(".active").removeClass("active");
            list[0].scrollTop = scrollTop;
            targetElement.addClass("active");
            Utils.exec(o2.onScroll, [targetElement, list, picker], list[0]);
          }, scrollLatency);
          list.on("scroll", scrollFn);
        });
        picker.on(Metro2.events.click, "ul li", function(e) {
          const target = $3(this);
          const list = target.closest("ul");
          const scrollTop = target.position().top - o2.distance * 40;
          list.find(".active").removeClass("active");
          $3.animate({
            el: list[0],
            draw: {
              scrollTop
            },
            dur: 300
          });
          list[0].scrollTop = scrollTop;
          target.addClass("active");
          Utils.exec(o2.onScroll, [target, list, picker], list[0]);
        });
        picker.on(Metro2.events.click, ".action-now", function(e) {
          const now = datetime();
          const hour = now.hour();
          const minute = now.minute();
          const second = now.second();
          picker.find(`.sel-hours li.js-hours-${hour}`).click();
          picker.find(`.sel-minutes li.js-minutes-${minute}`).click();
          picker.find(`.sel-seconds li.js-seconds-${second}`).click();
          e.preventDefault();
          e.stopPropagation();
        });
      },
      _set: function() {
        var element2 = this.element, o2 = this.options;
        var picker = this.picker;
        var h7 = "00", m2 = "00", s2 = "00";
        if (o2.hours === true) {
          h7 = parseInt(this.value[0]);
          picker.find(".hours").html(Str.lpad(h7, "0", 2));
        }
        if (o2.minutes === true) {
          m2 = parseInt(this.value[1]);
          picker.find(".minutes").html(Str.lpad(m2, "0", 2));
        }
        if (o2.seconds === true) {
          s2 = parseInt(this.value[2]);
          picker.find(".seconds").html(Str.lpad(s2, "0", 2));
        }
        element2.val([h7, m2, s2].join(":")).trigger("change");
        this._fireEvent("set", {
          val: this.value,
          elementVal: element2.val()
        });
      },
      open: function() {
        var o2 = this.options;
        var picker = this.picker;
        var h7, m2, s2;
        var h_list, m_list, s_list;
        var items = picker.find("li");
        var select_wrapper = picker.find(".select-wrapper");
        var h_item, m_item, s_item;
        $3.each($3(".time-picker"), function() {
          $3(this).find("input").each(function() {
            Metro2.getPlugin(this, "timepicker").close();
          });
        });
        select_wrapper.show(0);
        items.removeClass("active");
        if (o2.openMode === "auto") {
          if (!Metro2.utils.inViewport(select_wrapper[0])) {
            select_wrapper.parent().addClass("drop-up-select");
          }
          if (!Metro2.utils.inViewport(select_wrapper[0])) {
            select_wrapper.parent().removeClass("drop-up-select");
            select_wrapper.parent().addClass("drop-as-dialog");
          }
        } else {
          if (o2.openMode === "dialog") {
            select_wrapper.parent().addClass("drop-as-dialog");
          } else if (o2.openMode === "up") {
            select_wrapper.parent().addClass("drop-up-select");
          }
        }
        var animateList = function(list, item) {
          list.scrollTop(0).animate({
            draw: {
              scrollTop: item.position().top - o2.distance * 40 + list.scrollTop()
            },
            dur: 100
          });
        };
        if (o2.hours === true) {
          h7 = parseInt(this.value[0]);
          h_list = picker.find(".sel-hours");
          h_item = h_list.find("li.js-hours-" + h7).addClass("active");
          animateList(h_list, h_item);
        }
        if (o2.minutes === true) {
          m2 = parseInt(this.value[1]);
          m_list = picker.find(".sel-minutes");
          m_item = m_list.find("li.js-minutes-" + m2).addClass("active");
          animateList(m_list, m_item);
        }
        if (o2.seconds === true) {
          s2 = parseInt(this.value[2]);
          s_list = picker.find(".sel-seconds");
          s_item = s_list.find("li.js-seconds-" + s2).addClass("active");
          animateList(s_list, s_item);
        }
        this.isOpen = true;
        this._fireEvent("open", {
          val: this.value
        });
      },
      close: function() {
        var picker = this.picker, o2 = this.options;
        picker.find(".select-wrapper").hide(0);
        if (o2.openMode === "auto") {
          picker.find(".select-wrapper").parent().removeClass("drop-up-select drop-as-dialog");
        }
        this.isOpen = false;
        this._fireEvent("close", {
          val: this.value
        });
      },
      _convert: function(t) {
        var result;
        if (Array.isArray(t)) {
          result = t;
        } else if (typeof t.getMonth === "function") {
          result = [t.getHours(), t.getMinutes(), t.getSeconds()];
        } else if (Utils.isObject(t)) {
          result = [t.h, t.m, t.s];
        } else {
          result = t.toArray(":");
        }
        return result;
      },
      val: function(t) {
        if (t === void 0) {
          return this.element.val();
        }
        this.value = this._convert(t);
        this._normalizeValue();
        this._set();
      },
      time: function(t) {
        if (t === void 0) {
          return {
            h: this.value[0],
            m: this.value[1],
            s: this.value[2]
          };
        }
        this.value = this._convert(t);
        this._normalizeValue();
        this._set();
      },
      date: function(t) {
        if (t === void 0 || typeof t.getMonth !== "function") {
          return datetime().hour(this.value[0]).minute(this.value[1]).second(this.value[2]).ms(0).val();
        }
        this.value = this._convert(t);
        this._normalizeValue();
        this._set();
      },
      disable: function() {
        this.element.data("disabled", true);
        this.element.parent().addClass("disabled");
      },
      enable: function() {
        this.element.data("disabled", false);
        this.element.parent().removeClass("disabled");
      },
      toggleState: function() {
        if (this.elem.disabled) {
          this.disable();
        } else {
          this.enable();
        }
      },
      changeAttribute: function(attr, newValue) {
        switch (attr) {
          case "data-value":
            this.val(newValue);
            break;
          case "disabled":
            this.toggleState();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element;
        var picker = this.picker;
        $3.each(["hours", "minutes", "seconds"], function() {
          picker.find(".sel-" + this).off("scroll");
        });
        picker.off(Metro2.events.start, ".select-block ul");
        picker.off(Metro2.events.click);
        picker.off(Metro2.events.click, ".action-ok");
        picker.off(Metro2.events.click, ".action-cancel");
        return element2;
      }
    });
    $3(document).on(Metro2.events.click, function() {
      $3.each($3(".time-picker"), function() {
        $3(this).find("input").each(function() {
          Metro2.getPlugin(this, "timepicker").close();
        });
      });
    });
  })(Metro, Dom);

  // source/components/toast/toast.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ToastDefaultConfig = {
      callback: Metro2.noop,
      timeout: METRO_TIMEOUT,
      distance: 20,
      position: "bottom",
      // top, bottom, center
      clsToast: ""
    };
    Metro2.toastSetup = function(options) {
      ToastDefaultConfig = $3.extend({}, ToastDefaultConfig, options);
    };
    if (typeof globalThis["metroToastSetup"] !== void 0) {
      Metro2.toastSetup(globalThis["metroToastSetup"]);
    }
    var Toast = {
      create: function(message, options) {
        var o2, toast, width;
        var args = Array.from(arguments);
        var timeout, callback, cls;
        if (!$3.isPlainObject(options)) {
          options = args[4];
          callback = args[1];
          timeout = args[2];
          cls = args[3];
        }
        o2 = $3.extend({}, ToastDefaultConfig, options);
        toast = $3("<div>").addClass("toast").html(message).appendTo($3("body"));
        width = toast.outerWidth();
        timeout = timeout || o2.timeout;
        callback = callback || o2.callback;
        cls = cls || o2.cls;
        if (o2.position === "top") {
          toast.addClass("show-top").css({
            top: o2.distance
          });
        } else if (o2.position === "center") {
          toast.addClass("show-center");
        } else {
          toast.css({
            bottom: o2.distance
          });
        }
        toast.css({
          "left": "50%",
          "margin-left": -(width / 2)
        }).addClass(o2.clsToast).addClass(cls).fadeIn(METRO_ANIMATION_DURATION, function() {
          setTimeout(function() {
            Toast.remove(toast, callback);
          }, timeout);
        });
      },
      remove: function(toast, cb) {
        if (!toast.length) return;
        toast.fadeOut(METRO_ANIMATION_DURATION, function() {
          toast.remove();
          Utils.exec(cb, null, toast[0]);
        });
      }
    };
    Metro2["toast"] = Toast;
    Metro2["createToast"] = Toast.create;
  })(Metro, Dom);

  // source/components/tokenizer/tokenizer.js
  (function(Metro2, $3) {
    "use strict";
    var TokenizerDefaultConfig = {
      textToTokenize: "",
      spaceSymbol: "",
      spaceClass: "space",
      tokenClass: "",
      splitter: "",
      tokenElement: "span",
      useTokenSymbol: true,
      useTokenIndex: true,
      clsTokenizer: "",
      clsToken: "",
      clsTokenOdd: "",
      clsTokenEven: "",
      onTokenCreate: Metro2.noop,
      onTokenize: Metro2.noop,
      onTokenizerCreate: Metro2.noop
    };
    Metro2.tokenizerSetup = function(options) {
      TokenizerDefaultConfig = $3.extend({}, TokenizerDefaultConfig, options);
    };
    if (typeof globalThis["metroTokenizerSetup"] !== void 0) {
      Metro2.tokenizerSetup(globalThis["metroTokenizerSetup"]);
    }
    Metro2.Component("tokenizer", {
      init: function(options, elem) {
        this._super(elem, options, TokenizerDefaultConfig, {
          // define instance vars here
          originalText: ""
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this.originalText = o2.textToTokenize ? o2.textToTokenize.trim() : element2.text().trim().replace(/[\r\n\t]/gi, "").replace(/\s\s+/g, " ");
        this._createStructure();
        this._fireEvent("tokenizer-create");
      },
      _tokenize: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var index = 0, append2, prepend2;
        element2.clear().attr("aria-label", this.originalText);
        $3.each(this.originalText.split(o2.splitter), function(i3) {
          var symbol = this;
          var isSpace = symbol === " ";
          var token;
          token = $3("<" + o2.tokenElement + ">").html(isSpace ? o2.spaceSymbol : symbol).attr("aria-hidden", true).addClass(isSpace ? o2.spaceClass : "").addClass(isSpace && o2.useTokenSymbol ? "" : "ts-" + symbol.replace(" ", "_")).addClass(isSpace && o2.useTokenIndex ? "" : "ti-" + (i3 + 1)).addClass(o2.tokenClass ? o2.tokenClass : "").addClass(!isSpace ? o2.clsToken : "");
          if (!isSpace) {
            index++;
            token.addClass(index % 2 === 0 ? "te-even" : "te-odd");
            token.addClass(index % 2 === 0 ? o2.clsTokenEven : o2.clsTokenOdd);
          }
          if (o2.prepend) {
            prepend2 = $3.isSelector(o2.prepend) ? $3(o2.prepend) : $3("<span>").html(o2.prepend);
            token.prepend(prepend2);
          }
          if (o2.append) {
            append2 = $3.isSelector(o2.append) ? $3(o2.append) : $3("<span>").html(o2.append);
            token.append(append2);
          }
          element2.append(token);
          that._fireEvent("token-create", {
            token: token[0]
          });
        });
        that._fireEvent("tokenize", {
          tokens: element2.children().items(),
          originalText: this.originalText
        });
      },
      _createStructure: function() {
        var element2 = this.element, o2 = this.options;
        element2.addClass(o2.clsTokenizer);
        this._tokenize();
      },
      tokenize: function(v2) {
        this.originalText = v2;
        this._tokenize();
      },
      destroy: function() {
        this.element.remove();
      }
    });
  })(Metro, Dom);

  // source/components/treeview/treeview.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var TreeViewDefaultConfig = {
      treeviewDeferred: 0,
      showChildCount: false,
      duration: 100,
      hideActionsOnLeave: true,
      onNodeClick: Metro2.noop,
      onNodeDblClick: Metro2.noop,
      onNodeDelete: Metro2.noop,
      onNodeInsert: Metro2.noop,
      onNodeClean: Metro2.noop,
      onCheckClick: Metro2.noop,
      onRadioClick: Metro2.noop,
      onExpandNode: Metro2.noop,
      onCollapseNode: Metro2.noop,
      onTreeViewCreate: Metro2.noop
    };
    Metro2.treeViewSetup = function(options) {
      TreeViewDefaultConfig = $3.extend({}, TreeViewDefaultConfig, options);
    };
    if (typeof globalThis["metroTreeViewSetup"] !== void 0) {
      Metro2.treeViewSetup(globalThis["metroTreeViewSetup"]);
    }
    Metro2.Component("tree-view", {
      init: function(options, elem) {
        this._super(elem, options, TreeViewDefaultConfig);
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element;
        this._createTree();
        this._createEvents();
        $3.each(element2.find("input"), function() {
          if (!$3(this).is(":checked")) return;
          that._recheck(this);
        });
        this._fireEvent("tree-view-create", {
          element: element2
        });
      },
      _createIcon: function(data2) {
        var icon, src;
        src = Utils.isTag(data2) ? $3(data2) : $3("<img src='' alt=''>").attr("src", data2);
        icon = $3("<span>").addClass("icon");
        icon.html(src.outerHTML());
        return icon;
      },
      _createCaption: function(data2, style) {
        const caption2 = $3("<span>").addClass("caption").html(data2);
        if (style) {
          if (Utils.isObject(style)) {
            caption2.css(style);
          } else if (typeof style === "string") {
            caption2[0].style.cssText = style;
          }
        }
        return caption2;
      },
      _createToggle: function() {
        return $3("<span>").addClass("node-toggle");
      },
      _createNode: function(data2, target) {
        const o2 = this.options;
        const nodeContainer = target ? target : $3("<li>");
        const node = $3("<a>");
        nodeContainer.prepend(node);
        if (data2.caption) {
          node.prepend(this._createCaption(data2.caption, data2.style));
        }
        if (data2.icon) {
          node.prepend(this._createIcon(data2.icon));
        }
        if (data2.html) {
          node.append(data2.html);
        }
        if (data2.attributes && Utils.isObject(data2.attributes)) {
          for (let key in data2.attributes) {
            node.attr(`data-${key}`, data2.attributes[key]);
          }
        }
        if (data2.badge) {
          node.append(
            $3("<span>").addClass("badge").html(data2.badge)
          );
        }
        if (data2.badges) {
          $3.each(data2.badges, function(_2, item) {
            node.append(
              $3("<span>").addClass("badge").html(item)
            );
          });
        }
        if (data2.actions) {
          const actionsHolder = $3("<div class='dropdown-button'>").addClass("actions-holder");
          const actionsListTrigger = $3("<span class='actions-list-trigger'>").text("\u22EE").appendTo(actionsHolder);
          const actionsList = $3("<ul data-role='dropdown' class='d-menu actions-list'>").appendTo(actionsHolder);
          nodeContainer.append(actionsHolder);
          for (let a2 of data2.actions) {
            if (a2.type && a2.type === "divider") {
              $3("<li>").addClass("divider").appendTo(actionsList);
            } else {
              const icon = a2.icon ? $3(a2.icon).addClass("icon").outerHTML() : "";
              const caption2 = `<span class="caption">${a2.caption}</span>`;
              const li2 = $3(`<li><a href="#">${icon} ${caption2}</a></li>`).appendTo(actionsList);
              if (a2.cls) {
                li2.addClass(a2.cls);
              }
              li2.find("a").on("click", function() {
                Metro2.utils.exec(a2.onclick, [li2[0]], this);
              });
            }
          }
          actionsList.on(Metro2.events.leave, (e) => {
            if (o2.hideActionsOnLeave) Metro2.getPlugin(actionsList, "dropdown").close();
          });
        }
        if (data2.type === "node") {
          nodeContainer.addClass("tree-node");
          nodeContainer.append($3("<span>").addClass("node-toggle"));
          nodeContainer.append($3("<ul>"));
        }
        if (nodeContainer.children("ul").length) {
          nodeContainer.addClass("tree-node");
          nodeContainer.append($3("<span>").addClass("node-toggle"));
        }
        const hasChildren = nodeContainer.children("ul").length;
        if (hasChildren) {
          if (Metro2.utils.bool(data2.collapsed) !== true) {
            nodeContainer.addClass("expanded");
          } else {
            nodeContainer.children("ul").hide();
          }
        }
        return nodeContainer;
      },
      _createTree: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var nodes = element2.find("li[data-caption]");
        element2.addClass("treeview");
        $3.each(nodes, (i3, _el) => {
          const el = $3(_el);
          this._createNode({
            caption: el.data("caption"),
            icon: el.data("icon"),
            html: el.data("html"),
            attributes: el.data("attributes"),
            badge: el.data("badge"),
            badges: el.data("badges"),
            actions: el.data("actions"),
            type: el.data("type"),
            collapsed: el.data("collapsed")
          }, el);
        });
      },
      _createEvents: function() {
        var that = this, element2 = this.element;
        element2.on(Metro2.events.click, ".node-toggle", function(e) {
          var toggle = $3(this);
          var node = toggle.parent();
          that.toggleNode(node);
          e.preventDefault();
        });
        element2.on(Metro2.events.click, "a", function(e) {
          var node = $3(this).parent();
          that.current(node);
          that._fireEvent("node-click", {
            node: node[0]
          });
          e.preventDefault();
        });
        element2.on(Metro2.events.dblclick, "a", function(e) {
          var node = $3(this).closest("li");
          var toggle = node.children(".node-toggle");
          var subtree = node.children("ul");
          if (toggle.length > 0 || subtree.length > 0) {
            that.toggleNode(node);
          }
          that._fireEvent("node-dbl-click", {
            node: node[0]
          });
          e.preventDefault();
        });
        element2.on(Metro2.events.click, "input[type=radio]", function() {
          var check = $3(this);
          var checked = check.is(":checked");
          var node = check.closest("li");
          that.current(node);
          that._fireEvent("radio-click", {
            checked,
            check: check[0],
            node: node[0]
          });
        });
        element2.on(Metro2.events.click, "input[type=checkbox]", function() {
          var check = $3(this);
          var checked = check.is(":checked");
          var node = check.closest("li");
          that._recheck(check);
          that._fireEvent("check-click", {
            checked,
            check: check[0],
            node: node[0]
          });
        });
      },
      _recheck: function(check) {
        var element2 = this.element;
        var checked, node, checks, all_checks;
        check = $3(check);
        checked = check.is(":checked");
        node = check.closest("li");
        this.current(node);
        checks = check.closest("li").find("ul input[type=checkbox]");
        checks.attr("data-indeterminate", false);
        checks.prop("checked", checked);
        checks.trigger("change");
        all_checks = [];
        $3.each(element2.find("input[type=checkbox]"), function() {
          all_checks.push(this);
        });
        $3.each(all_checks.reverse(), function() {
          var ch = $3(this);
          var children = ch.closest("li").children("ul").find("input[type=checkbox]").length;
          var children_checked = ch.closest("li").children("ul").find("input[type=checkbox]").filter(function(el) {
            return el.checked;
          }).length;
          if (children > 0 && children_checked === 0) {
            ch.attr("data-indeterminate", false);
            ch.prop("checked", false);
            ch.trigger("change");
          }
          if (children_checked === 0) {
            ch.attr("data-indeterminate", false);
          } else {
            if (children_checked > 0 && children > children_checked) {
              ch.attr("data-indeterminate", true);
            } else if (children === children_checked) {
              ch.attr("data-indeterminate", false);
              ch.prop("checked", true);
              ch.trigger("change");
            }
          }
        });
      },
      current: function(node) {
        var element2 = this.element;
        if (!node) {
          return element2.find(".current");
        }
        element2.find(".current").removeClass("current");
        node.addClass("current");
      },
      toggleNode: function(n2) {
        var node = $3(n2);
        var o2 = this.options;
        var func;
        var toBeExpanded = !node.data("collapsed");
        node.toggleClass("expanded");
        node.data("collapsed", toBeExpanded);
        func = toBeExpanded === true ? "slideUp" : "slideDown";
        if (!toBeExpanded) {
          this._fireEvent("expand-node", {
            node: node[0]
          });
        } else {
          this._fireEvent("collapse-node", {
            node: node[0]
          });
        }
        node.children("ul")[func](o2.duration);
      },
      addTo: function(node, data2) {
        var element2 = this.element;
        var target;
        var new_node;
        var toggle;
        if (node === null) {
          target = element2;
        } else {
          node = $3(node);
          target = node.children("ul");
          if (target.length === 0) {
            target = $3("<ul>").appendTo(node);
            toggle = this._createToggle();
            toggle.appendTo(node);
            node.addClass("expanded");
          }
        }
        node.addClass("tree-node");
        new_node = this._createNode(data2);
        new_node.appendTo(target);
        this._fireEvent("node-insert", {
          node: new_node[0],
          parent: node ? node[0] : null
        });
        return new_node;
      },
      insertBefore: function(node, data2) {
        var new_node = this._createNode(data2);
        if (Utils.isNull(node)) {
          return this.addTo(node, data2);
        }
        node = $3(node);
        new_node.insertBefore(node);
        this._fireEvent("node-insert", {
          node: new_node[0],
          parent: node ? node[0] : null
        });
        return new_node;
      },
      insertAfter: function(node, data2) {
        var new_node = this._createNode(data2);
        if (Utils.isNull(node)) {
          return this.addTo(node, data2);
        }
        node = $3(node);
        new_node.insertAfter(node);
        this._fireEvent("node-insert", {
          node: new_node[0],
          parent: node[0]
        });
        return new_node;
      },
      del: function(node) {
        var element2 = this.element;
        node = $3(node);
        var parent_list = node.closest("ul");
        var parent_node = parent_list.closest("li");
        this._fireEvent("node-delete", {
          node: node[0]
        });
        node.remove();
        if (parent_list.children().length === 0 && !parent_list.is(element2)) {
          parent_list.remove();
          parent_node.removeClass("expanded");
          parent_node.children(".node-toggle").remove();
        }
      },
      clean: function(node) {
        node = $3(node);
        node.children("ul").remove();
        node.removeClass("expanded");
        node.children(".node-toggle").remove();
        this._fireEvent("node-clean", {
          node: node[0]
        });
      },
      collapseNode(node) {
        const element2 = this.element, o2 = this.options;
        node = $3(node);
        node.removeClass("expanded");
        node.data("collapsed", true);
        node.children("ul")["slideUp"](o2.duration);
        this._fireEvent("collapse-node", {
          node: node[0]
        });
      },
      expandNode(node) {
        const element2 = this.element, o2 = this.options;
        node = $3(node);
        if (!node.hasClass("tree-node")) {
          return;
        }
        node.addClass("expanded");
        node.data("collapsed", false);
        node.children("ul")["slideDown"](o2.duration);
        this._fireEvent("expand-node", {
          node: node[0]
        });
      },
      collapseAll() {
        const element2 = this.element, o2 = this.options;
        element2.find(".expanded").each((_2, el) => {
          const node = $3(el);
          let func;
          const toBeExpanded = !node.data("collapsed");
          node.toggleClass("expanded");
          node.data("collapsed", toBeExpanded);
          func = toBeExpanded === true ? "slideUp" : "slideDown";
          if (!toBeExpanded) {
            this._fireEvent("expand-node", {
              node: node[0]
            });
          } else {
            this._fireEvent("collapse-node", {
              node: node[0]
            });
          }
          node.children("ul")[func](o2.duration);
        });
        this._fireEvent("collapse-all");
      },
      expandAll() {
        const element2 = this.element, o2 = this.options;
        element2.find(".tree-node:not(.expanded)").each((_2, el) => {
          const node = $3(el);
          let func;
          const toBeExpanded = !node.data("collapsed");
          node.toggleClass("expanded");
          node.data("collapsed", toBeExpanded);
          func = toBeExpanded === true ? "slideUp" : "slideDown";
          if (!toBeExpanded) {
            this._fireEvent("expand-node", {
              node: node[0]
            });
          } else {
            this._fireEvent("collapse-node", {
              node: node[0]
            });
          }
          node.children("ul")[func](o2.duration);
        });
        this._fireEvent("expand-all");
      },
      changeAttribute: function() {
      },
      destroy: function() {
        var element2 = this.element;
        element2.off(Metro2.events.click, ".node-toggle");
        element2.off(Metro2.events.click, "li > .caption");
        element2.off(Metro2.events.dblclick, "li > .caption");
        element2.off(Metro2.events.click, "input[type=radio]");
        element2.off(Metro2.events.click, "input[type=checkbox]");
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/validator/validator.js
  (function(Metro2, $3) {
    "use strict";
    var ValidatorFuncs = {
      required: function(val) {
        return G.safeParse(G.required(), val).ok;
      },
      length: function(val, len) {
        return G.safeParse(G.length(+len), val).ok;
      },
      minlength: function(val, len) {
        return G.safeParse(G.minLength(+len), val).ok;
      },
      maxlength: function(val, len) {
        return G.safeParse(G.maxLength(+len), val).ok;
      },
      min: function(val, min_value) {
        return G.safeParse(G.minValue(+min_value), +val).ok;
      },
      max: function(val, max_value) {
        return G.safeParse(G.maxValue(+max_value), +val).ok;
      },
      email: function(val) {
        return G.safeParse(G.email(), val).ok;
      },
      domain: function(val) {
        return G.safeParse(G.domain(), val).ok;
      },
      url: function(val) {
        return G.safeParse(G.url(), val).ok;
      },
      date: function(val, format, locale) {
        try {
          if (!format) {
            datetime(val);
          } else {
            Datetime.from(val, format, locale);
          }
          return true;
        } catch (e) {
          return false;
        }
      },
      number: function(val) {
        return G.safeParse(G.number(), +val).ok;
      },
      integer: function(val) {
        return G.safeParse(G.integer(), +val).ok;
      },
      safeInteger: function(val) {
        return G.safeParse(G.safeInteger(), +val).ok;
      },
      float: function(val) {
        return G.safeParse(G.float(), +val).ok;
      },
      digits: function(val) {
        return G.safeParse(G.digits(), val).ok;
      },
      hexcolor: function(val) {
        return G.safeParse(G.hexColor(), val).ok;
      },
      color: function(val) {
        if (!Metro2.utils.isValue(val)) return false;
        return Farbe.Palette.color(val, Farbe.StandardColors) || Farbe.Routines.isColor(val);
      },
      pattern: function(val, pat) {
        return G.safeParse(G.pattern(pat), val).ok;
      },
      compare: function(val, val2) {
        return val == val2;
      },
      not: function(val, not_this) {
        return val != not_this;
      },
      notequals: function(val, val2) {
        return val !== val2;
      },
      equals: function(val, val2) {
        return val === val2;
      },
      custom: function(val, func) {
        if (Metro2.utils.isFunc(func) === false) {
          return false;
        }
        return Metro2.utils.exec(func, [val]);
      },
      is_control: function(el) {
        return el.attr("data-role");
      },
      reset_state: function(el) {
        var input2 = $3(el);
        var is_control = ValidatorFuncs.is_control(input2);
        if (is_control) {
          input2.parent().removeClass("invalid valid");
        } else {
          input2.removeClass("invalid valid");
        }
      },
      set_valid_state: function(el) {
        var input2 = $3(el);
        var is_control = ValidatorFuncs.is_control(input2);
        if (is_control) {
          input2.parent().addClass("valid");
        } else {
          input2.addClass("valid");
        }
      },
      set_invalid_state: function(el) {
        var input2 = $3(el);
        var is_control = ValidatorFuncs.is_control(input2);
        if (is_control) {
          input2.parent().addClass("invalid");
        } else {
          input2.addClass("invalid");
        }
      },
      reset: function(form2) {
        var that = this;
        $3.each($3(form2).find("[data-validate]"), function() {
          that.reset_state(this);
        });
        return this;
      },
      validate: function(el, result, cb_ok, cb_error, required_mode) {
        var this_result = true;
        var input2 = $3(el);
        var funcs = input2.data("validate") !== void 0 ? String(input2.data("validate")).split(" ").map(function(s2) {
          return s2.trim();
        }) : [];
        var errors = [];
        var hasForm = input2.closest("form").length > 0;
        var attr_name, radio_checked;
        if (funcs.length === 0) {
          return true;
        }
        this.reset_state(input2);
        if (input2.attr("type") && input2.attr("type").toLowerCase() === "checkbox") {
          if (funcs.indexOf("required") === -1) {
            this_result = true;
          } else {
            this_result = input2.is(":checked");
          }
          if (this_result === false) {
            errors.push("required");
          }
          if (result !== void 0) {
            result.val += this_result ? 0 : 1;
          }
        } else if (input2.attr("type") && input2.attr("type").toLowerCase() === "radio") {
          attr_name = input2.attr("name");
          if (typeof attr_name === void 0) {
            this_result = true;
          } else {
            radio_checked = $3("input[name=" + attr_name.replace("[", "\\[").replace("]", "\\]") + "]:checked");
            this_result = radio_checked.length > 0;
          }
          if (result !== void 0) {
            result.val += this_result ? 0 : 1;
          }
        } else {
          $3.each(funcs, function() {
            if (this_result === false) return;
            var rule = this.split("=");
            var f3, a2, b2;
            f3 = rule[0];
            rule.shift();
            a2 = rule.join("=");
            if (["compare", "not", "equals", "notequals"].indexOf(f3) > -1) {
              a2 = hasForm ? input2[0].form.elements[a2].value : $3("[name=" + a2 + "]").val();
            }
            if (f3 === "date") {
              a2 = input2.attr("data-value-format");
              b2 = input2.attr("data-value-locale");
            }
            if (Metro2.utils.isFunc(ValidatorFuncs[f3]) === false) {
              this_result = true;
            } else {
              if (required_mode === true || f3 === "required") {
                this_result = ValidatorFuncs[f3](input2.val(), a2, b2);
              } else {
                if (input2.val().trim() !== "") {
                  this_result = ValidatorFuncs[f3](input2.val(), a2, b2);
                } else {
                  this_result = true;
                }
              }
            }
            if (this_result === false) {
              errors.push(f3);
            }
            if (result !== void 0) {
              result.val += this_result ? 0 : 1;
            }
          });
        }
        if (this_result === false) {
          this.set_invalid_state(input2);
          if (result !== void 0) {
            result.log.push({
              input: input2[0],
              name: input2.attr("name"),
              value: input2.val(),
              funcs,
              errors
            });
          }
          if (cb_error !== void 0) Metro2.utils.exec(cb_error, [input2, input2.val()], input2[0]);
        } else {
          this.set_valid_state(input2);
          if (cb_ok !== void 0) Metro2.utils.exec(cb_ok, [input2, input2.val()], input2[0]);
        }
        return this_result;
      }
    };
    Metro2["validator"] = ValidatorFuncs;
    var ValidatorDefaultConfig = {
      validatorDeferred: 0,
      submitTimeout: 200,
      interactiveCheck: false,
      clearInvalid: 0,
      requiredMode: true,
      useRequiredClass: true,
      onBeforeSubmit: Metro2.noop_true,
      onSubmit: Metro2.noop,
      onError: Metro2.noop,
      onValidate: Metro2.noop,
      onErrorForm: Metro2.noop,
      onValidateForm: Metro2.noop,
      onValidatorCreate: Metro2.noop
    };
    Metro2.validatorSetup = function(options) {
      ValidatorDefaultConfig = $3.extend({}, ValidatorDefaultConfig, options);
    };
    if (typeof globalThis["metroValidatorSetup"] !== void 0) {
      Metro2.validatorSetup(globalThis["metroValidatorSetup"]);
    }
    Metro2.Component("validator", {
      init: function(options, elem) {
        this._super(elem, options, ValidatorDefaultConfig, {
          _onsubmit: null,
          _onreset: null,
          result: []
        });
        return this;
      },
      _create: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var inputs = element2.find("[data-validate]");
        element2.attr("novalidate", "novalidate");
        $3.each(inputs, function() {
          var input2 = $3(this);
          var funcs = input2.data("validate");
          var required2 = funcs.indexOf("required") > -1;
          if (required2 && o2.useRequiredClass === true) {
            if (ValidatorFuncs.is_control(input2)) {
              input2.parent().addClass("required");
            } else {
              input2.addClass("required");
            }
          }
          if (o2.interactiveCheck === true) {
            input2.on(Metro2.events.inputchange, function() {
              ValidatorFuncs.validate(this, void 0, void 0, void 0, o2.requiredMode);
            });
          }
        });
        this._onsubmit = null;
        this._onreset = null;
        if (element2[0].onsubmit !== null) {
          this._onsubmit = element2[0].onsubmit;
          element2[0].onsubmit = null;
        }
        if (element2[0].onreset !== null) {
          this._onreset = element2[0].onreset;
          element2[0].onreset = null;
        }
        element2[0].onsubmit = function() {
          return that._submit();
        };
        element2[0].onreset = function() {
          return that._reset();
        };
        this._fireEvent("validator-create", {
          element: element2
        });
      },
      _reset: function() {
        ValidatorFuncs.reset(this.element);
        if (this._onreset !== null) Metro2.utils.exec(this._onreset, null, this.element[0]);
      },
      _submit: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var form2 = this.elem;
        var inputs = element2.find("[data-validate]");
        var submit = element2.find("input[type=submit], button[type=submit]");
        var result = {
          val: 0,
          log: []
        };
        var formData = $3.serializeToArray(element2);
        if (submit.length > 0) {
          submit.attr("disabled", "disabled").addClass("disabled");
        }
        $3.each(inputs, function() {
          ValidatorFuncs.validate(this, result, o2.onValidate, o2.onError, o2.requiredMode);
        });
        submit.removeAttr("disabled").removeClass("disabled");
        result.val += Metro2.utils.exec(o2.onBeforeSubmit, [formData], this.elem) === false ? 1 : 0;
        if (result.val === 0) {
          this._fireEvent("validate-form", {
            data: formData
          });
          setTimeout(function() {
            Metro2.utils.exec(o2.onSubmit, [formData], form2);
            element2.fire("formsubmit", {
              data: formData
            });
            if (that._onsubmit !== null) Metro2.utils.exec(that._onsubmit, null, form2);
          }, o2.submitTimeout);
        } else {
          this._fireEvent("error-form", {
            log: result.log,
            data: formData
          });
          if (o2.clearInvalid > 0) {
            setTimeout(function() {
              $3.each(inputs, function() {
                var inp = $3(this);
                if (ValidatorFuncs.is_control(inp)) {
                  inp.parent().removeClass("invalid");
                } else {
                  inp.removeClass("invalid");
                }
              });
            }, o2.clearInvalid);
          }
        }
        return result.val === 0;
      },
      changeAttribute: function() {
      }
    });
  })(Metro, Dom);

  // source/components/vegas/vegas.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var VegasDefaultConfig = {
      duration: 4e3,
      animationDuration: null,
      transitionDuration: null,
      transition: "fade",
      animation: null,
      slides: [],
      shuffle: false,
      align: "center",
      valign: "center",
      loop: true,
      autoplay: true,
      mute: true,
      cover: true,
      preload: true,
      timer: true,
      overlay: 2,
      color: null,
      volume: 1,
      onPlay: Metro2.noop,
      onPause: Metro2.noop,
      onEnd: Metro2.noop,
      onWalk: Metro2.noop,
      onNext: Metro2.noop,
      onPrev: Metro2.noop,
      onJump: Metro2.noop,
      onVegasCreate: Metro2.noop
    };
    Metro2.vegasSetup = function(options) {
      VegasDefaultConfig = $3.extend({}, VegasDefaultConfig, options);
    };
    if (typeof globalThis["metroVegasSetup"] !== void 0) {
      Metro2.vegasSetup(globalThis["metroVegasSetup"]);
    }
    Metro2.Component("vegas", {
      videoCache: {},
      init: function(options, elem) {
        this.transitions = [
          "fade",
          "fade2",
          "slideLeft",
          "slideLeft2",
          "slideRight",
          "slideRight2",
          "slideUp",
          "slideUp2",
          "slideDown",
          "slideDown2",
          "zoomIn",
          "zoomIn2",
          "zoomOut",
          "zoomOut2",
          "swirlLeft",
          "swirlLeft2",
          "swirlRight",
          "swirlRight2"
        ];
        this.animations = [
          "kenburns",
          "kenburnsUp",
          "kenburnsDown",
          "kenburnsRight",
          "kenburnsLeft",
          "kenburnsUpLeft",
          "kenburnsUpRight",
          "kenburnsDownLeft",
          "kenburnsDownRight"
        ];
        this.support = {
          objectFit: "objectFit" in document.body.style,
          video: !/(Android|webOS|Phone|iPad|iPod|BlackBerry|Windows Phone)/i.test(navigator.userAgent)
        };
        this._super(elem, options, VegasDefaultConfig, {
          slide: 0,
          slides: null,
          total: 0,
          noshow: false,
          paused: false,
          ended: false,
          timer: null,
          overlay: null,
          first: true,
          timeout: false
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        this.slides = Utils.isObject(o2.slides) || [];
        this.total = this.slides.length;
        this.noshow = this.total < 2;
        this.paused = !o2.autoplay || this.noshow;
        if (o2.shuffle) {
          this.slides.shuffle();
        }
        if (o2.preload) {
          this._preload();
        }
        this._createStructure();
        this._createEvents();
        this._fireEvent("vegas-create", {
          element: element2
        });
      },
      _createStructure: function() {
        var that = this, element2 = this.element, o2 = this.options;
        var isBody = element2[0].tagName === "BODY";
        var wrapper;
        if (!isBody) {
          element2.css("height", element2.css("height"));
          wrapper = $3('<div class="vegas-wrapper">').css("overflow", element2.css("overflow")).css("padding", element2.css("padding"));
          if (!element2.css("padding")) {
            wrapper.css("padding-top", element2.css("padding-top")).css("padding-bottom", element2.css("padding-bottom")).css("padding-left", element2.css("padding-left")).css("padding-right", element2.css("padding-right"));
          }
          element2.children().appendTo(wrapper);
          element2.clear();
        }
        element2.addClass("vegas-container");
        if (!isBody) {
          element2.append(wrapper);
        }
        if (o2.timer) {
          this.timer = $3('<div class="vegas-timer"><div class="vegas-timer-progress">');
          element2.append(this.timer);
        }
        if (o2.overlay) {
          this.overlay = $3('<div class="vegas-overlay">').addClass("overlay" + (typeof o2.overlay === "boolean" || isNaN(o2.overlay) ? 2 : +o2.overlay));
          element2.append(this.overlay);
        }
        setTimeout(function() {
          Utils.exec(o2.onPlay, null, element2[0]);
          that._goto(that.slide);
        }, 1);
      },
      _createEvents: function() {
      },
      _preload: function() {
        var img2, i3;
        for (i3 = 0; i3 < this.slides.length; i3++) {
          var obj = this.slides[i3];
          if (obj.src) {
            img2 = new Image();
            img2.src = this.slides[i3].src;
          }
          if (obj.video) {
            if (obj.video instanceof Array) {
              this._video(obj.video);
            } else {
              this._video(obj.video.src);
            }
          }
        }
      },
      _slideShow: function() {
        var that = this, o2 = this.options;
        if (this.total > 1 && !this.ended && !this.paused && !this.noshow) {
          this.timeout = setTimeout(function() {
            that.next();
          }, o2.duration);
        }
      },
      _timer: function(state2) {
        var that = this, o2 = this.options;
        clearTimeout(this.timeout);
        if (!this.timer) {
          return;
        }
        this.timer.removeClass("vegas-timer-running").find("div").css("transition-duration", "0ms");
        if (this.ended || this.paused || this.noshow) {
          return;
        }
        if (state2) {
          setTimeout(function() {
            that.timer.addClass("vegas-timer-running").find("div").css("transition-duration", +o2.duration - 100 + "ms");
          }, 100);
        }
      },
      _fadeSoundIn: function(video2, duration) {
        var o2 = this.options;
        $3.animate({
          el: video2,
          draw: {
            volume: +o2.volume
          },
          dur: duration
        });
      },
      _fadeSoundOut: function(video2, duration) {
        $3.animate({
          el: video2,
          draw: {
            volume: 0
          },
          dur: duration
        });
      },
      _video: function(sources) {
        var video2, source2;
        var cacheKey = sources.toString();
        if (this.videoCache[cacheKey]) {
          return this.videoCache[cacheKey];
        }
        if (!Array.isArray(sources)) {
          sources = [sources];
        }
        video2 = document.createElement("video");
        video2.preload = true;
        sources.forEach(function(src) {
          source2 = document.createElement("source");
          source2.src = src;
          video2.appendChild(source2);
        });
        this.videoCache[cacheKey] = video2;
        return video2;
      },
      _goto: function(n2) {
        var that = this, element2 = this.element, o2 = this.options;
        if (typeof this.slides[n2] === "undefined") {
          n2 = 0;
        }
        this.slide = n2;
        var $slide, $inner, video2, img2, $video;
        var slides = element2.children(".vegas-slide");
        var obj = this.slides[n2];
        var cover = o2.cover;
        var transition, animation;
        var transitionDuration, animationDuration;
        if (this.first) {
          this.first = false;
        }
        if (cover !== "repeat") {
          if (cover === true) {
            cover = "cover";
          } else if (cover === false) {
            cover = "contain";
          }
        }
        if (o2.transition === "random") {
          transition = $3.random(this.transitions);
        } else {
          transition = o2.transition ? o2.transition : this.transitions[0];
        }
        if (o2.animation === "random") {
          animation = $3.random(this.animations);
        } else {
          animation = o2.animation ? o2.animation : this.animations[0];
        }
        if (!o2.transitionDuration) {
          transitionDuration = +o2.duration;
        } else if (o2.transitionDuration === "auto" || +o2.transitionDuration > +o2.duration) {
          transitionDuration = +o2.duration;
        } else {
          transitionDuration = +o2.transitionDuration;
        }
        if (!o2.animationDuration) {
          animationDuration = +o2.duration;
        } else if (o2.animationDuration === "auto" || +o2.animationDuration > +o2.duration) {
          animationDuration = +o2.duration;
        } else {
          animationDuration = +o2.animationDuration;
        }
        $slide = $3("<div>").addClass("vegas-slide").addClass("vegas-transition-" + transition);
        if (this.support.video && obj.video) {
          video2 = obj.video instanceof Array ? this._video(obj.video) : this._video(obj.video.src);
          video2.loop = obj.video.loop ? obj.video.loop : o2.loop;
          video2.muted = obj.video.mute ? obj.video.mute : o2.mute;
          if (!video2.muted) {
            this._fadeSoundIn(video2, transitionDuration);
          } else {
            video2.pause();
          }
          $video = $3(video2).addClass("vegas-video").css("background-color", o2.color || "#000000");
          if (this.support.objectFit) {
            $video.css("object-position", o2.align + " " + o2.valign).css("object-fit", cover).css("width", "100%").css("height", "100%");
          } else if (cover === "contain") {
            $video.css("width", "100%").css("height", "100%");
          }
          $slide.append($video);
        } else {
          img2 = new Image();
          $inner = $3("<div>").addClass("vegas-slide-inner").css({
            backgroundImage: 'url("' + obj.src + '")',
            backgroundColor: o2.color || "#000000",
            backgroundPosition: o2.align + " " + o2.valign
          });
          if (cover === "repeat") {
            $inner.css("background-repeat", "repeat");
          } else {
            $inner.css("background-size", cover);
          }
          if (animation) {
            $inner.addClass("vegas-animation-" + animation).css("animation-duration", animationDuration + "ms");
          }
          $slide.append($inner);
        }
        if (slides.length) {
          slides.eq(slides.length - 1).after($slide);
        } else {
          element2.prepend($slide);
        }
        slides.css("transition", "all 0ms").each(
          function() {
            this.className = "vegas-slide";
            if (this.tagName === "VIDEO") {
              this.className += " vegas-video";
            }
            if (transition) {
              this.className += " vegas-transition-" + transition;
              this.className += " vegas-transition-" + transition + "-in";
            }
          }
        );
        this._timer(false);
        function go() {
          that._timer(true);
          setTimeout(function() {
            slides.css("transition", "all " + transitionDuration + "ms").addClass("vegas-transition-" + transition + "-out");
            slides.each(function() {
              var video3 = slides.find("video").get(0);
              if (video3) {
                video3.volume = 1;
                that._fadeSoundOut(video3, transitionDuration);
              }
            });
            $slide.css("transition", "all " + transitionDuration + "ms").addClass("vegas-transition-" + transition + "-in");
            for (var i3 = 0; i3 < slides.length - 1; i3++) {
              slides.eq(i3).remove();
            }
            that._fireEvent("walk", {
              slide: that.current(true)
            });
            that._slideShow();
          }, 100);
        }
        if (video2) {
          if (video2.readyState === 4) {
            video2.currentTime = 0;
          }
          video2.play();
          go();
        } else {
          img2.src = obj.src;
          if (img2.complete) {
            go();
          } else {
            img2.onload = go;
          }
        }
      },
      _end: function() {
        this.ended = this.options.autoplay;
        this._timer(false);
        this._fireEvent("end", {
          slide: this.current(true)
        });
      },
      play: function() {
        if (!this.paused) {
          return;
        }
        this._fireEvent("play", {
          slide: this.current(true)
        });
        this.paused = false;
        this.next();
      },
      pause: function() {
        this._timer(false);
        this.paused = true;
        this._fireEvent("pause", {
          slide: this.current(true)
        });
      },
      toggle: function() {
        this.paused ? this.play() : this.pause();
      },
      playing: function() {
        return !this.paused && !this.noshow;
      },
      current: function(advanced) {
        if (advanced) {
          return {
            slide: this.slide,
            data: this.slides[this.slide]
          };
        }
        return this.slide;
      },
      jump: function(n2) {
        if (n2 <= 0 || n2 > this.slides.length || n2 === this.slide + 1) {
          return this;
        }
        this.slide = n2 - 1;
        this._fireEvent("jump", {
          slide: this.current(true)
        });
        this._goto(this.slide);
      },
      next: function() {
        var o2 = this.options;
        this.slide++;
        if (this.slide >= this.slides.length) {
          if (!o2.loop) {
            return this._end();
          }
          this.slide = 0;
        }
        this._fireEvent("next", {
          slide: this.current(true)
        });
        this._goto(this.slide);
      },
      prev: function() {
        var o2 = this.options;
        this.slide--;
        if (this.slide < 0) {
          if (!o2.loop) {
            this.slide++;
            return this._end();
          }
          this.slide = this.slides.length - 1;
        }
        this._fireEvent("prev", {
          slide: this.current(true)
        });
        this._goto(this.slide);
      },
      changeAttribute: function(attr) {
        var element2 = this.element, o2 = this.options;
        var propName = Str.camelCase(attr.replace("data-", ""));
        if (propName === "slides") {
          o2.slides = element2.attr("data-slides");
          this.slides = Utils.isObject(o2.slides) || [];
          this.total = this.slides.length;
          this.noshow = this.total < 2;
          this.paused = !this.options.autoplay || this.noshow;
        } else {
          if (typeof VegasDefaultConfig[propName] !== "undefined")
            o2[propName] = JSON.parse(element2.attr(attr));
        }
      },
      destroy: function() {
        var element2 = this.element, o2 = this.options;
        clearTimeout(this.timeout);
        element2.removeClass("vegas-container");
        element2.find("> .vegas-slide").remove();
        element2.find("> .vegas-wrapper").children().appendTo(element2);
        element2.find("> .vegas-wrapper").remove();
        if (o2.timer) {
          this.timer.remove();
        }
        if (o2.overlay) {
          this.overlay.remove();
        }
        return element2[0];
      }
    });
  })(Metro, Dom);

  // source/components/video-player/video-player.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var VideoPlayerDefaultConfig = {
      videoDeferred: 0,
      src: null,
      poster: "",
      logo: "",
      logoHeight: 32,
      logoWidth: "auto",
      logoTarget: "",
      volume: 0.5,
      loop: false,
      autoplay: false,
      fullScreenMode: Metro2.fullScreenMode.DESKTOP,
      aspectRatio: Metro2.aspectRatio.HD,
      controlsHide: 3e3,
      showLoop: true,
      showPlay: true,
      showStop: true,
      showMute: true,
      showFull: true,
      showStream: true,
      showVolume: true,
      showInfo: true,
      loopIcon: "\u{1F501}",
      stopIcon: "\u23F9",
      playIcon: "\u25B6",
      pauseIcon: "\u23F8",
      muteIcon: "\u{1F507}",
      volumeLowIcon: "\u{1F508}",
      volumeMediumIcon: "\u{1F509}",
      volumeHighIcon: "\u{1F50A}",
      screenMoreIcon: "\u2B1C",
      screenLessIcon: "\u2B1A",
      onPlay: Metro2.noop,
      onPause: Metro2.noop,
      onStop: Metro2.noop,
      onEnd: Metro2.noop,
      onMetadata: Metro2.noop,
      onTime: Metro2.noop,
      onVideoPlayerCreate: Metro2.noop
    };
    Metro2.videoPlayerSetup = function(options) {
      VideoPlayerDefaultConfig = $3.extend({}, VideoPlayerDefaultConfig, options);
    };
    if (typeof globalThis["metroVideoPlayerSetup"] !== void 0) {
      Metro2.videoPlayerSetup(globalThis["metroVideoPlayerSetup"]);
    }
    Metro2.Component("video-player", {
      init: function(options, elem) {
        this._super(elem, options, VideoPlayerDefaultConfig, {
          fullscreen: false,
          preloader: null,
          player: null,
          video: elem,
          stream: null,
          volume: null,
          volumeBackup: 0,
          muted: false,
          fullScreenInterval: false,
          isPlaying: false,
          id: Utils.elementId("video-player")
        });
        return this;
      },
      _create: function() {
        var element2 = this.element, o2 = this.options;
        if (Metro2.fullScreenEnabled === false) {
          o2.fullScreenMode = Metro2.fullScreenMode.WINDOW;
        }
        this._createPlayer();
        this._createControls();
        this._createEvents();
        this._setAspectRatio();
        if (o2.autoplay === true) {
          this.play();
        }
        this._fireEvent("video-player-create", {
          element: element2,
          player: this.player
        });
      },
      _createPlayer: function() {
        var element2 = this.element, o2 = this.options, video2 = this.video;
        var player = $3("<div>").addClass("media-player video-player " + element2[0].className);
        var preloader = $3("<div>").addClass("preloader").appendTo(player);
        var logo = $3("<a>").attr("href", o2.logoTarget).addClass("logo").appendTo(player);
        player.insertBefore(element2);
        element2.appendTo(player);
        $3.each(["muted", "autoplay", "controls", "height", "width", "loop", "poster", "preload"], function() {
          element2.removeAttr(this);
        });
        element2.attr("preload", "auto");
        if (o2.poster !== "") {
          element2.attr("poster", o2.poster);
        }
        video2.volume = o2.volume;
        preloader.activity({
          type: "cycle",
          style: "color"
        });
        preloader.hide();
        this.preloader = preloader;
        if (o2.logo !== "") {
          $3("<img>").css({
            height: o2.logoHeight,
            width: o2.logoWidth
          }).attr("src", o2.logo).appendTo(logo);
        }
        if (o2.src !== null) {
          this._setSource(o2.src);
        }
        element2[0].className = "";
        this.player = player;
      },
      _setSource: function(src) {
        var element2 = this.element;
        element2.find("source").remove();
        element2.removeAttr("src");
        if (Array.isArray(src)) {
          $3.each(src, function() {
            var item = this;
            if (item.src === void 0) return;
            $3("<source>").attr("src", item.src).attr("type", item.type !== void 0 ? item.type : "").appendTo(element2);
          });
        } else {
          element2.attr("src", src);
        }
      },
      _createControls: function() {
        var that = this, element2 = this.element, o2 = this.options, video2 = this.elem;
        var controls = $3("<div>").addClass("controls").addClass(o2.clsControls).insertAfter(element2);
        var stream = $3("<div>").addClass("stream").appendTo(controls);
        var streamSlider = $3("<input>").addClass("stream-slider ultra-thin cycle-marker").appendTo(stream);
        var volume = $3("<div>").addClass("volume").appendTo(controls);
        var volumeSlider = $3("<input>").addClass("volume-slider ultra-thin cycle-marker").appendTo(volume);
        var infoBox = $3("<div>").addClass("info-box").appendTo(controls);
        if (o2.showInfo !== true) {
          infoBox.hide();
        }
        Metro2.makePlugin(streamSlider, "slider", {
          clsMarker: "bg-red",
          clsHint: "bg-cyan fg-white",
          clsComplete: "bg-cyan",
          hint: true,
          onStart: function() {
            if (!video2.paused) video2.pause();
          },
          onStop: function(val) {
            if (video2.seekable.length > 0) {
              video2.currentTime = (that.duration * val / 100).toFixed(0);
            }
            if (video2.paused && video2.currentTime > 0) {
              video2.play();
            }
          }
        });
        this.stream = streamSlider;
        if (o2.showStream !== true) {
          stream.hide();
        }
        Metro2.makePlugin(volumeSlider, "slider", {
          clsMarker: "bg-red",
          clsHint: "bg-cyan fg-white",
          hint: true,
          value: o2.volume * 100,
          onChangeValue: function(val) {
            video2.volume = val / 100;
          }
        });
        this.volume = volumeSlider;
        if (o2.showVolume !== true) {
          volume.hide();
        }
        var loop;
        if (o2.showLoop === true) loop = $3("<button>").attr("type", "button").addClass("button square loop").html(o2.loopIcon).appendTo(controls);
        if (o2.showPlay === true) $3("<button>").attr("type", "button").addClass("button square play").html(o2.playIcon).appendTo(controls);
        if (o2.showStop === true) $3("<button>").attr("type", "button").addClass("button square stop").html(o2.stopIcon).appendTo(controls);
        if (o2.showMute === true) $3("<button>").attr("type", "button").addClass("button square mute").html(o2.muteIcon).appendTo(controls);
        if (o2.showFull === true) $3("<button>").attr("type", "button").addClass("button square full").html(o2.screenMoreIcon).appendTo(controls);
        if (o2.loop === true) {
          loop.addClass("active");
          element2.attr("loop", "loop");
        }
        this._setVolume();
        if (o2.muted) {
          that.volumeBackup = video2.volume;
          Metro2.getPlugin(that.volume, "slider").val(0);
          video2.volume = 0;
        }
        infoBox.html("00:00 / 00:00");
      },
      _createEvents: function() {
        var that = this, element2 = this.element, o2 = this.options, video2 = this.elem, player = this.player;
        element2.on("loadstart", function() {
          that.preloader.show();
        });
        element2.on("loadedmetadata", function() {
          that.duration = video2.duration.toFixed(0);
          that._setInfo(0, that.duration);
          Utils.exec(o2.onMetadata, [video2, player], element2[0]);
        });
        element2.on("canplay", function() {
          that._setBuffer();
          that.preloader.hide();
        });
        element2.on("progress", function() {
          that._setBuffer();
        });
        element2.on("timeupdate", function() {
          var position = Math.round(video2.currentTime * 100 / that.duration);
          that._setInfo(video2.currentTime, that.duration);
          Metro2.getPlugin(that.stream, "slider").val(position);
          Utils.exec(o2.onTime, [video2.currentTime, that.duration, video2, player], element2[0]);
        });
        element2.on("waiting", function() {
          that.preloader.show();
        });
        element2.on("loadeddata", function() {
        });
        element2.on("play", function() {
          player.find(".play").html(o2.pauseIcon);
          Utils.exec(o2.onPlay, [video2, player], element2[0]);
          that._onMouse();
        });
        element2.on("pause", function() {
          player.find(".play").html(o2.playIcon);
          Utils.exec(o2.onPause, [video2, player], element2[0]);
          that._offMouse();
        });
        element2.on("stop", function() {
          Metro2.getPlugin(that.stream, "slider").val(0);
          Utils.exec(o2.onStop, [video2, player], element2[0]);
          that._offMouse();
        });
        element2.on("ended", function() {
          Metro2.getPlugin(that.stream, "slider").val(0);
          Utils.exec(o2.onEnd, [video2, player], element2[0]);
          that._offMouse();
        });
        element2.on("volumechange", function() {
          that._setVolume();
        });
        player.on(Metro2.events.click, ".play", function() {
          if (video2.paused) {
            that.play();
          } else {
            that.pause();
          }
        });
        player.on(Metro2.events.click, ".stop", function() {
          that.stop();
        });
        player.on(Metro2.events.click, ".mute", function() {
          that._toggleMute();
        });
        player.on(Metro2.events.click, ".loop", function() {
          that._toggleLoop();
        });
        player.on(Metro2.events.click, ".full", function() {
          that.fullscreen = !that.fullscreen;
          player.find(".full").html(that.fullscreen === true ? o2.screenLessIcon : o2.screenMoreIcon);
          if (o2.fullScreenMode === Metro2.fullScreenMode.WINDOW) {
            if (that.fullscreen === true) {
              player.addClass("full-screen");
            } else {
              player.removeClass("full-screen");
            }
          } else {
            if (that.fullscreen === true) {
              Metro2.requestFullScreen(video2);
              if (that.fullScreenInterval === false) that.fullScreenInterval = setInterval(function() {
                if (Metro2.inFullScreen() === false) {
                  that.fullscreen = false;
                  clearInterval(that.fullScreenInterval);
                  that.fullScreenInterval = false;
                  player.find(".full").html(o2.screenMoreIcon);
                }
              }, 1e3);
            } else {
              Metro2.exitFullScreen();
            }
          }
        });
        $3(globalThis).on(Metro2.events.keyup, function(e) {
          if (that.fullscreen && e.keyCode === 27) {
            player.find(".full").click();
          }
        }, { ns: this.id });
        $3(globalThis).on(Metro2.events.resize, function() {
          that._setAspectRatio();
        }, { ns: this.id });
      },
      _onMouse: function() {
        var o2 = this.options, player = this.player;
        player.on(Metro2.events.enter, function() {
          var controls = player.find(".controls");
          if (o2.controlsHide > 0 && controls.style("display") === "none") {
            controls.stop(true).fadeIn(500, function() {
              controls.css("display", "flex");
            });
          }
        });
        player.on(Metro2.events.leave, function() {
          var controls = player.find(".controls");
          if (o2.controlsHide > 0 && parseInt(controls.style("opacity")) === 1) {
            setTimeout(function() {
              controls.stop(true).fadeOut(500);
            }, o2.controlsHide);
          }
        });
      },
      _offMouse: function() {
        var player = this.player, o2 = this.options;
        var controls = player.find(".controls");
        player.off(Metro2.events.enter);
        player.off(Metro2.events.leave);
        if (o2.controlsHide > 0 && controls.style("display") === "none") {
          controls.stop(true).fadeIn(500, function() {
            controls.css("display", "flex");
          });
        }
      },
      _toggleLoop: function() {
        var loop = this.player.find(".loop");
        if (loop.length === 0) return;
        loop.toggleClass("active");
        if (loop.hasClass("active")) {
          this.element.attr("loop", "loop");
        } else {
          this.element.removeAttr("loop");
        }
      },
      _toggleMute: function() {
        this.muted = !this.muted;
        if (this.muted === false) {
          this.video.volume = this.volumeBackup;
        } else {
          this.volumeBackup = this.video.volume;
          this.video.volume = 0;
        }
        Metro2.getPlugin(this.volume, "slider").val(this.muted === false ? this.volumeBackup * 100 : 0);
      },
      _setInfo: function(a2, b2) {
        this.player.find(".info-box").html(Utils.secondsToFormattedString(Math.round(a2)) + " / " + Utils.secondsToFormattedString(Math.round(b2)));
      },
      _setBuffer: function() {
        var buffer = this.video.buffered.length ? Math.round(Math.floor(this.video.buffered.end(0)) / Math.floor(this.video.duration) * 100) : 0;
        Metro2.getPlugin(this.stream, "slider").buff(buffer);
      },
      _setVolume: function() {
        var video2 = this.video, player = this.player, o2 = this.options;
        var volumeButton = player.find(".mute");
        var volume = video2.volume * 100;
        if (volume > 1 && volume < 30) {
          volumeButton.html(o2.volumeLowIcon);
        } else if (volume >= 30 && volume < 60) {
          volumeButton.html(o2.volumeMediumIcon);
        } else if (volume >= 60 && volume <= 100) {
          volumeButton.html(o2.volumeHighIcon);
        } else {
          volumeButton.html(o2.muteIcon);
        }
      },
      _setAspectRatio: function() {
        var player = this.player, o2 = this.options;
        var width = player.outerWidth();
        var height;
        switch (o2.aspectRatio) {
          case Metro2.aspectRatio.SD:
            height = Utils.aspectRatioH(width, "4/3");
            break;
          case Metro2.aspectRatio.CINEMA:
            height = Utils.aspectRatioH(width, "21/9");
            break;
          default:
            height = Utils.aspectRatioH(width, "16/9");
        }
        player.outerHeight(height);
      },
      aspectRatio: function(ratio) {
        this.options.aspectRatio = ratio;
        this._setAspectRatio();
      },
      play: function(src) {
        if (src !== void 0) {
          this._setSource(src);
        }
        if (this.element.attr("src") === void 0 && this.element.find("source").length === 0) {
          return;
        }
        this.isPlaying = true;
        this.video.play();
      },
      pause: function() {
        this.isPlaying = false;
        this.video.pause();
      },
      resume: function() {
        if (this.video.paused) {
          this.play();
        }
      },
      stop: function() {
        this.isPlaying = false;
        this.video.pause();
        this.video.currentTime = 0;
        Metro2.getPlugin(this.stream, "slider").val(0);
        this._offMouse();
      },
      setVolume: function(v2) {
        if (v2 === void 0) {
          return this.video.volume;
        }
        if (v2 > 1) {
          v2 /= 100;
        }
        this.video.volume = v2;
        Metro2.getPlugin(this.volume[0], "slider").val(v2 * 100);
      },
      loop: function() {
        this._toggleLoop();
      },
      mute: function() {
        this._toggleMute();
      },
      changeAspectRatio: function() {
        this.options.aspectRatio = this.element.attr("data-aspect-ratio");
        this._setAspectRatio();
      },
      changeSource: function() {
        var src = JSON.parse(this.element.attr("data-src"));
        this.play(src);
      },
      changeVolume: function() {
        var volume = this.element.attr("data-volume");
        this.setVolume(volume);
      },
      changeAttribute: function(attributeName) {
        switch (attributeName) {
          case "data-aspect-ratio":
            this.changeAspectRatio();
            break;
          case "data-src":
            this.changeSource();
            break;
          case "data-volume":
            this.changeVolume();
            break;
        }
      },
      destroy: function() {
        var element2 = this.element, player = this.player;
        Metro2.getPlugin(this.stream, "slider").destroy();
        Metro2.getPlugin(this.volume, "slider").destroy();
        element2.off("loadstart");
        element2.off("loadedmetadata");
        element2.off("canplay");
        element2.off("progress");
        element2.off("timeupdate");
        element2.off("waiting");
        element2.off("loadeddata");
        element2.off("play");
        element2.off("pause");
        element2.off("stop");
        element2.off("ended");
        element2.off("volumechange");
        player.off(Metro2.events.click, ".play");
        player.off(Metro2.events.click, ".stop");
        player.off(Metro2.events.click, ".mute");
        player.off(Metro2.events.click, ".loop");
        player.off(Metro2.events.click, ".full");
        $3(globalThis).off(Metro2.events.keyup, { ns: this.id });
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/viewport-check/viewport-check.js
  (function(Metro2, $3) {
    "use strict";
    var Utils = Metro2.utils;
    var ViewportCheckDefaultConfig = {
      onViewport: Metro2.noop,
      onViewportEnter: Metro2.noop,
      onViewportLeave: Metro2.noop,
      onViewportCheckCreate: Metro2.noop
    };
    Metro2.viewportCheckSetup = function(options) {
      ViewportCheckDefaultConfig = $3.extend({}, ViewportCheckDefaultConfig, options);
    };
    if (typeof globalThis["metroViewportCheckSetup"] !== void 0) {
      Metro2.viewportCheckSetup(globalThis["metroViewportCheckSetup"]);
    }
    Metro2.Component("viewport-check", {
      init: function(options, elem) {
        this._super(elem, options, ViewportCheckDefaultConfig, {
          // define instance vars here
          inViewport: false,
          id: Utils.elementId("viewport-check")
        });
        return this;
      },
      _create: function() {
        this.inViewport = Utils.inViewport(this.elem);
        this._createEvents();
        this._fireEvent("viewport-check-create");
      },
      _createEvents: function() {
        var that = this, elem = this.elem;
        $3(globalThis).on(Metro2.events.scroll, function() {
          var oldState = that.inViewport;
          that.inViewport = Utils.inViewport(elem);
          if (oldState !== that.inViewport) {
            if (that.inViewport) {
              that._fireEvent("viewport-enter");
            } else {
              that._fireEvent("viewport-leave");
            }
          }
          that._fireEvent("viewport", {
            state: that.inViewport
          });
        }, { ns: that.id });
      },
      state: function() {
        return this.inViewport;
      },
      destroy: function() {
        $3(globalThis).off(Metro2.events.scroll, { ns: this.id });
        return this.element;
      }
    });
  })(Metro, Dom);

  // source/components/window/window.js
  (function(Metro2, $3) {
    "use strict";
    let WindowDefaultConfig = {
      _runtime: false,
      windowDeferred: 0,
      hidden: false,
      width: "auto",
      height: "auto",
      btnClose: true,
      btnMin: true,
      btnMax: true,
      draggable: true,
      dragElement: ".window-caption .title",
      dragArea: "parent",
      shadow: false,
      icon: "",
      title: "Window",
      content: null,
      resizable: true,
      overlay: false,
      overlayColor: "transparent",
      overlayAlpha: 0.5,
      modal: false,
      position: "absolute",
      checkEmbed: true,
      top: "auto",
      left: "auto",
      place: "auto",
      closeAction: Metro2.actions.HIDE,
      customButtons: null,
      status: "",
      canClose: true,
      canMaximize: true,
      canMinimize: true,
      clsCustomButton: "",
      clsCaption: "",
      clsContent: "",
      clsWindow: "",
      minWidth: 0,
      minHeight: 0,
      maxWidth: 0,
      maxHeight: 0,
      onDragStart: Metro2.noop,
      onDragStop: Metro2.noop,
      onDragMove: Metro2.noop,
      onWindowClick: Metro2.noop,
      onCaptionClick: Metro2.noop,
      onCaptionDblClick: Metro2.noop,
      onCloseClick: Metro2.noop,
      onMaxClick: Metro2.noop,
      onMinClick: Metro2.noop,
      onResizeStart: Metro2.noop,
      onResizeStop: Metro2.noop,
      onResize: Metro2.noop,
      onWindowCreate: Metro2.noop,
      onShow: Metro2.noop,
      onWindowDestroy: Metro2.noop,
      onCanClose: Metro2.noop_true,
      onMinimize: Metro2.noop,
      onMaximize: Metro2.noop,
      onClose: Metro2.noop
    };
    Metro2.windowSetup = function(options) {
      WindowDefaultConfig = $3.extend({}, WindowDefaultConfig, options);
    };
    if (typeof globalThis["metroWindowSetup"] !== void 0) {
      Metro2.windowSetup(globalThis["metroWindowSetup"]);
    }
    Metro2.Component("window", {
      init: function(options, elem) {
        this._super(elem, options, WindowDefaultConfig, {
          win: null,
          overlay: null,
          position: {
            top: 0,
            left: 0
          },
          hidden: false,
          content: null
        });
        return this;
      },
      _create: function() {
        const that = this, element2 = this.element, o2 = this.options;
        let win, overlay;
        const parent2 = o2.dragArea === "parent" ? element2.parent() : $3(o2.dragArea);
        let _content;
        if (o2.modal === true) {
          o2.btnMax = false;
          o2.btnMin = false;
          o2.resizable = false;
        }
        if (Metro2.utils.isNull(o2.content)) {
          o2.content = element2;
        } else {
          if (Metro2.utils.isUrl(o2.content) && Metro2.utils.isVideoUrl(o2.content)) {
            o2.content = Metro2.utils.embedUrl(o2.content);
            element2.css({
              height: "100%"
            });
          } else if (!Metro2.utils.isQ(o2.content) && Metro2.utils.isFunc(o2.content)) {
            o2.content = Metro2.utils.exec(o2.content);
          }
          _content = $3(o2.content);
          if (_content.length === 0) {
            element2.appendText(o2.content);
          } else {
            element2.append(_content);
          }
          o2.content = element2;
        }
        if (o2._runtime === true) {
          this._runtime(element2, "window");
        }
        win = this._window(o2);
        win.addClass("no-visible");
        parent2.append(win);
        if (o2.overlay === true) {
          overlay = this._overlay();
          overlay.appendTo(win.parent());
          this.overlay = overlay;
        }
        this.win = win;
        this._fireEvent("window-create", {
          win: this.win[0],
          element: element2
        });
        setTimeout(function() {
          that._setPosition();
          if (o2.hidden !== true) {
            that.win.removeClass("no-visible");
          }
          that._fireEvent("show", {
            win: that.win[0],
            element: element2
          });
        }, 100);
      },
      _setPosition: function() {
        const o2 = this.options;
        const win = this.win;
        const parent2 = o2.dragArea === "parent" ? win.parent() : $3(o2.dragArea);
        const top_center = parent2.height() / 2 - win[0].offsetHeight / 2;
        const left_center = parent2.width() / 2 - win[0].offsetWidth / 2;
        let top, left, right, bottom;
        if (o2.place !== "auto") {
          switch (o2.place.toLowerCase()) {
            case "top-left":
              top = 0;
              left = 0;
              right = "auto";
              bottom = "auto";
              break;
            case "top-center":
              top = 0;
              left = left_center;
              right = "auto";
              bottom = "auto";
              break;
            case "top-right":
              top = 0;
              right = 0;
              left = "auto";
              bottom = "auto";
              break;
            case "right-center":
              top = top_center;
              right = 0;
              left = "auto";
              bottom = "auto";
              break;
            case "bottom-right":
              bottom = 0;
              right = 0;
              left = "auto";
              top = "auto";
              break;
            case "bottom-center":
              bottom = 0;
              left = left_center;
              right = "auto";
              top = "auto";
              break;
            case "bottom-left":
              bottom = 0;
              left = 0;
              right = "auto";
              top = "auto";
              break;
            case "left-center":
              top = top_center;
              left = 0;
              right = "auto";
              bottom = "auto";
              break;
            default:
              top = top_center;
              left = left_center;
              bottom = "auto";
              right = "auto";
          }
          win.css({
            top,
            left,
            bottom,
            right
          });
        }
      },
      _window: function(o2) {
        const that = this;
        let win, caption2, content, icon, title3, buttons, btnClose, btnMin, btnMax, resizer, status;
        let width = o2.width, height = o2.height;
        win = $3("<div>").addClass("window");
        if (o2.modal === true) {
          win.addClass("modal");
        }
        caption2 = $3("<div>").addClass("window-caption");
        content = $3("<div>").addClass("window-content");
        win.append(caption2);
        win.append(content);
        if (o2.status || o2.resizable) {
          status = $3("<div>").addClass("window-status").html(o2.status);
          win.append(status);
        }
        if (o2.shadow === true) {
          win.addClass("shadowed");
        }
        if (Metro2.utils.isValue(o2.icon)) {
          icon = $3("<span>").addClass("icon").html(o2.icon);
          icon.appendTo(caption2);
        }
        title3 = $3("<span>").addClass("title").html(Metro2.utils.isValue(o2.title) ? o2.title : "&nbsp;");
        title3.appendTo(caption2);
        if (!Metro2.utils.isNull(o2.content)) {
          if (Metro2.utils.isQ(o2.content)) {
            o2.content.appendTo(content);
          } else {
            content.html(o2.content);
          }
        }
        buttons = $3("<div>").addClass("buttons");
        buttons.appendTo(caption2);
        if (o2.btnMax === true) {
          btnMax = $3("<span>").addClass("button small square btn-max sys-button");
          btnMax.appendTo(buttons);
        }
        if (o2.btnMin === true) {
          btnMin = $3("<span>").addClass("button small square btn-min sys-button");
          btnMin.appendTo(buttons);
        }
        if (o2.btnClose === true) {
          btnClose = $3("<span>").addClass("button small square btn-close sys-button");
          btnClose.appendTo(buttons);
        }
        if (o2.customButtons) {
          let customButtons = Metro2.utils.isObject(o2.customButtons);
          if (customButtons) {
            $3.each(customButtons, function() {
              const item = this;
              const customButton = $3("<span>");
              customButton.addClass("button btn-custom").addClass(o2.clsCustomButton).addClass(item.cls).attr("tabindex", -1).html(item.html);
              if (item.attr && typeof item.attr === "object") {
                $3.each(item.attr, function(k2, v2) {
                  customButton.attr(Str.dashedName(k2), v2);
                });
              }
              customButton.data("action", item.onclick);
              buttons.prepend(customButton);
            });
          }
        }
        caption2.on(Metro2.events.click, ".btn-custom", function(e) {
          if (Metro2.utils.isRightMouse(e)) return;
          const button2 = $3(this);
          const action = button2.data("action");
          Metro2.utils.exec(action, [button2], this);
        });
        win.attr("id", o2.id === void 0 ? Metro2.utils.elementId("window") : o2.id);
        win.on(Metro2.events.startAll, ".window-caption", function(e) {
          that._fireEvent("caption-click", {
            win: win[0],
            e
          });
        });
        win.on(Metro2.events.dblclick, ".window-caption", function(e) {
          that.maximize(e);
        });
        caption2.on(Metro2.events.click, ".btn-max, .btn-min, .btn-close", function(e) {
          if (Metro2.utils.isRightMouse(e)) return;
          const target = $3(e.target);
          if (target.hasClass("btn-max") && o2.canMaximize) that.maximize(e);
          if (target.hasClass("btn-min") && o2.canMinimize) that.minimize(e);
          if (target.hasClass("btn-close") && o2.canClose) that.close(e);
        });
        win.on(Metro2.events.click, function(e) {
          that._fireEvent("window-click", {
            win: win[0],
            e
          });
        });
        if (o2.draggable === true) {
          Metro2.makePlugin(win, "draggable", {
            dragContext: win[0],
            dragElement: caption2,
            dragArea: o2.dragArea,
            onDragStart: o2.onDragStart,
            onDragStop: o2.onDragStop,
            onDragMove: o2.onDragMove
          });
        }
        win.addClass(o2.clsWindow);
        caption2.addClass(o2.clsCaption);
        content.addClass(o2.clsContent);
        if (o2.minWidth === 0) {
          o2.minWidth = 34;
          $3.each(buttons.children(".btn-custom"), function() {
            o2.minWidth += Metro2.utils.hiddenElementSize(this).width;
          });
          if (o2.btnMax) o2.minWidth += 34;
          if (o2.btnMin) o2.minWidth += 34;
          if (o2.btnClose) o2.minWidth += 34;
        }
        if (o2.minWidth > 0 && !isNaN(o2.width) && o2.width < o2.minWidth) {
          width = o2.minWidth;
        }
        if (o2.minHeight > 0 && !isNaN(o2.height) && o2.height > o2.minHeight) {
          height = o2.minHeight;
        }
        if (o2.resizable) {
          resizer = $3("<span>").addClass("resize-element");
          resizer.appendTo(win);
          win.addClass("resizable");
          Metro2.makePlugin(win, "resizable", {
            minWidth: o2.minWidth,
            minHeight: o2.minHeight,
            maxWidth: o2.maxWidth,
            maxHeight: o2.maxHeight,
            resizeElement: ".resize-element",
            onResizeStart: o2.onResizeStart,
            onResizeStop: o2.onResizeStop,
            onResize: o2.onResize
          });
        }
        win.css({
          width,
          height,
          position: o2.position,
          top: o2.top,
          left: o2.left
        });
        return win;
      },
      _overlay: function() {
        const o2 = this.options;
        const overlay = $3("<div>");
        overlay.addClass("overlay");
        if (o2.overlayColor === "transparent") {
          overlay.addClass("transparent");
        } else {
          overlay.css({
            background: Farbe.Routines.toRGBA(Farbe.Routines.parse(o2.overlayColor), o2.overlayAlpha)
          });
        }
        return overlay;
      },
      width: function(v2) {
        const win = this.win;
        if (!Metro2.utils.isValue(v2)) {
          return win.width();
        }
        win.css("width", parseInt(v2));
        return this;
      },
      height: function(v2) {
        const win = this.win;
        if (!Metro2.utils.isValue(v2)) {
          return win.height();
        }
        win.css("height", parseInt(v2));
        return this;
      },
      maximize: function(e) {
        const win = this.win, o2 = this.options;
        const target = $3(e.target);
        if (o2.btnMax) {
          win.removeClass("minimized");
          win.toggleClass("maximized");
        }
        if (target.hasClass && target.hasClass("title")) {
          this._fireEvent("caption-dbl-click", {
            win: win[0]
          });
        } else {
          this._fireEvent("max-click", {
            win: win[0]
          });
        }
        this._fireEvent("maximize", {
          win: win[0]
        });
      },
      minimize: function() {
        const win = this.win, o2 = this.options;
        if (o2.btnMin) {
          win.removeClass("maximized");
          win.toggleClass("minimized");
        }
        this._fireEvent("min-click", {
          win: win[0]
        });
        this._fireEvent("minimize", {
          win: win[0]
        });
      },
      close: function() {
        const that = this, win = this.win, o2 = this.options;
        if (Metro2.utils.exec(o2.onCanClose, [win]) === false) {
          return false;
        }
        let timeout = 0;
        if (o2.onClose !== Metro2.noop) {
          timeout = 500;
        }
        this._fireEvent("close", {
          win: win[0]
        });
        setTimeout(function() {
          if (o2.modal === true) {
            win.siblings(".overlay").remove();
          }
          that._fireEvent("close-click", {
            win: win[0]
          });
          if (o2.closeAction === Metro2.actions.REMOVE) {
            that._fireEvent("window-destroy", {
              win: win[0]
            });
            win.remove();
          } else {
            that.hide();
          }
        }, timeout);
      },
      hide: function() {
        const win = this.win;
        win.css({
          display: "none"
        });
        this._fireEvent("hide", {
          win: win[0]
        });
      },
      show: function() {
        const win = this.win;
        win.removeClass("no-visible").css({
          display: "flex"
        });
        this._fireEvent("show", {
          win: win[0]
        });
      },
      toggle: function() {
        if (this.win.css("display") === "none" || this.win.hasClass("no-visible")) {
          this.show();
        } else {
          this.hide();
        }
      },
      isOpen: function() {
        return this.win.hasClass("no-visible");
      },
      min: function(a2) {
        a2 ? this.win.addClass("minimized") : this.win.removeClass("minimized");
      },
      max: function(a2) {
        a2 ? this.win.addClass("maximized") : this.win.removeClass("maximized");
      },
      changeClass: function(a2) {
        const element2 = this.element, win = this.win, o2 = this.options;
        if (a2 === "data-cls-window") {
          win[0].className = "window " + (o2.resizable ? " resizable " : " ") + element2.attr("data-cls-window");
        }
        if (a2 === "data-cls-caption") {
          win.find(".window-caption")[0].className = "window-caption " + element2.attr("data-cls-caption");
        }
        if (a2 === "data-cls-content") {
          win.find(".window-content")[0].className = "window-content " + element2.attr("data-cls-content");
        }
      },
      toggleShadow: function() {
        const element2 = this.element, win = this.win;
        const flag = JSON.parse(element2.attr("data-shadow"));
        if (flag === true) {
          win.addClass("win-shadow");
        } else {
          win.removeClass("win-shadow");
        }
      },
      setContent: function(c) {
        const element2 = this.element, win = this.win;
        const content = Metro2.utils.isValue(c) ? c : element2.attr("data-content");
        let result;
        if (!Metro2.utils.isQ(content) && Metro2.utils.isFunc(content)) {
          result = Metro2.utils.exec(content);
        } else if (Metro2.utils.isQ(content)) {
          result = content.html();
        } else {
          result = content;
        }
        win.find(".window-content").html(result);
      },
      setTitle: function(t) {
        const element2 = this.element, win = this.win;
        const title3 = Metro2.utils.isValue(t) ? t : element2.attr("data-title");
        win.find(".window-caption .title").html(title3);
      },
      setIcon: function(i3) {
        const element2 = this.element, win = this.win;
        const icon = Metro2.utils.isValue(i3) ? i3 : element2.attr("data-icon");
        win.find(".window-caption .icon").html(icon);
      },
      getIcon: function() {
        return this.win.find(".window-caption .icon").html();
      },
      getTitle: function() {
        return this.win.find(".window-caption .title").html();
      },
      toggleDraggable: function(f3) {
        const win = this.win;
        const flag = Metro2.utils.bool(f3);
        const drag = Metro2.getPlugin(win, "draggable");
        if (flag === true) {
          drag.on();
        } else {
          drag.off();
        }
      },
      toggleResizable: function(f3) {
        const win = this.win;
        const flag = Metro2.utils.bool(f3);
        const resize = Metro2.getPlugin(win, "resizable");
        if (flag === true) {
          resize.on();
          win.find(".resize-element").removeClass("resize-element-disabled");
        } else {
          resize.off();
          win.find(".resize-element").addClass("resize-element-disabled");
        }
      },
      changePlace: function(p3) {
        const element2 = this.element, win = this.win;
        const place = Metro2.utils.isValue(p3) ? p3 : element2.attr("data-place");
        win.addClass(place);
      },
      pos: function(top, left) {
        const win = this.win;
        win.css({
          top,
          left
        });
        return this;
      },
      top: function(v2) {
        this.win.css({
          top: v2
        });
        return this;
      },
      left: function(v2) {
        this.win.css({
          left: v2
        });
        return this;
      },
      changeAttribute: function(attr, value) {
        const changePos = function(a2, v2) {
          const win = this.win;
          let pos;
          if (a2 === "data-top") {
            pos = parseInt(v2);
            if (!isNaN(pos)) {
              return;
            }
            win.css("top", pos);
          }
          if (a2 === "data-left") {
            pos = parseInt(v2);
            if (!isNaN(pos)) {
              return;
            }
            win.css("left", pos);
          }
        };
        const toggleButtons = function(a2, v2) {
          const win = this.win;
          const btnClose = win.find(".btn-close");
          const btnMin = win.find(".btn-min");
          const btnMax = win.find(".btn-max");
          const _v = Metro2.utils.bool(v2);
          const func = _v ? "show" : "hide";
          switch (a2) {
            case "data-btn-close":
              btnClose[func]();
              break;
            case "data-btn-min":
              btnMin[func]();
              break;
            case "data-btn-max":
              btnMax[func]();
              break;
          }
        };
        const changeSize = function(a2, v2) {
          const win = this.win;
          if (a2 === "data-width") {
            win.css("width", +v2);
          }
          if (a2 === "data-height") {
            win.css("height", +v2);
          }
        };
        switch (attr) {
          case "data-btn-close":
          case "data-btn-min":
          case "data-btn-max":
            toggleButtons(attr, value);
            break;
          case "data-width":
          case "data-height":
            changeSize(attr, value);
            break;
          case "data-cls-window":
          case "data-cls-caption":
          case "data-cls-content":
            this.changeClass(attr);
            break;
          case "data-shadow":
            this.toggleShadow();
            break;
          case "data-icon":
            this.setIcon();
            break;
          case "data-title":
            this.setTitle();
            break;
          case "data-content":
            this.setContent();
            break;
          case "data-draggable":
            this.toggleDraggable(value);
            break;
          case "data-resizable":
            this.toggleResizable(value);
            break;
          case "data-top":
          case "data-left":
            changePos(attr, value);
            break;
          case "data-place":
            this.changePlace();
            break;
        }
      },
      destroy: function() {
        return this.element;
      }
    });
    Metro2["window"] = {
      isWindow: function(el) {
        return Metro2.utils.isMetroObject(el, "window");
      },
      min: function(el, a2) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").min(a2);
      },
      max: function(el, a2) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").max(a2);
      },
      show: function(el) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").show();
      },
      hide: function(el) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").hide();
      },
      toggle: function(el) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").toggle();
      },
      isOpen: function(el) {
        if (!this.isWindow(el)) {
          return false;
        }
        const win = Metro2.getPlugin(el, "window");
        return win.isOpen();
      },
      close: function(el) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").close();
      },
      pos: function(el, top, left) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").pos(top, left);
      },
      top: function(el, top) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").top(top);
      },
      left: function(el, left) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").left(left);
      },
      width: function(el, width) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").width(width);
      },
      height: function(el, height) {
        if (!this.isWindow(el)) {
          return false;
        }
        Metro2.getPlugin(el, "window").height(height);
      },
      create: function(options, parent2) {
        let w2;
        w2 = $3("<div>").appendTo(parent2 ? $3(parent2) : $3("body"));
        const w_options = $3.extend({
          _runtime: true
        }, options ? options : {});
        Metro2.makePlugin(w2, "window", w_options);
        return Metro2.getPlugin(w2, "window").win;
      }
    };
  })(Metro, Dom);

  // source/components/wizard/wizard.js
  (function(Metro2, $3) {
    "use strict";
    let WizardDefaultConfig = {
      wizardDeferred: 0,
      start: 1,
      finish: 0,
      iconHelp: "\u{1F4A1}",
      iconPrev: "\u{1F850}",
      iconNext: "\u{1F852}",
      iconFinish: "\u2714",
      buttonMode: "cycle",
      // default, cycle, square
      buttonOutline: true,
      duration: 300,
      clsWizard: "",
      clsActions: "",
      clsHelp: "",
      clsPrev: "",
      clsNext: "",
      clsFinish: "",
      onPage: Metro2.noop,
      onNextPage: Metro2.noop,
      onPrevPage: Metro2.noop,
      onFirstPage: Metro2.noop,
      onLastPage: Metro2.noop,
      onFinishPage: Metro2.noop,
      onHelpClick: Metro2.noop,
      onPrevClick: Metro2.noop,
      onNextClick: Metro2.noop,
      onFinishClick: Metro2.noop,
      onBeforePrev: Metro2.noop_true,
      onBeforeNext: Metro2.noop_true,
      onWizardCreate: Metro2.noop
    };
    Metro2.wizardSetup = function(options) {
      WizardDefaultConfig = $3.extend({}, WizardDefaultConfig, options);
    };
    if (typeof globalThis["metroWizardSetup"] !== void 0) {
      Metro2.wizardSetup(globalThis["metroWizardSetup"]);
    }
    Metro2.Component("wizard", {
      init: function(options, elem) {
        this._super(elem, options, WizardDefaultConfig, {
          id: Metro2.utils.elementId("wizard")
        });
        return this;
      },
      _create: function() {
        const element2 = this.element;
        this._createWizard();
        this._createEvents();
        this._fireEvent("wizard-create", {
          element: element2
        });
      },
      _createWizard: function() {
        const element2 = this.element, o2 = this.options;
        let bar;
        element2.addClass("wizard").addClass(o2.view).addClass(o2.clsWizard);
        bar = $3("<div>").addClass("action-bar").addClass(o2.clsActions).appendTo(element2);
        let buttonMode = o2.buttonMode === "button" ? "" : o2.buttonMode;
        if (o2.buttonOutline === true) {
          buttonMode += " outline";
        }
        if (o2.iconHelp !== false) $3("<button>").attr("type", "button").addClass("button wizard-btn-help").addClass(buttonMode).addClass(o2.clsHelp).html(o2.iconHelp).appendTo(bar);
        if (o2.iconPrev !== false) $3("<button>").attr("type", "button").addClass("button wizard-btn-prev").addClass(buttonMode).addClass(o2.clsPrev).html(o2.iconPrev).appendTo(bar);
        if (o2.iconNext !== false) $3("<button>").attr("type", "button").addClass("button wizard-btn-next").addClass(buttonMode).addClass(o2.clsNext).html(o2.iconNext).appendTo(bar);
        if (o2.iconFinish !== false) $3("<button>").attr("type", "button").addClass("button wizard-btn-finish").addClass(buttonMode).addClass(o2.clsFinish).html(o2.iconFinish).appendTo(bar);
        this.toPage(o2.start);
        this._setHeight();
      },
      _setHeight: function() {
        const element2 = this.element;
        const pages = element2.children("section");
        let max_height = 0;
        pages.children(".page-content").css("max-height", "none");
        $3.each(pages, function() {
          const h7 = $3(this).height();
          if (max_height < parseInt(h7)) {
            max_height = h7;
          }
        });
        element2.height(max_height);
      },
      _createEvents: function() {
        const that = this, element2 = this.element;
        element2.on(Metro2.events.click, ".wizard-btn-help", function() {
          const pages = element2.children("section");
          const page = pages.get(that.current - 1);
          that._fireEvent("help-click", {
            index: that.current,
            page
          });
        });
        element2.on(Metro2.events.click, ".wizard-btn-prev", function() {
          that.prev();
          const pages = element2.children("section");
          const page = pages.get(that.current - 1);
          that._fireEvent("prev-click", {
            index: that.current,
            page
          });
        });
        element2.on(Metro2.events.click, ".wizard-btn-next", function() {
          that.next();
          const pages = element2.children("section");
          const page = pages.get(that.current - 1);
          that._fireEvent("next-click", {
            index: that.current,
            page
          });
        });
        element2.on(Metro2.events.click, ".wizard-btn-finish", function() {
          const pages = element2.children("section");
          const page = pages.get(that.current - 1);
          that._fireEvent("finish-click", {
            index: that.current,
            page
          });
        });
        element2.on(Metro2.events.click, ".complete", function() {
          const index = $3(this).index() + 1;
          that.toPage(index);
        });
        $3(globalThis).on(Metro2.events.resize, function() {
          that._setHeight();
        }, { ns: this.id });
      },
      next: function() {
        const that = this, element2 = this.element, o2 = this.options;
        const pages = element2.children("section");
        let page = $3(element2.children("section").get(this.current - 1));
        if (this.current + 1 > pages.length || Metro2.utils.exec(o2.onBeforeNext, [this.current, page, element2]) === false) {
          return;
        }
        this.current++;
        this.toPage(this.current);
        page = $3(element2.children("section").get(this.current - 1));
        this._fireEvent("next-page", {
          index: that.current,
          page: page[0]
        });
      },
      prev: function() {
        const that = this, element2 = this.element, o2 = this.options;
        let page = $3(element2.children("section").get(this.current - 1));
        if (this.current - 1 === 0 || Metro2.utils.exec(o2.onBeforePrev, [this.current, page, element2]) === false) {
          return;
        }
        this.current--;
        this.toPage(this.current);
        page = $3(element2.children("section").get(this.current - 1));
        this._fireEvent("prev-page", {
          index: that.current,
          page: page[0]
        });
      },
      last: function() {
        const that = this, element2 = this.element;
        let page;
        this.toPage(element2.children("section").length);
        page = $3(element2.children("section").get(this.current - 1));
        this._fireEvent("last-page", {
          index: that.current,
          page: page[0]
        });
      },
      first: function() {
        const that = this, element2 = this.element;
        let page;
        this.toPage(1);
        page = $3(element2.children("section").get(0));
        this._fireEvent("first-page", {
          index: that.current,
          page: page[0]
        });
      },
      toPage: function(page) {
        const element2 = this.element, o2 = this.options;
        const target = $3(element2.children("section").get(page - 1));
        const sections = element2.children("section");
        const actions = element2.find(".action-bar");
        if (target.length === 0) {
          return;
        }
        const finish = element2.find(".wizard-btn-finish").addClass("disabled");
        const next = element2.find(".wizard-btn-next").addClass("disabled");
        const prev = element2.find(".wizard-btn-prev").addClass("disabled");
        this.current = page;
        element2.children("section").removeClass("complete current").removeClass(o2.clsCurrent).removeClass(o2.clsComplete);
        target.addClass("current").addClass(o2.clsCurrent);
        target.prevAll().addClass("complete").addClass(o2.clsComplete);
        const border_size = element2.children("section.complete").length === 0 ? 0 : parseInt(Metro2.utils.getStyleOne(element2.children("section.complete")[0], "border-left-width"));
        actions.animate({
          draw: {
            left: element2.children("section.complete").length * border_size + 41
          },
          dur: o2.duration
        });
        if (this.current === sections.length || o2.finish > 0 && this.current >= o2.finish) {
          finish.removeClass("disabled");
        }
        if (parseInt(o2.finish) > 0 && this.current === parseInt(o2.finish)) {
          this._fireEvent("finish-page", {
            index: this.current,
            page: target[0]
          });
        }
        if (this.current < sections.length) {
          next.removeClass("disabled");
        }
        if (this.current > 1) {
          prev.removeClass("disabled");
        }
        this._fireEvent("page", {
          index: this.current,
          page: target[0]
        });
      },
      changeAttribute: function() {
      },
      destroy: function() {
        const element2 = this.element;
        element2.off(Metro2.events.click, ".wizard-btn-help");
        element2.off(Metro2.events.click, ".wizard-btn-prev");
        element2.off(Metro2.events.click, ".wizard-btn-next");
        element2.off(Metro2.events.click, ".wizard-btn-finish");
        element2.off(Metro2.events.click, ".complete");
        $3(globalThis).off(Metro2.events.resize, { ns: this.id });
        return element2;
      }
    });
  })(Metro, Dom);

  // source/components/page-control/pagecontrol.js
  (function(Metro2, $3) {
    "use strict";
    let PageControlDefaultConfig = {
      appendButton: true,
      tabsPosition: "left",
      customButtons: null,
      activateNewTab: true,
      defaultNewTabTitle: "New File",
      defaultNewCanClose: true,
      defaultNewTabIcon: "",
      defaultNewTabImage: "",
      defaultNewTabPosition: "before",
      // before, after
      appendActions: null,
      tabsActions: null,
      tabActions: null,
      refControl: false,
      onAppendButtonClick: Metro2.noop,
      onTabCreate: Metro2.noop_arg,
      onTabActivate: Metro2.noop,
      onTabDeactivate: Metro2.noop,
      onTabBeforeClose: Metro2.noop_true,
      onTabClose: Metro2.noop,
      onTabRename: Metro2.noop,
      onTabPropChange: Metro2.noop,
      onTabOrganized: Metro2.noop
    };
    Metro2.pageControlSetup = function(options) {
      PageControlDefaultConfig = $3.extend({}, PageControlDefaultConfig, options);
    };
    if (typeof globalThis["metroPageControlSetup"] !== void 0) {
      Metro2.pageControlSetup(globalThis["metroPageControlSetup"]);
    }
    Metro2.Component("page-control", {
      init: function(options, elem) {
        this._super(elem, options, PageControlDefaultConfig, {
          // define instance vars here
          newFileIndex: 1,
          invisibleTabsHolderToggle: null,
          invisibleTabsHolder: null
        });
        return this;
      },
      _create: function() {
        this._createStructure();
        this._createEvents();
        this._fireEvent("page-control-create");
      },
      _createStructure: function() {
        const that = this, element2 = this.element, o2 = this.options;
        this.component = $3("<div>").addClass("page-control").insertBefore(element2);
        element2.addClass("page-control__tabs").appendTo(this.component);
        element2.addClass(`tabs-position-${o2.tabsPosition}`);
        const items = element2.children("li:not(.page-control__tab-custom)");
        let activeTabExists = false;
        items.each(function(index, el) {
          const $el = $3(el), html2 = $el.html(), active = $el.hasClass("active");
          const tab = that.createTab({
            caption: html2,
            icon: $el.attr("data-icon"),
            image: $el.attr("data-image"),
            canClose: $el.attr("data-close") !== "false",
            data: $el.attr("data-data"),
            ref: $el.attr("data-ref")
          });
          if (active && !activeTabExists) {
            activeTabExists = true;
            tab.addClass("active");
            that._fireEvent("tab-activate", { tab: tab[0] });
          }
          element2.append(tab);
          $el.remove();
        });
        if (!activeTabExists) {
          const tab = this.element.children(".page-control__tab").first();
          tab.addClass("active");
          this._fireEvent("tab-activate", { tab: tab[0] });
        }
        if (o2.refControl) {
          this._updateRefs();
        }
        if (o2.appendButton) {
          const appendButton = $3("<li>").addClass("page-control__tab__append").html(`<span class="toggle">+</span>`);
          if (o2.appendActions) {
            const appendItems = Metro2.utils.exec(o2.appendActions, null, this);
            if (!Array.isArray(appendItems)) {
              throw "PageControl Error! Prop appendActions must be a function that returns an array.";
            }
            const appendMenu = $3("<ul data-role='dropdown' class='d-menu context'>");
            appendItems.map((el) => appendMenu.append(that._renderMenuItem(el)));
            appendButton.append(appendMenu);
          }
          element2.append(appendButton);
        }
        const services = $3("<li>").addClass("page-control__tab__service").addClass("invisible-tabs").appendTo(element2);
        services.append(
          $3("<div>").addClass("page-control__service-button").html(`
                    <span class="toggle">\u21A7</span>
                    <ul class="d-menu place-right context page-control__invisible_tabs_holder"></ul>
                `)
        );
        this.invisibleTabsHolderToggle = services.find(".page-control__tab__service.invisible-tabs > .page-control__service-button");
        this.invisibleTabsHolder = Metro2.makePlugin(services.find(".page-control__invisible_tabs_holder"), "dropdown", {
          onClick: (e) => {
            const parent2 = $3(e.target.parentNode);
            if (parent2.hasClass("page-control__tab__closer")) {
              this.closeButtonClick(e);
            } else {
              this.activateTab(parent2[0]);
            }
            e.preventDefault();
            e.stopPropagation();
          }
        });
        this.invisibleTabsHolderToggle.hide();
        this.organizeTabs();
        const tabsServices = $3("<li>").addClass("page-control__tab__service").addClass("tabs-menu").appendTo(element2);
        tabsServices.append(
          $3("<div>").addClass("page-control__service-button").html(`
                    <span class="toggle">\uFE19</span>
                    <ul class="d-menu place-right context" data-role="dropdown"></ul>
                `)
        );
        if (!o2.tabsActions) {
          tabsServices.hide();
        } else {
          const tabsMenu = tabsServices.find("ul");
          const tabsMenuItems = Metro2.utils.exec(o2.tabsActions, null, this);
          tabsMenuItems.map((el) => tabsMenu.append(that._renderMenuItem(el)));
        }
      },
      _updateRefs: function() {
        const tabs = this.element.find(".page-control__tab");
        const activeTab = this.element.find(".page-control__tab.active");
        tabs.each((_2, el) => $3($3(el).data("ref")).hide());
        $3(activeTab.data("ref")).show();
      },
      _createEvents: function() {
        const that = this, element2 = this.element, o2 = this.options;
        element2.on("click", ".page-control__tab__closer", this.closeButtonClick.bind(this));
        element2.on("click", ".page-control__tab__menu > li > a", function(e) {
          const action = $3(this).attr("data-action");
          const menu = Metro2.getPlugin($3(this).closest("ul"), "dropdown");
          const tab = $3(this).closest(".page-control__tab")[0];
          menu.close();
          switch (action) {
            case "close": {
              that.closeTab(tab);
              break;
            }
            case "close-all": {
              that.closeAll();
              break;
            }
            case "close-other": {
              that.closeOtherTabs(tab);
              break;
            }
            case "close-inactive": {
              that.closeInactiveTabs();
              break;
            }
            case "close-left": {
              that.closeTabsOnTheLeft(tab);
              break;
            }
            case "close-right": {
              that.closeTabsOnTheRight(tab);
              break;
            }
            case "rename": {
              that.renameTab(tab);
              break;
            }
          }
          e.preventDefault();
          e.stopPropagation();
        });
        element2.on("click", ".page-control__tab", function() {
          const tab = $3(this);
          if (tab.hasClass("active")) {
            return;
          }
          that.activateTab(this);
        });
        element2.on("click", ".page-control__tab__append > span", (e) => {
          e.preventDefault();
          e.stopPropagation();
          const tab = that.createTab({
            caption: `${o2.defaultNewTabTitle} ${that.newFileIndex++}`,
            canClose: o2.defaultNewCanClose,
            icon: o2.defaultNewTabIcon,
            image: o2.defaultNewTabImage,
            data: null
          });
          that._fireEvent("tab-append", { tab });
          that.activateTab(tab);
          that.organizeTabs();
          that._fireEvent("append-button-click", { tab });
        });
        $3(globalThis).on("resize", () => {
          this.organizeTabs();
        });
      },
      _renderMenuItem: function(el) {
        const li2 = $3("<li>");
        const an = $3("<a>");
        if (el.icon || el.image) {
          an.append(el.icon ? $3("<span class='icon'>").addClass(el.icon) : $3("<img class='icon'>").attr("src", el.image).attr("alt", ""));
        }
        if (el.title) {
          an.append($3("<span>").addClass("caption").text(el.title));
        }
        an.data("data", el.data);
        if (el.onclick) an.on("click", (e) => el.onclick(e));
        li2.append(an);
        return li2;
      },
      createTab: function({ caption: caption2, icon, image, canClose = true, hasMenu = true, data: data2, ref }) {
        const that = this, element2 = this.element, o2 = this.options;
        const tab = $3("<li>").addClass("page-control__tab").appendTo(element2);
        if (hasMenu) {
          tab.append(
            $3("<div>").addClass("page-control__tab__menu__holder").html(`
                        <span class="">\uFE19</span>
                        <ul class="d-menu context page-control__tab__menu" data-role="dropdown">
                            <li><a data-action="rename">${this.strings.label_rename_tab}</a></li>
                            <li class="divider"></li>
                            <li><a data-action="close">${this.strings.label_close_tab}</a></li>
                            <li><a data-action="close-other">${this.strings.label_close_other_tabs}</a></li>
                            <li><a data-action="close-left">${this.strings.label_close_tabs_left}</a></li>
                            <li><a data-action="close-right">${this.strings.label_close_tabs_right}</a></li>
                            <li><a data-action="close-all">${this.strings.label_close_all_tabs}</a></li>
                            <li><a data-action="close-inactive">${this.strings.label_close_inactive_tabs}</a></li>
                        </ul>
                    `)
          );
          if (o2.tabActions) {
            const tabMenu = tab.find("ul");
            const tabMenuItems = Metro2.utils.exec(o2.tabActions);
            if (!Array.isArray(tabMenuItems)) {
              throw "PageControl Error! Prop tabActions must be a function that returns an array.";
            }
            tabMenu.append($3("<li class='divider'>"));
            tabMenuItems.map((el) => tabMenu.append(that._renderMenuItem(el)));
          }
        }
        if (icon || image) {
          tab.append(
            $3("<span>").addClass("page-control__tab__icon").html(icon ? `<span class="${icon}">` : `<img src="${image}" alt=""/>`)
          );
        }
        tab.append($3("<span>").addClass("page-control__tab__caption").html(caption2));
        if (canClose) {
          tab.append($3("<span>").addClass("page-control__tab__closer").html(`<span>\u2715</span>`));
        }
        tab.data("data", data2);
        tab.data("ref", ref);
        this._fireEvent("tab-create", { tab: tab[0] });
        element2[o2.defaultNewTabPosition === "before" ? "prepend" : "append"](tab);
        return tab[0];
      },
      closeButtonClick: function(e) {
        const that = this, o2 = this.options;
        const tab = $3(e.target).closest(".page-control__tab");
        const parent2 = tab.closest("ul");
        if (!o2.onTabBeforeClose(tab[0])) {
          return;
        }
        that.closeTab(tab[0]);
        if (parent2.hasClass("page-control__invisible_tabs_holder") && parent2.children(".page-control__tab").length === 0) {
          Metro2.getPlugin(this.invisibleTabsHolder, "dropdown").close();
          this.invisibleTabsHolderToggle.hide();
        }
        e.preventDefault();
        e.stopPropagation();
      },
      closeTab: function(tab, reorg = true) {
        const $tab = $3(tab);
        if ($tab.hasClass("active")) {
          const prev = $tab.prev(".page-control__tab"), next = $tab.next(".page-control__tab");
          if (prev.length) {
            this.activateTab(prev[0]);
          } else if (next.length) {
            this.activateTab(next[0]);
          } else if ($tab.parent().hasClass("page-control__invisible_tabs_holder") && parent.children(".page-control__tab").length === 1) {
            if (element.children(".page-control__tab").length) {
              this.activateTab(element.children(".page-control__tab").last()[0]);
            }
          }
        }
        this._fireEvent("tab-close", { tab });
        if (this.options.refControl) {
          $3($tab.data("ref")).remove();
        }
        $tab.remove();
        if (reorg) this.organizeTabs();
        return this;
      },
      activateTab: function(tab) {
        const element2 = this.element, o2 = this.options;
        element2.find(".page-control__tab").each((index, el) => {
          const t = $3(el);
          if (t.hasClass("active")) {
            this._fireEvent("tab-deactivate", { tab: el });
            t.removeClass("active");
          }
        });
        $3(tab).addClass("active");
        if (o2.refControl) {
          this._updateRefs();
        }
        this._fireEvent("tab-activate", { tab });
        if ($3(tab).parent().hasClass("page-control__invisible_tabs_holder")) {
          element2.prepend(tab);
          this.organizeTabs();
        }
        return this;
      },
      organizeTabs: function() {
        const element2 = this.element;
        const tabsWidth = this.elem.getBoundingClientRect().width;
        const holder = this.invisibleTabsHolder;
        const addTabButton = element2.find(".page-control__tab__append");
        holder.children(".page-control__tab").each((index, el) => {
          const tab = $3(el);
          if (addTabButton.length) {
            tab.insertBefore(addTabButton);
          } else {
            tab.appendTo(element2);
          }
        });
        const tabs = element2.children(".page-control__tab");
        let w2 = 0;
        for (let tab of tabs) {
          const tabRect = tab.getBoundingClientRect();
          if (w2 + tabRect.width + 50 > tabsWidth) {
            $3(tab).nextAll(".page-control__tab").appendTo(holder);
            $3(tab).appendTo(holder);
            break;
          }
          w2 += tabRect.width;
        }
        if (holder.children().length) {
          this.invisibleTabsHolderToggle.show(function() {
            $3(this).css({
              display: "flex"
            });
          });
        } else {
          this.invisibleTabsHolderToggle.hide();
        }
        this._fireEvent("tab-organized", null);
      },
      addTab: function({ caption: caption2, icon, image, canClose = true, hasMenu = true, data: data2, ref }, insert2 = "before") {
        const o2 = this.options;
        const newTab = this.createTab({ caption: caption2, icon, image, canClose, hasMenu, data: data2, ref });
        if (o2.activateNewTab) {
          this.activateTab(newTab);
        }
        this.element[insert2 === "before" ? "prepend" : "append"](newTab);
        this.organizeTabs();
        return newTab;
      },
      getActiveTab: function() {
        return this.component.find(".page-control__tab.active")[0];
      },
      getActiveTabIndex: function() {
        return this.component.find(".page-control__tab").index(".active", false);
      },
      getTabByIndex: function(index) {
        return this.component.find(".page-control__tab").get(index);
      },
      getTabByTitle: function(caption2) {
        if (!caption2) {
          return void 0;
        }
        const tabs = this.component.find(".page-control__tab");
        for (const tab of tabs) {
          if ($3(tab).find(".caption").text() === caption2) {
            return tab;
          }
        }
        return void 0;
      },
      closeAll: function() {
        this.component.find(".page-control__tab").each((index, tab) => {
          this.closeTab(tab, false);
        });
        this.organizeTabs();
        return this;
      },
      closeInactiveTabs: function() {
        this.component.find(".page-control__tab").each((index, tab) => {
          if (!$3(tab).hasClass("active")) this.closeTab(tab, false);
        });
        this.organizeTabs();
        return this;
      },
      closeOtherTabs: function(tab) {
        let _tab = typeof tab === "number" ? this.getTabByIndex(tab) : $3(tab);
        this.component.find(".page-control__tab").each((index, tab2) => {
          if (_tab[0] !== tab2) this.closeTab(tab2, false);
        });
        this.activateTab(tab);
        this.organizeTabs();
        return this;
      },
      closeTabsOnTheLeft: function(tab) {
        const tabs = this.component.find(".page-control__tab");
        const tabIndex = tabs.indexOf($3(tab));
        this.component.find(".page-control__tab").each((index, _tab) => {
          if (index < tabIndex) this.closeTab(_tab, false);
        });
        this.organizeTabs();
        return this;
      },
      closeTabsOnTheRight: function(tab) {
        const tabs = this.component.find(".page-control__tab");
        const tabIndex = tabs.indexOf($3(tab));
        this.component.find(".page-control__tab").each((index, _tab) => {
          if (index > tabIndex) this.closeTab(_tab, false);
        });
        this.organizeTabs();
        return this;
      },
      setupTab: function(tab, prop, val) {
        const $tab = $3(tab);
        switch (prop) {
          case "caption": {
            $tab.find(".page-control__tab__caption").text(val);
            break;
          }
          case "icon": {
            $tab.find(".page-control__tab__icon")[0].className = val;
            break;
          }
          case "image": {
            $tab.find(".page-control__tab__image").attr("src", val);
            break;
          }
          case "data": {
            $tab.data("data", val);
            break;
          }
          case "ref": {
            $tab.data("ref", val);
            break;
          }
        }
        this._fireEvent("tab-prop-change", { tab });
        this.organizeTabs();
      },
      renameTab: function(tab) {
        const that = this;
        const caption2 = $3(tab).find(".page-control__tab__caption");
        Metro2.dialog.create({
          title: that.strings.label_rename_tab,
          content: `
                    <form style="width: 100%">
                        <input type="text" data-role="input" value="${caption2.text()}">
                    </form>
                `,
          defaultActions: false,
          customButtons: [
            {
              text: that.strings.label_ok,
              cls: "js-dialog-close info",
              onclick: function(dlg) {
                that.setupTab(tab, "caption", dlg.find("input").val());
              }
            },
            {
              text: that.strings.label_cancel,
              cls: "js-dialog-close"
            }
          ]
        });
      },
      changeAttribute: function(attr, newValue) {
      },
      destroy: function() {
        this.component.remove();
      }
    });
  })(Metro, Dom);
})();
//!node.hasClass("expanded");
/*! Bundled license information:

@olton/datetime/dist/datetime.js:
  (*!
   * Datetime v3.2.0. 
   * Copyright 2024 by Serhii Pimenov
   * Licensed under MIT
   *
   * Build time: 22.11.2024 16:28:08
   *)

@olton/string/dist/string.es.js:
  (*!
   * String - String routines
   * Copyright 2024 by Serhii Pimenov
   * Licensed under MIT
   !*)

@olton/dom/dist/dom.js:
  (*!
   * DOM - Work with HTML elements (@olton/dom, https://metroui.org.ua)
   * Version: 1.0.0
   * Build date: 14.01.2025, 11:19:35
   * Copyright 2012-2025 by Serhii Pimenov
   * Licensed under MIT
   *)

@olton/hooks/dist/hooks.esm.js:
  (*!
   * HooksJS - The set of hooks  (https://github.com/olton/hooks)
   * Copyright 2024 by Serhii Pimenov
   * Licensed under MIT
   !*)

@olton/farbe/dist/farbe.es.js:
  (*!
   * Farbe  v1.0.4 - Color manipulation library
   * Copyright 2024 by Serhii Pimenov
   * Licensed under MIT
   !*)

@olton/html/dist/html.esm.js:
  (*!
   * HtmlJS - Create html elements with JS
   * Copyright 2024 by Serhii Pimenov
   * Licensed under MIT
   !*)

@olton/guardian/dist/guardian.mjs:
  (*!
   * Guardian v0.5.2
   * Data guard and validation library
   * Copyright 2024 Serhii Pimenov
   * Licensed under MIT
   *
   * Build time: 29.11.2024 18:45:18
   *)
*/
//# sourceMappingURL=metro.js.map
