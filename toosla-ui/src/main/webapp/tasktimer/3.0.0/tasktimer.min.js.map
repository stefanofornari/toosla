{"version":3,"sources":["webpack://tasktimer/webpack/universalModuleDefinition","webpack://tasktimer/webpack/bootstrap","webpack://tasktimer/./src/index.ts","webpack://tasktimer/./src/utils.ts","webpack://tasktimer/./src/Task.ts","webpack://tasktimer/./src/TaskTimer.ts","webpack://tasktimer/./node_modules/eventemitter3/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","m","__export","p","hasOwnProperty","Object","defineProperty","value","proto","prototype","NODE","setImmediate","process","hrtime","utils","BROWSER","type","o","toString","call","match","toLowerCase","isset","ensureArray","Array","isArray","getNumber","minimum","defaultValue","getBool","cb","args","_i","arguments","length","setTimeout","apply","concat","clearImmediate","id","clearTimeout","isPromise","then","__assign","assign","t","s","i","n","_1","utils_1","DEFAULT_TASK_OPTIONS","freeze","enabled","tickDelay","tickInterval","totalRuns","startDate","stopDate","immediate","removeOnCompleted","callback","Task","get","_","enumerable","configurable","set","currentRuns","started","timeOnFirstRun","stopped","timeOnLastRun","elapsed","_markedCompleted","Boolean","Date","now","tickCount","Math","ceil","Number","_timer","interval","timeToRun","onInterval","reset","options","Error","_init","toJSON","obj","_setTimer","timer","_emit","name","object","event","source","error","data","emit","_done","completed","_taskCompleted","_execCallback","_this","catch","err","TaskTimer","Event","TASK_ERROR","_run","onRun","String","extendStatics","__extends","d","b","setPrototypeOf","__proto__","__","constructor","create","_super","State","eventemitter3_1","DEFAULT_TIMER_OPTIONS","precision","stopOnCompleted","EventEmitter","opts","state","_a","startTime","stopTime","current","STOPPED","keys","tasks","taskRunCount","_runCount","add","task","forEach","item","_add","remove","completedTaskCount","TASK_REMOVED","start","_stop","RUNNING","_markTime","STARTED","pause","PAUSED","resume","IDLE","RESUMED","stop","_reset","RESET","_getUniqueTaskID","TASK_ADDED","tickCountAfterResume","_timeoutRef","_immediateRef","resumeTime","hrResumeTime","TASK_COMPLETED","taskCount","COMPLETED","_tick","TICK","canRunOnTick","TASK","_getTimeDiff","hrDiff","diff","floor","num","has","prefix","Events","EE","fn","context","once","addListener","emitter","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","eventNames","events","names","slice","getOwnPropertySymbols","listeners","handlers","l","ee","listenerCount","a1","a2","a3","a4","a5","len","removeListener","undefined","j","on","removeAllListeners","off","prefixed","c","getter","r","Symbol","toStringTag","mode","__esModule","ns","key","bind","property","moduleId","modules"],"mappings":"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","file":"tasktimer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tasktimer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tasktimer\"] = factory();\n\telse\n\t\troot[\"tasktimer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"lib/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Task\"));\n__export(require(\"./TaskTimer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proto = Object.prototype;\nvar NODE = typeof setImmediate === 'function'\n    && typeof process === 'object'\n    && typeof process.hrtime === 'function';\nvar BROWSER = !NODE;\n/** @private */\nvar utils = {\n    NODE: NODE,\n    BROWSER: BROWSER,\n    type: function (o) {\n        return proto.toString.call(o).match(/\\s(\\w+)/i)[1].toLowerCase();\n    },\n    isset: function (o) {\n        return o !== null && o !== undefined;\n    },\n    ensureArray: function (o) {\n        return utils.isset(o)\n            ? !Array.isArray(o) ? [o] : o\n            : [];\n    },\n    getNumber: function (value, minimum, defaultValue) {\n        return typeof value === 'number'\n            ? (value < minimum ? minimum : value)\n            : defaultValue;\n    },\n    getBool: function (value, defaultValue) {\n        return typeof value !== 'boolean'\n            ? defaultValue\n            : value;\n    },\n    setImmediate: function (cb) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        /* istanbul ignore if */\n        if (utils.BROWSER) { // tested separately\n            return setTimeout(cb.apply(null, args), 0);\n        }\n        return setImmediate.apply(void 0, [cb].concat(args));\n    },\n    clearImmediate: function (id) {\n        /* istanbul ignore next */\n        if (!id)\n            return;\n        /* istanbul ignore if */\n        if (utils.BROWSER)\n            return clearTimeout(id); // tested separately\n        clearImmediate(id);\n    },\n    /**\n     *  Checks whether the given value is a promise.\n     *  @private\n     *  @param {any} value - Value to be checked.\n     *  @return {boolean}\n     */\n    isPromise: function (value) {\n        return value\n            && utils.type(value) === 'promise'\n            && typeof value.then === 'function';\n    }\n};\nexports.utils = utils;\n","\"use strict\";\n/* tslint:disable:no-empty */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TASK_OPTIONS = Object.freeze({\n    enabled: true,\n    tickDelay: 0,\n    tickInterval: 1,\n    totalRuns: null,\n    startDate: null,\n    stopDate: null,\n    immediate: false,\n    removeOnCompleted: false,\n    callback: null\n});\n/**\n *  Represents the class that holds the configurations and the callback function\n *  required to run a task.\n *  @class\n */\nvar Task = /** @class */ (function () {\n    /**\n     *  Initializes a new instance of `Task` class.\n     *  @constructor\n     *  @param {ITaskOptions} options Task options.\n     */\n    function Task(options) {\n        this._init(options);\n    }\n    Object.defineProperty(Task.prototype, \"id\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) MEMBERS\n        // ---------------------------\n        /**\n         *  Gets the unique ID of the task.\n         *  @name Task#id\n         *  @type {string}\n         *  @readonly\n         */\n        get: function () {\n            return this._.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"enabled\", {\n        /**\n         *  Specifies whether this task is currently enabled. This essentially gives\n         *  you a manual control over execution. The task will always bypass the\n         *  callback while this is set to `false`.\n         *  @name Task#enabled\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.enabled;\n        },\n        set: function (value) {\n            this._.enabled = utils_1.utils.getBool(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickDelay\", {\n        /**\n         *  Gets or sets the number of ticks to allow before running the task for\n         *  the first time.\n         *  @name Task#tickDelay\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickDelay;\n        },\n        set: function (value) {\n            this._.tickDelay = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.tickDelay);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"tickInterval\", {\n        /**\n         *  Gets or sets the tick interval that the task should be run on. The unit\n         *  is \"ticks\" (not milliseconds). For instance, if the timer interval is\n         *  `1000` milliseconds, and we add a task with `5` tick intervals. The task\n         *  will run on every `5` <b>seconds</b>.\n         *  @name Task#tickInterval\n         *  @type {number}\n         */\n        get: function () {\n            return this._.tickInterval;\n        },\n        set: function (value) {\n            this._.tickInterval = utils_1.utils.getNumber(value, 1, DEFAULT_TASK_OPTIONS.tickInterval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"totalRuns\", {\n        /**\n         *  Gets or sets the total number of times the task should be run. `0` or\n         *  `null` means unlimited (until the timer has stopped).\n         *  @name Task#totalRuns\n         *  @type {number}\n         */\n        get: function () {\n            return this._.totalRuns;\n        },\n        set: function (value) {\n            this._.totalRuns = utils_1.utils.getNumber(value, 0, DEFAULT_TASK_OPTIONS.totalRuns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"immediate\", {\n        /**\n         *  Specifies whether to wrap callback in a `setImmediate()` call before\n         *  executing. This can be useful if the task is not doing any I/O or using\n         *  any JS timers but synchronously blocking the event loop.\n         *  @name Task#immediate\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.immediate;\n        },\n        set: function (value) {\n            this._.immediate = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"currentRuns\", {\n        /**\n         *  Gets the number of times, this task has been run.\n         *  @name Task#currentRuns\n         *  @type {number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.currentRuns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"time\", {\n        /**\n         *  Gets time information for the lifetime of a task.\n         *  `#time.started` indicates the first execution time of a task.\n         *  `#time.stopped` indicates the last execution time of a task. (`0` if still running.)\n         *  `#time.elapsed` indicates the total lifetime of a task.\n         *  @name Task#time\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var started = this._.timeOnFirstRun || 0;\n            var stopped = this._.timeOnLastRun || 0;\n            return Object.freeze({\n                started: started,\n                stopped: stopped,\n                elapsed: stopped - started\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"callback\", {\n        /**\n         *  Gets the callback function to be executed on each run.\n         *  @name Task#callback\n         *  @type {TaskCallback}\n         *  @readonly\n         */\n        get: function () {\n            return this._.callback;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"removeOnCompleted\", {\n        /**\n         *  Gets or sets whether to remove the task (to free up memory) when task\n         *  has completed its executions (runs). For this to take affect, the task\n         *  should have `totalRuns` and/or `stopDate` configured.\n         *  @name Task#removeOnCompleted\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.removeOnCompleted;\n        },\n        set: function (value) {\n            this._.removeOnCompleted = utils_1.utils.getBool(value, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"completed\", {\n        /**\n         *  Specifies whether the task has completed all runs (executions) or\n         *  `stopDate` is reached. Note that if both `totalRuns` and `stopDate` are\n         *  omitted, this will never return `true`; since the task has no execution\n         *  limit set.\n         *  @name Task#completed\n         *  @type {boolean}\n         *  @readonly\n         */\n        get: function () {\n            // return faster if already completed\n            if (this._markedCompleted)\n                return true;\n            return Boolean((this.totalRuns && this.currentRuns >= this.totalRuns)\n                || (this._.stopDate && Date.now() >= this._.stopDate));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Task.prototype, \"canRunOnTick\", {\n        /**\n         *  Specifies whether the task can run on the current tick of the timer.\n         *  @private\n         *  @name Task#canRunOnTick\n         *  @type {boolean}\n         *  @readonly\n         */\n        get: function () {\n            if (this._markedCompleted)\n                return false;\n            var tickCount = this._.startDate\n                ? Math.ceil((Date.now() - Number(this._.startDate)) / this._timer.interval)\n                : this._timer.tickCount;\n            var timeToRun = !this._.startDate || Date.now() >= this._.startDate;\n            var onInterval = tickCount > this.tickDelay && (tickCount - this.tickDelay) % this.tickInterval === 0;\n            return Boolean(timeToRun && onInterval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Resets the current number of runs. This will keep the task running for\n     *  the same amount of `tickIntervals` initially configured.\n     *  @memberof Task\n     *  @chainable\n     *\n     *  @param {ITaskBaseOptions} [options] If set, this will also re-configure the task.\n     *\n     *  @returns {Task}\n     */\n    Task.prototype.reset = function (options) {\n        this._.currentRuns = 0;\n        if (options) {\n            var id = options.id;\n            if (id && id !== this.id)\n                throw new Error('Cannot change ID of a task.');\n            options.id = this.id;\n            this._init(options);\n        }\n        return this;\n    };\n    /**\n     *  Serialization to JSON.\n     *\n     *  Never return string from `toJSON()`. It should return an object.\n     *  @private\n     */\n    Task.prototype.toJSON = function () {\n        var obj = __assign({}, this._);\n        delete obj.callback;\n        return obj;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) MEMBERS\n    // ---------------------------\n    /**\n     *  Set reference to timer itself.\n     *  Only called by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._setTimer = function (timer) {\n        this._timer = timer;\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._emit = function (name, object) {\n        var event = {\n            name: name,\n            source: this\n        };\n        /* istanbul ignore else */\n        if (object instanceof Error) {\n            event.error = object;\n        }\n        else {\n            event.data = object;\n        }\n        this._timer.emit(name, event);\n    };\n    /**\n     *  `TaskTimer` should be informed if this task is completed. But execution\n     *  should be finished. So we do this within the `done()` function.\n     *  @private\n     */\n    Task.prototype._done = function () {\n        if (this.completed) {\n            this._markedCompleted = true;\n            this._.timeOnLastRun = Date.now();\n            this._timer._taskCompleted(this);\n        }\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._execCallback = function () {\n        var _this = this;\n        try {\n            var o = this.callback.apply(this, [this, function () { return _this._done(); }]);\n            if (this.callback.length >= 2) {\n                // handled by done() (called within the task callback by the user)\n            }\n            else if (utils_1.utils.isPromise(o)) {\n                o.then(function () {\n                    _this._done();\n                })\n                    .catch(function (err) {\n                    _this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\n                });\n            }\n            else {\n                this._done();\n            }\n        }\n        catch (err) {\n            this._emit(_1.TaskTimer.Event.TASK_ERROR, err);\n        }\n    };\n    /**\n     *  Only used by `TaskTimer`.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    Task.prototype._run = function (onRun) {\n        var _this = this;\n        if (!this.enabled || this._markedCompleted)\n            return;\n        if (this.currentRuns === 0)\n            this._.timeOnFirstRun = Date.now();\n        // current runs should be set before execution or it might flow if some\n        // async runs finishes faster and some other slower.\n        this._.currentRuns++;\n        onRun();\n        if (this.immediate) {\n            utils_1.utils.setImmediate(function () { return _this._execCallback(); });\n        }\n        else {\n            this._execCallback();\n        }\n    };\n    /**\n     *  @private\n     */\n    Task.prototype._init = function (options) {\n        if (!options || !options.id) {\n            throw new Error('A unique task ID is required.');\n        }\n        if (typeof options.callback !== 'function') {\n            throw new Error('A callback function is required for a task to run.');\n        }\n        var startDate = options.startDate, stopDate = options.stopDate;\n        if (startDate && stopDate && startDate >= stopDate) {\n            throw new Error('Task start date cannot be the same or after stop date.');\n        }\n        this._markedCompleted = false;\n        this._ = __assign({ currentRuns: 0 }, DEFAULT_TASK_OPTIONS);\n        this._.id = String(options.id);\n        this._.callback = options.callback;\n        this._.startDate = options.startDate || null;\n        this._.stopDate = options.stopDate || null;\n        // using setters for validation & default values\n        this.enabled = options.enabled;\n        this.tickDelay = options.tickDelay;\n        this.tickInterval = options.tickInterval;\n        this.totalRuns = options.totalRuns;\n        this.immediate = options.immediate;\n        this.removeOnCompleted = options.removeOnCompleted;\n    };\n    return Task;\n}());\nexports.Task = Task;\n","\"use strict\";\n/* tslint:disable:max-file-line-count */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// dep modules\nvar eventemitter3_1 = require(\"eventemitter3\");\n// own modules\nvar _1 = require(\".\");\nvar utils_1 = require(\"./utils\");\n/**\n *  @private\n */\nvar DEFAULT_TIMER_OPTIONS = Object.freeze({\n    interval: 1000,\n    precision: true,\n    stopOnCompleted: false\n});\n/**\n *  TaskTimer • https://github.com/onury/tasktimer\n *  @license MIT\n *  @copyright 2019, Onur Yıldırım <onur@cutepilot.com>\n */\n// ---------------------------\n// EventEmitter Docs\n// ---------------------------\n/**\n *  Calls each of the listeners registered for a given event name.\n *  @name TaskTimer#emit\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be emitted.\n *  @param {any} [data] - Data to be passed to event listeners.\n *\n *  @returns {Boolean} - `true` if the event had listeners, else `false`.\n */\n/**\n *  Return an array listing the events for which the emitter has registered\n *  listeners.\n *  @name TaskTimer#eventNames\n *  @function\n *\n *  @returns {Array} - List of event names.\n */\n/**\n *  Adds the listener function to the end of the listeners array for the event\n *  named `eventName`. No checks are made to see if the listener has already\n *  been added. Multiple calls passing the same combination of `eventName` and\n *  `listener` will result in the listener being added, and called, multiple\n *  times.\n *  @name TaskTimer#on\n *  @function\n *  @alias TaskTimer#addListener\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - The context to invoke the listener with.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n *\n *  @example\n *  const timer = new TaskTimer(1000);\n *  // add a listener to be invoked when timer has stopped.\n *  timer.on(TaskTimer.Event.STOPPED, () => {\n *      console.log('Timer has stopped!');\n *  });\n *  timer.start();\n */\n/**\n *  Adds a one time listener function for the event named `eventName`. The next\n *  time `eventName` is triggered, this `listener` is removed and then invoked.\n *  @name TaskTimer#once\n *  @function\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - The context to invoke the listener with.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Removes the specified `listener` from the listener array for the event\n *  named `eventName`.\n *  @name TaskTimer#off\n *  @function\n *  @alias TaskTimer#removeListener\n *  @chainable\n *\n *  @param {TaskTimer.Event} eventName - The name of the event to be removed.\n *  @param {Function} listener - The callback function to be invoked per event.\n *  @param {*} [context=this] - Only remove the listeners that have this context.\n *  @param {Boolean} [once=false] - Only remove one-time listeners.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  Gets the number of listeners listening to a given event.\n *  @name TaskTimer#listenerCount\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event.\n *\n *  @returns {Number} - The number of listeners.\n */\n/**\n *  Gets the listeners registered for a given event.\n *  @name TaskTimer#listeners\n *  @function\n *\n *  @param {TaskTimer.Event} eventName - The name of the event.\n *\n *  @returns {Array} - The registered listeners.\n */\n/**\n *  Removes all listeners, or those of the specified `eventName`.\n *  @name TaskTimer#removeAllListeners\n *  @function\n *  @chainable\n *\n *  @param {TaskTimer.Event} [eventName] - The name of the event to be removed.\n *\n *  @returns {TaskTimer} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n/**\n *  A timer utility for running periodic tasks on the given interval ticks. This\n *  is useful when you want to run or schedule multiple tasks on a single timer\n *  instance.\n *\n *  This class extends `EventEmitter3` which is an `EventEmitter` implementation\n *  for both Node and browser. For detailed information, refer to Node.js\n *  documentation.\n *  @class\n *  @global\n *\n *  @extends EventEmitter\n *\n *  @see\n *  {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n */\nvar TaskTimer = /** @class */ (function (_super) {\n    __extends(TaskTimer, _super);\n    // ---------------------------\n    // CONSTRUCTOR\n    // ---------------------------\n    /**\n     *  Constructs a new `TaskTimer` instance with the given time interval (in\n     *  milliseconds).\n     *  @constructor\n     *\n     *  @param {ITaskTimerOptions|number} [options] - Either TaskTimer options\n     *  or a base interval (in milliseconds). Since the tasks run on ticks\n     *  instead of millisecond intervals; this value operates as the base\n     *  resolution for all tasks. If you are running heavy tasks, lower interval\n     *  requires higher CPU power. This value can be updated any time by setting\n     *  the `interval` property on the instance.\n     *\n     *  @example\n     *  const timer = new TaskTimer(1000); // milliseconds\n     *  // Execute some code on each tick...\n     *  timer.on('tick', () => {\n     *      console.log('tick count: ' + timer.tickCount);\n     *      console.log('elapsed time: ' + timer.time.elapsed + ' ms.');\n     *  });\n     *  // add a task named 'heartbeat' that runs every 5 ticks and a total of 10 times.\n     *  const task1 = {\n     *      id: 'heartbeat',\n     *      tickDelay: 20,   // ticks (to wait before first run)\n     *      tickInterval: 5, // ticks (interval)\n     *      totalRuns: 10,   // times to run\n     *      callback(task) { // can also be an async function, returning a promise\n     *          console.log(task.id + ' task has run ' + task.currentRuns + ' times.');\n     *      }\n     *  };\n     *  timer.add(task1).start();\n     */\n    function TaskTimer(options) {\n        var _this = _super.call(this) || this;\n        _this._timeoutRef = null;\n        _this._immediateRef = null;\n        _this._runCount = 0;\n        _this._reset();\n        _this._.opts = {};\n        var opts = typeof options === 'number'\n            ? { interval: options }\n            : options || {};\n        _this.interval = opts.interval;\n        _this.precision = opts.precision;\n        _this.stopOnCompleted = opts.stopOnCompleted;\n        return _this;\n    }\n    Object.defineProperty(TaskTimer.prototype, \"interval\", {\n        // ---------------------------\n        // PUBLIC (INSTANCE) PROPERTIES\n        // ---------------------------\n        /**\n         *  Gets or sets the base timer interval in milliseconds.\n         *\n         *  Since the tasks run on ticks instead of millisecond intervals; this\n         *  value operates as the base resolution for all tasks. If you are running\n         *  heavy tasks, lower interval requires higher CPU power. This value can be\n         *  updated any time.\n         *\n         *  @name TaskTimer#interval\n         *  @type {number}\n         */\n        get: function () {\n            return this._.opts.interval;\n        },\n        set: function (value) {\n            this._.opts.interval = utils_1.utils.getNumber(value, 20, DEFAULT_TIMER_OPTIONS.interval);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"precision\", {\n        /**\n         *  Gets or sets whether timer precision enabled.\n         *\n         *  Because of the single-threaded, asynchronous nature of JavaScript, each\n         *  execution takes a piece of CPU time, and the time they have to wait will\n         *  vary, depending on the load. This creates a latency and cumulative\n         *  difference in asynchronous timers; that gradually increase the\n         *  inacuraccy. `TaskTimer` overcomes this problem as much as possible:\n         *\n         *  <li>The delay between each tick is auto-adjusted when it's off\n         *  due to task/CPU loads or clock drifts.</li>\n         *  <li>In Node.js, `TaskTimer` also makes use of `process.hrtime()`\n         *  high-resolution real-time. The time is relative to an arbitrary\n         *  time in the past (not related to the time of day) and therefore not\n         *  subject to clock drifts.</li>\n         *  <li>The timer may hit a synchronous / blocking task; or detect significant\n         *  time drift (longer than the base interval) due to JS event queue, which\n         *  cannot be recovered by simply adjusting the next delay. In this case, right\n         *  from the next tick onward; it will auto-recover as much as possible by\n         *  running \"immediate\" tasks until it reaches the proper time vs tick/run\n         *  balance.</li>\n         *\n         *  <blockquote><i>Note that precision will be as high as possible but it still\n         *  can be off by a few milliseconds; depending on the CPU or the load.</i>\n         *  </blockquote>\n         *  @name TaskTimer#precision\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.precision;\n        },\n        set: function (value) {\n            this._.opts.precision = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.precision);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"stopOnCompleted\", {\n        /**\n         *  Gets or sets whether the timer should automatically stop when all tasks\n         *  are completed. For this to take affect, all added tasks should have\n         *  `totalRuns` and/or `stopDate` configured. This option can be set/changed\n         *  at any time.\n         *  @name TaskTimer#stopOnCompleted\n         *  @type {boolean}\n         */\n        get: function () {\n            return this._.opts.stopOnCompleted;\n        },\n        set: function (value) {\n            this._.opts.stopOnCompleted = utils_1.utils.getBool(value, DEFAULT_TIMER_OPTIONS.stopOnCompleted);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"state\", {\n        /**\n         *  Gets the current state of the timer.\n         *  For possible values, see `TaskTimer.State` enumeration.\n         *  @name TaskTimer#state\n         *  @type {TaskTimer.State}\n         *  @readonly\n         */\n        get: function () {\n            return this._.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"time\", {\n        /**\n         *  Gets time information for the latest run of the timer.\n         *  `#time.started` indicates the start time of the timer.\n         *  `#time.stopped` indicates the stop time of the timer. (`0` if still running.)\n         *  `#time.elapsed` indicates the elapsed time of the timer.\n         *  @name TaskTimer#time\n         *  @type {ITimeInfo}\n         *  @readonly\n         */\n        get: function () {\n            var _a = this._, startTime = _a.startTime, stopTime = _a.stopTime;\n            var t = {\n                started: startTime,\n                stopped: stopTime,\n                elapsed: 0\n            };\n            if (startTime) {\n                var current = this.state !== TaskTimer.State.STOPPED ? Date.now() : stopTime;\n                t.elapsed = current - startTime;\n            }\n            return Object.freeze(t);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"tickCount\", {\n        /**\n         *  Gets the current tick count for the latest run of the timer.\n         *  This value will be reset to `0` when the timer is stopped or reset.\n         *  @name TaskTimer#tickCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.tickCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskCount\", {\n        /**\n         *  Gets the current task count. Tasks remain even after the timer is\n         *  stopped. But they will be removed if the timer is reset.\n         *  @name TaskTimer#taskCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return Object.keys(this._.tasks).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"taskRunCount\", {\n        /**\n         *  Gets the total number of all task executions (runs).\n         *  @name TaskTimer#taskRunCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._.taskRunCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskTimer.prototype, \"runCount\", {\n        /**\n         *  Gets the total number of timer runs, including resumed runs.\n         *  @name TaskTimer#runCount\n         *  @type {Number}\n         *  @readonly\n         */\n        get: function () {\n            return this._runCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ---------------------------\n    // PUBLIC (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  Gets the task with the given ID.\n     *  @memberof TaskTimer\n     *\n     *  @param {String} id - ID of the task.\n     *\n     *  @returns {Task}\n     */\n    TaskTimer.prototype.get = function (id) {\n        return this._.tasks[id] || null;\n    };\n    /**\n     *  Adds a collection of new tasks for the timer.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {Task|ITaskOptions|TaskCallback|Array} task - Either a\n     *  single task, task options object or the callback function; or a mixture\n     *  of these as an array.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task callback is not set or a task with the given\n     *  name already exists.\n     */\n    TaskTimer.prototype.add = function (task) {\n        var _this = this;\n        if (!utils_1.utils.isset(task)) {\n            throw new Error('Either a task, task options or a callback is required.');\n        }\n        utils_1.utils.ensureArray(task).forEach(function (item) { return _this._add(item); });\n        return this;\n    };\n    /**\n     *  Removes the task by the given name.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @param {string|Task} task - Task to be removed. Either pass the\n     *  name or the task itself.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If a task with the given name does not exist.\n     */\n    TaskTimer.prototype.remove = function (task) {\n        var id = typeof task === 'string' ? task : task.id;\n        task = this.get(id);\n        if (!id || !task) {\n            throw new Error(\"No tasks exist with ID: '\" + id + \"'.\");\n        }\n        // first decrement completed tasks count if this is a completed task.\n        if (task.completed && this._.completedTaskCount > 0)\n            this._.completedTaskCount--;\n        this._.tasks[id] = null;\n        delete this._.tasks[id];\n        this._emit(TaskTimer.Event.TASK_REMOVED, task);\n        return this;\n    };\n    /**\n     *  Starts the timer and puts the timer in `RUNNING` state. If it's already\n     *  running, this will reset the start/stop time and tick count, but will not\n     *  reset (or remove) existing tasks.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.start = function () {\n        this._stop();\n        this._.state = TaskTimer.State.RUNNING;\n        this._runCount++;\n        this._.tickCount = 0;\n        this._.taskRunCount = 0;\n        this._.stopTime = 0;\n        this._markTime();\n        this._.startTime = Date.now();\n        this._emit(TaskTimer.Event.STARTED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Pauses the timer, puts the timer in `PAUSED` state and all tasks on hold.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.pause = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.state = TaskTimer.State.PAUSED;\n        this._emit(TaskTimer.Event.PAUSED);\n        return this;\n    };\n    /**\n     *  Resumes the timer and puts the timer in `RUNNING` state; if previuosly\n     *  paused. In this state, all existing tasks are resumed.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.resume = function () {\n        if (this.state === TaskTimer.State.IDLE) {\n            this.start();\n            return this;\n        }\n        if (this.state !== TaskTimer.State.PAUSED)\n            return this;\n        this._runCount++;\n        this._markTime();\n        this._.state = TaskTimer.State.RUNNING;\n        this._emit(TaskTimer.Event.RESUMED);\n        this._run();\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `STOPPED` state. In this state, all\n     *  existing tasks are stopped and no values or tasks are reset until\n     *  re-started or explicitly calling reset.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.stop = function () {\n        if (this.state !== TaskTimer.State.RUNNING)\n            return this;\n        this._stop();\n        this._.stopTime = Date.now();\n        this._.state = TaskTimer.State.STOPPED;\n        this._emit(TaskTimer.Event.STOPPED);\n        return this;\n    };\n    /**\n     *  Stops the timer and puts the timer in `IDLE` state.\n     *  This will reset the ticks and removes all tasks silently; meaning no\n     *  other events will be emitted such as `\"taskRemoved\"`.\n     *  @memberof TaskTimer\n     *  @chainable\n     *\n     *  @returns {TaskTimer}\n     */\n    TaskTimer.prototype.reset = function () {\n        this._reset();\n        this._emit(TaskTimer.Event.RESET);\n        return this;\n    };\n    // ---------------------------\n    // PRIVATE (INSTANCE) METHODS\n    // ---------------------------\n    /**\n     *  @private\n     */\n    TaskTimer.prototype._emit = function (type, data) {\n        var event = {\n            name: type,\n            source: this,\n            data: data\n        };\n        return this.emit(type, event);\n    };\n    /**\n     *  Adds a new task for the timer.\n     *  @private\n     *\n     *  @param {Task|ITaskOptions|TaskCallback} options - Either a task instance,\n     *  task options object or the callback function to be executed on tick\n     *  intervals.\n     *\n     *  @returns {TaskTimer}\n     *\n     *  @throws {Error} - If the task callback is not set or a task with the\n     *  given name already exists.\n     */\n    TaskTimer.prototype._add = function (options) {\n        if (typeof options === 'function') {\n            options = {\n                callback: options\n            };\n        }\n        if (utils_1.utils.type(options) === 'object' && !options.id) {\n            options.id = this._getUniqueTaskID();\n        }\n        if (this.get(options.id)) {\n            throw new Error(\"A task with id '\" + options.id + \"' already exists.\");\n        }\n        var task = options instanceof _1.Task ? options : new _1.Task(options);\n        task._setTimer(this);\n        this._.tasks[task.id] = task;\n        this._emit(TaskTimer.Event.TASK_ADDED, task);\n        return this;\n    };\n    /**\n     *  Stops the timer.\n     *  @private\n     */\n    TaskTimer.prototype._stop = function () {\n        this._.tickCountAfterResume = 0;\n        if (this._timeoutRef) {\n            clearTimeout(this._timeoutRef);\n            this._timeoutRef = null;\n        }\n        if (this._immediateRef) {\n            utils_1.utils.clearImmediate(this._immediateRef);\n            this._immediateRef = null;\n        }\n    };\n    /**\n     *  Resets the timer.\n     *  @private\n     */\n    TaskTimer.prototype._reset = function () {\n        this._ = {\n            opts: (this._ || {}).opts,\n            state: TaskTimer.State.IDLE,\n            tasks: {},\n            tickCount: 0,\n            taskRunCount: 0,\n            startTime: 0,\n            stopTime: 0,\n            completedTaskCount: 0,\n            resumeTime: 0,\n            hrResumeTime: null,\n            tickCountAfterResume: 0\n        };\n        this._stop();\n    };\n    /**\n     *  Called (by Task instance) when it has completed all of its runs.\n     *  @private\n     */\n    // @ts-ignore: TS6133: declared but never read.\n    TaskTimer.prototype._taskCompleted = function (task) {\n        this._.completedTaskCount++;\n        this._emit(TaskTimer.Event.TASK_COMPLETED, task);\n        if (this._.completedTaskCount === this.taskCount) {\n            this._emit(TaskTimer.Event.COMPLETED);\n            if (this.stopOnCompleted)\n                this.stop();\n        }\n        if (task.removeOnCompleted)\n            this.remove(task);\n    };\n    /**\n     *  Handler to be executed on each tick.\n     *  @private\n     */\n    TaskTimer.prototype._tick = function () {\n        var _this = this;\n        this._.state = TaskTimer.State.RUNNING;\n        var id;\n        var task;\n        var tasks = this._.tasks;\n        this._.tickCount++;\n        this._.tickCountAfterResume++;\n        this._emit(TaskTimer.Event.TICK);\n        // tslint:disable:forin\n        for (id in tasks) {\n            task = tasks[id];\n            if (!task || !task.canRunOnTick)\n                continue;\n            // below will not execute if task is disabled or already\n            // completed.\n            task._run(function () {\n                _this._.taskRunCount++;\n                _this._emit(TaskTimer.Event.TASK, task);\n            });\n        }\n        this._run();\n    };\n    /**\n     *  Marks the resume (or start) time in milliseconds or high-resolution time\n     *  if available.\n     *  @private\n     */\n    TaskTimer.prototype._markTime = function () {\n        /* istanbul ignore if */\n        if (utils_1.utils.BROWSER) { // tested separately\n            this._.resumeTime = Date.now();\n        }\n        else {\n            this._.hrResumeTime = process.hrtime();\n        }\n    };\n    /**\n     *  Gets the time difference in milliseconds sinct the last resume or start\n     *  time.\n     *  @private\n     */\n    TaskTimer.prototype._getTimeDiff = function () {\n        // Date.now() is ~2x faster than Date#getTime()\n        /* istanbul ignore if */\n        if (utils_1.utils.BROWSER)\n            return Date.now() - this._.resumeTime; // tested separately\n        var hrDiff = process.hrtime(this._.hrResumeTime);\n        return Math.ceil((hrDiff[0] * 1000) + (hrDiff[1] / 1e6));\n    };\n    /**\n     *  Runs the timer.\n     *  @private\n     */\n    TaskTimer.prototype._run = function () {\n        var _this = this;\n        if (this.state !== TaskTimer.State.RUNNING)\n            return;\n        var interval = this.interval;\n        // we'll get a precise interval by checking if our clock is already\n        // drifted.\n        if (this.precision) {\n            var diff = this._getTimeDiff();\n            // did we reach this expected tick count for the given time period?\n            // calculated count should not be greater than tickCountAfterResume\n            if (Math.floor(diff / interval) > this._.tickCountAfterResume) {\n                // if we're really late, run immediately!\n                this._immediateRef = utils_1.utils.setImmediate(function () { return _this._tick(); });\n                return;\n            }\n            // if we still have time but a bit off, update next interval.\n            interval = interval - (diff % interval);\n        }\n        this._timeoutRef = setTimeout(function () { return _this._tick(); }, interval);\n    };\n    /**\n     *  Gets a unique task ID.\n     *  @private\n     */\n    TaskTimer.prototype._getUniqueTaskID = function () {\n        var num = this.taskCount;\n        var id;\n        while (!id || this.get(id)) {\n            num++;\n            id = 'task' + num;\n        }\n        return id;\n    };\n    return TaskTimer;\n}(eventemitter3_1.EventEmitter));\nexports.TaskTimer = TaskTimer;\n// ---------------------------\n// NAMESPACE\n// ---------------------------\n// tslint:disable:no-namespace\n/* istanbul ignore next */\n/** @private */\n(function (TaskTimer) {\n    /**\n     *  Represents the class that holds the configurations and the callback function\n     *  required to run a task. See {@link api/#Task|class information}.\n     *  @name TaskTimer.Task\n     *  @class\n     */\n    TaskTimer.Task = _1.Task;\n    /**\n     *  Enumerates `TaskTimer` states.\n     *  @memberof TaskTimer\n     *  @enum {String}\n     *  @readonly\n     */\n    var State;\n    (function (State) {\n        /**\n         *  Indicates that the timer is in `idle` state.\n         *  This is the initial state when the `TaskTimer` instance is first created.\n         *  Also when an existing timer is reset, it will be `idle`.\n         *  @type {String}\n         */\n        State[\"IDLE\"] = \"idle\";\n        /**\n         *  Indicates that the timer is in `running` state; such as when the timer is\n         *  started or resumed.\n         *  @type {String}\n         */\n        State[\"RUNNING\"] = \"running\";\n        /**\n         *  Indicates that the timer is in `paused` state.\n         *  @type {String}\n         */\n        State[\"PAUSED\"] = \"paused\";\n        /**\n         *  Indicates that the timer is in `stopped` state.\n         *  @type {String}\n         */\n        State[\"STOPPED\"] = \"stopped\";\n    })(State = TaskTimer.State || (TaskTimer.State = {}));\n    /**\n     *  Enumerates the `TaskTimer` event types.\n     *  @memberof TaskTimer\n     *  @enum {String}\n     *  @readonly\n     */\n    var Event;\n    (function (Event) {\n        /**\n         *  Emitted on each tick (interval) of `TaskTimer`.\n         *  @type {String}\n         */\n        Event[\"TICK\"] = \"tick\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  started.\n         *  @type {String}\n         */\n        Event[\"STARTED\"] = \"started\";\n        /**\n         *  Emitted when the timer is put in `RUNNING` state; such as when the timer is\n         *  resumed.\n         *  @type {String}\n         */\n        Event[\"RESUMED\"] = \"resumed\";\n        /**\n         *  Emitted when the timer is put in `PAUSED` state.\n         *  @type {String}\n         */\n        Event[\"PAUSED\"] = \"paused\";\n        /**\n         *  Emitted when the timer is put in `STOPPED` state.\n         *  @type {String}\n         */\n        Event[\"STOPPED\"] = \"stopped\";\n        /**\n         *  Emitted when the timer is reset.\n         *  @type {String}\n         */\n        Event[\"RESET\"] = \"reset\";\n        /**\n         *  Emitted when a task is executed.\n         *  @type {String}\n         */\n        Event[\"TASK\"] = \"task\";\n        /**\n         *  Emitted when a task is added to `TaskTimer` instance.\n         *  @type {String}\n         */\n        Event[\"TASK_ADDED\"] = \"taskAdded\";\n        /**\n         *  Emitted when a task is removed from `TaskTimer` instance.\n         *  Note that this will not be emitted when `.reset()` is called; which\n         *  removes all tasks silently.\n         *  @type {String}\n         */\n        Event[\"TASK_REMOVED\"] = \"taskRemoved\";\n        /**\n         *  Emitted when a task has completed all of its executions (runs)\n         *  or reached its stopping date/time (if set). Note that this event\n         *  will only be fired if the tasks has a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @type {String}\n         */\n        Event[\"TASK_COMPLETED\"] = \"taskCompleted\";\n        /**\n         *  Emitted when a task produces an error on its execution.\n         *  @type {String}\n         */\n        Event[\"TASK_ERROR\"] = \"taskError\";\n        /**\n         *  Emitted when all tasks have completed all of their executions (runs)\n         *  or reached their stopping date/time (if set). Note that this event\n         *  will only be fired if all tasks have a `totalRuns` limit or a\n         *  `stopDate` value set.\n         *  @type {String}\n         */\n        Event[\"COMPLETED\"] = \"completed\";\n    })(Event = TaskTimer.Event || (TaskTimer.Event = {}));\n})(TaskTimer || (TaskTimer = {}));\nexports.TaskTimer = TaskTimer;\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n"],"sourceRoot":""}